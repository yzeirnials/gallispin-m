
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedf0bdb8 prev 0x562fedf03558 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562fedf0beb0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x562fedf0bf40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x562fedf0bfb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x562fedf0c078 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x562fedf0c140 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x562fedf0c2b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x562fedf0c1f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x562fedf0c360 <col:24>
| `-OptimizeNoneAttr 0x562fedf0c3b8 <col:34>
|-CXXMethodDecl 0x562fedf0c400 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x562fedf0c6b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x562fedf0c4b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562fedf0c528 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x562fedf0c5a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x562fedf0c770 <line:229:7, col:14> col:7 private
|-FieldDecl 0x562fedf0c7a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x562fedf0c810 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x562fedf0c898 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x562fedf0cbb8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x562fedf0c950 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562fedf0c9c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x562fedf0ca40 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x562fedf0cac0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x562fedf0ccd0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x562fedf13638 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562fedf13638
| `-ParmVarDecl 0x562fedf13748 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x562fedf137e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562fedf137e8
| `-ParmVarDecl 0x562fedf138f8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562fedfdde50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedefedd0 prev 0x562fedefeb50 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562fedefeec8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x562fedefef58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562fedefefb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x562fedeff0a8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x562fedeff1a8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x562fedeff378 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x562fedeff228 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x562fedeff2a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x562fedeff508 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x562fedeff440 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x562fedeff5b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x562fedeff6e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x562fedeff620 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x562fedeff888 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x562fedeff7c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x562fedeffa28 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x562fedeff968 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x562fedeffad0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x562fedeffbd0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x562fedeffcb0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeffbb0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x562fedeffb90 <col:26> 'int' 1
| `-EnumConstantDecl 0x562fedeffc60 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x562fedeffcc8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedeffc40 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x562fedeffc20 <col:44> 'int' 2
|-CXXMethodDecl 0x562fedeffe10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x562fedeffcf8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x562fedeffd78 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x562fedefff68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x562fedeffed8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x562fedf001a8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x562fedf00028 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x562fedf000a0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x562fedf00258 <col:20>
| `-OptimizeNoneAttr 0x562fedf002b0 <col:30>
|-CXXMethodDecl 0x562fedf003b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x562fedf002f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x562fedf00460 <col:20>
| `-OptimizeNoneAttr 0x562fedf004b8 <col:30>
|-CXXMethodDecl 0x562fedf00508 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x562fedf005d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x562fedf006e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x562fedf00770 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x562fedf007f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562fedf00880 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x562fedf00908 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562fedf00998 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562fedf00a58 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x562fedf00ae0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562fedf00b68 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x562fedf00bf0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562fedf00c78 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x562fedf00d00 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562fedf00d90 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562fedf00e50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x562fedf00ee0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562fedf01030 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562fedf00f98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562fedf011c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x562fedf010f0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562fedf01470 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562fedf01278 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562fedf012f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562fedf01378 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562fedf01528 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562fedf01630 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562fedf018c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf01610 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedf015f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x562fedf016c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562fedf018d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf016a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562fedf01680 <col:32> 'int' 20
| |-EnumConstantDecl 0x562fedf01750 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562fedf018f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf01730 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562fedf01710 <col:38> 'int' 90
| |-EnumConstantDecl 0x562fedf017e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562fedf01908 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf017c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x562fedf017a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x562fedf01870 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x562fedf01920 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedf01850 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562fedf01830 <col:32> 'int' 2000
|-CXXMethodDecl 0x562fedf01960 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562fedf01da0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562fedf01c10 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562fedf01c88 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf01e70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x562fedf01ff0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x562fedf01f20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf021f8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562fedf020a8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x562fedf02120 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf022f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562fedf02398 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562fedf02460 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf024f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562fedf02720 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf024d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x562fedf024b0 <col:36> 'int' EnumConstant 0x562fedf02460 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf02540 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf02590 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf025e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf02630 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562fedf02680 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x562fedf026d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562fedf02808 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562fedf02748 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x562fedf028d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562fedf02990 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562fedf02a50 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x562fedf02b10 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x562fedf02c28 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x562fedf02cf0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562fedf02e70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562fedf02da0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562fedf02f98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562fedf03198 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562fedf03048 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562fedf030c8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x562fedf0fad8 <col:54, line:127:5>
|   |-ParenExpr 0x562fedf0f988 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x562fedf0f958 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x562fedf0f648 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562fedf0f620 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x562fedf0f608 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x562fedf0f5f0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x562fedf0f5c0 <col:31> 'Router *' lvalue ->_router 0x562fedf0d4a0
|   |   |         `-CXXThisExpr 0x562fedf0f5b0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562fedf0f6a8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedf0f688 <col:48> 'int' 0
|   |   `-CallExpr 0x562fedf0f8b8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x562fedf0f8a0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedf0f880 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedf0f8f8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedf0f718 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x562fedf0f910 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedf0f738 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x562fedf0f928 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedf0f770 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x562fedf0f940 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedf0f868 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedf0f850 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedf0f808 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x562fedf0fa20 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x562fedf0f9b8 <col:9> 'Router *' lvalue ->_router 0x562fedf0d4a0
|   | | `-CXXThisExpr 0x562fedf0f9a8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x562fedf0fa08 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562fedf0f9e8 <col:19> 'Router *' lvalue ParmVar 0x562fedf03048 'r' 'Router *'
|   `-BinaryOperator 0x562fedf0fab8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x562fedf0fa50 <col:9> 'int' lvalue ->_eindex 0x562fedf0d508
|     | `-CXXThisExpr 0x562fedf0fa40 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x562fedf0faa0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562fedf0fa80 <col:19> 'int' lvalue ParmVar 0x562fedf030c8 'eindex' 'int'
|-CXXMethodDecl 0x562fedf03320 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562fedf03258 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x562fedf033f0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x562fedf034b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x562fedf03558 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x562fedf037a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x562fedf03620 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x562fedf036a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x562fedf03858 <col:20>
| `-OptimizeNoneAttr 0x562fedf038b0 <col:30>
|-CXXMethodDecl 0x562fedf039b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562fedf038f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x562fedf03a60 <col:20>
| `-OptimizeNoneAttr 0x562fedf03ab8 <col:30>
|-CXXMethodDecl 0x562fedf03b88 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562fedf03af8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x562fedf03c30 <col:20>
| `-OptimizeNoneAttr 0x562fedf03c88 <col:30>
|-CXXMethodDecl 0x562fedf03e18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x562fedf03cc0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x562fedf03d40 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x562fedf03fa8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562fedf03ee0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562fedf040f8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562fedf04068 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562fedf04248 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562fedf041b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562fedf04398 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562fedf04308 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562fedf04658 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x562fedf04450 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x562fedf044d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x562fedf04578 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x562fedf04730 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x562fedf047f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x562fedf04ac0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562fedf04970 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x562fedf049e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf04be8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x562fedf04dc0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x562fedf04ca0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x562fedf04d20 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x562fedf04fa8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x562fedf04e88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x562fedf04f08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x562fedf05318 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562fedf05068 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562fedf050e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562fedf05160 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562fedf0f0c0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562fedf0f0a0 <col:106> 'int' 0
| `-ParmVarDecl 0x562fedf051d8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f0f8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f0d8 <col:126> 'int' 0
|-CXXMethodDecl 0x562fedf056b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562fedf053e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562fedf05480 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562fedf05500 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x562fedf05578 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f130 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f110 <col:114> 'int' 0
|-CXXMethodDecl 0x562fedf05a48 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562fedf05790 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x562fedf05808 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562fedf05888 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x562fedf0f148 <col:96> 'int' 0
| `-ParmVarDecl 0x562fedf05900 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f188 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f168 <col:116> 'int' 0
|-CXXMethodDecl 0x562fedf05dc8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562fedf05b18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562fedf05b90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf05c10 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562fedf0f1c0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562fedf0f1a0 <col:109> 'int' 0
| `-ParmVarDecl 0x562fedf05c88 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f1f8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f1d8 <col:129> 'int' 0
|-CXXMethodDecl 0x562fedf06148 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562fedf05e98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562fedf05f10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf05f90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x562fedf06008 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f230 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f210 <col:117> 'int' 0
|-CXXMethodDecl 0x562fedf064d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562fedf06220 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf06298 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf06318 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x562fedf0f248 <col:99> 'int' 0
| `-ParmVarDecl 0x562fedf06390 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562fedf0f288 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562fedf0f268 <col:119> 'int' 0
|-CXXMethodDecl 0x562fedf068f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x562fedf065a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562fedf06628 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562fedf066a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf06720 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562fedf0f2c0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562fedf0f2a0 <col:108> 'int' 0
| `-ParmVarDecl 0x562fedf067a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x562fedf0f2f8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x562fedf0f2d8 <col:141> 'int' 0
|-CXXMethodDecl 0x562fedf06d18 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562fedf069d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562fedf06a50 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562fedf06ac8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf06b48 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x562fedf06bc8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562fedf0f310 <col:121> 'int' 0
|-CXXMethodDecl 0x562fedf07148 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562fedf06df8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x562fedf06e78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x562fedf06ef0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf06f70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x562fedf0f330 <col:98> 'int' 0
| `-ParmVarDecl 0x562fedf06ff0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562fedf0f350 <col:123> 'int' 0
|-CXXMethodDecl 0x562fedf07410 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x562fedf07220 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562fedf072a0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x562fedf07320 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x562fedf0f370 <col:80> 'int' 0
|-EnumDecl 0x562fedf074c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x562fedf075d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562fedf07860 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf075b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x562fedf07590 <col:42> 'int' 1
| |-EnumConstantDecl 0x562fedf07660 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562fedf07878 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf07640 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x562fedf07620 <col:40> 'int' 2
| |-EnumConstantDecl 0x562fedf076f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562fedf07890 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf076d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x562fedf076b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x562fedf07780 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562fedf078a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedf07760 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x562fedf07740 <col:36> 'int' 7
| `-EnumConstantDecl 0x562fedf07810 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x562fedf078c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedf077f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x562fedf077d0 <col:34> 'int' 6
|-CXXMethodDecl 0x562fedf07b78 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x562fedf078e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x562fedf07988 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x562fedf07a08 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x562fedf07a80 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x562fedf0f428 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x562fedf0f410 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x562fedf0f3f8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x562fedf0f3d8 <col:98, col:105> 'String' (CXXTemporary 0x562fedf0f3d8)
|           `-CXXTemporaryObjectExpr 0x562fedf0f3a0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x562fedf07e18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x562fedf07c48 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562fedf07cc0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x562fedf07d38 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562fedf0f4d8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562fedf0f4c0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562fedf0f4a8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562fedf0f488 <col:94, col:101> 'String' (CXXTemporary 0x562fedf0f488)
| |         `-CXXTemporaryObjectExpr 0x562fedf0f450 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x562fedf0fcc0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x562fedf0fc38 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x562fedf0fc08 <col:9> '<bound member function type>' ->add_task_handlers 0x562fedf07b78
|     | `-CXXThisExpr 0x562fedf0fbf8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562fedf0fc78 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562fedf0fb78 <col:27> 'Task *' lvalue ParmVar 0x562fedf07c48 'task' 'Task *'
|     |-ImplicitCastExpr 0x562fedf0fc90 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x562fedf0fb98 <col:33> 'NotifierSignal *' lvalue ParmVar 0x562fedf07cc0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x562fedf0fca8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562fedf0fbb8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562fedf07810 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562fedf0fbd8 <col:62> 'const String' lvalue ParmVar 0x562fedf07d38 'prefix' 'const String &'
|-CXXMethodDecl 0x562fedf08028 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x562fedf07ee0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562fedf07f58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562fedf0f588 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562fedf0f570 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562fedf0f558 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562fedf0f538 <col:70, col:77> 'String' (CXXTemporary 0x562fedf0f538)
| |         `-CXXTemporaryObjectExpr 0x562fedf0f500 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x562fedf0fe98 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x562fedf0fe10 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x562fedf0fde0 <col:9> '<bound member function type>' ->add_task_handlers 0x562fedf07b78
|     | `-CXXThisExpr 0x562fedf0fdd0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562fedf0fe50 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562fedf0fd50 <col:27> 'Task *' lvalue ParmVar 0x562fedf07ee0 'task' 'Task *'
|     |-ImplicitCastExpr 0x562fedf0fe68 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x562fedf0fd70 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x562fedf0fe80 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562fedf0fd90 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562fedf07810 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562fedf0fdb0 <col:57> 'const String' lvalue ParmVar 0x562fedf07f58 'prefix' 'const String &'
|-CXXMethodDecl 0x562fedf08308 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x562fedf080f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf08170 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf081e8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x562fedf085b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x562fedf083d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf08458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf084d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x562fedf088a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562fedf08688 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf08708 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf08780 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x562fedf08b58 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x562fedf08978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf089f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf08a78 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x562fedf08e08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x562fedf08c28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf08ca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf08d28 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x562fedf090b8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x562fedf08ed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf08f58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf08fd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x562fedf09368 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x562fedf09188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf09208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf09288 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x562fedf09678 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x562fedf09490 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf09510 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf09590 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x562fedf09958 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x562fedf09748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf097c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf09870 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x562fedf09c38 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x562fedf09a28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf09aa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf09b50 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x562fedf09ea0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562fedf09d08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562fedf09d88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562fedf09e00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x562fedf0a148 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x562fedf09f70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562fedf09ff0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562fedf0a068 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x562fedf0a3f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x562fedf0a218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf0a298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf0a318 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x562fedf0a6a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x562fedf0a4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf0a548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf0a5c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x562fedf0a958 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x562fedf0a778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf0a7f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf0a870 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x562fedf0ac28 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x562fedf0aa28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf0aaa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562fedf0ab48 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x562fedf0af58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x562fedf0acf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562fedf0ad78 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x562fedf0adf0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x562fedf0ae68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562fedf0f5a0 <col:93> 'bool' false
|-CXXMethodDecl 0x562fedf0b140 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562fedf0b028 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x562fedf0b0a8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x562fedf0b318 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562fedf0b200 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x562fedf0b280 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x562fedf0b5f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562fedf0b3d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x562fedf0b450 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x562fedf0b4d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x562fedf0b548 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf0b8e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562fedf0b6c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x562fedf0b740 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x562fedf0b7c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x562fedf0b838 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf0bb20 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x562fedf0b9c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x562fedf0ba40 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x562fedf0bd08 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x562fedf0bbe8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x562fedf0bc68 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x562fedf0bdb8 prev 0x562fedf03558 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562fedf0beb0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x562fedf0bf40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x562fedf0bfb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x562fedf0c078 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x562fedf0c140 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x562fedf0c2b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x562fedf0c1f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x562fedf0c360 <col:24>
| | `-OptimizeNoneAttr 0x562fedf0c3b8 <col:34>
| |-CXXMethodDecl 0x562fedf0c400 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x562fedf0c6b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x562fedf0c4b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562fedf0c528 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x562fedf0c5a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x562fedf0c770 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x562fedf0c7a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x562fedf0c810 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x562fedf0c898 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x562fedf0cbb8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x562fedf0c950 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562fedf0c9c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x562fedf0ca40 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x562fedf0cac0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x562fedf0ccd0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x562fedf13638 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562fedf13638
| | `-ParmVarDecl 0x562fedf13748 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x562fedf137e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562fedf137e8
| | `-ParmVarDecl 0x562fedf138f8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562fedfdde50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562fedf0cd48 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x562fedf0cde8 <col:38> "" ""
|-CXXMethodDecl 0x562fedf0ce78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x562fedf0cf18 <col:44> "" ""
|-AccessSpecDecl 0x562fedf0cf88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x562fedf0cfb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x562fedf0d0b0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x562fedf0d100 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedf0d090 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x562fedf0d070 <col:27> 'int' 4
|-FieldDecl 0x562fedf0d1b8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x562fedf0d368 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x562fedf0d420 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x562fedf0d4a0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x562fedf0d508 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x562fedf0d658 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x562fedf0d598 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x562fedf0d808 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x562fedf0d718 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x562fedf0d9e8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x562fedf0d8c8 <col:20> col:23 'int'
| `-ParmVarDecl 0x562fedf0d948 <col:25> col:28 'int'
|-CXXMethodDecl 0x562fedf0dc90 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf0dab0 <col:23> col:26 'int'
| |-ParmVarDecl 0x562fedf0db30 <col:28> col:31 'int'
| `-ParmVarDecl 0x562fedf0dba8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x562fedf0dd48 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x562fedf0de10 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x562fedf0de60 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x562fedf0deb0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x562fedf0e090 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x562fedf0df40 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x562fedf0dfb8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf0e338 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x562fedf0e158 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x562fedf0e1d8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x562fedf0e250 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf0e558 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x562fedf0e408 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x562fedf0e488 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x562fedf0e890 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x562fedf0e618 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x562fedf0e698 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x562fedf0e710 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x562fedf0e790 <col:57> col:60 'int'
|-CXXMethodDecl 0x562fedf0ea78 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562fedf0e960 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x562fedf0e9e0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x562fedf0ebc8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x562fedf0eb38 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x562fedf0ef48 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x562fedf0ec88 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x562fedf0ed08 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x562fedf0ed80 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x562fedf0ee00 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x562fedf0f060 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SendPattern
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _len
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedf167a8 <../elements/radio/sendpattern.hh:16:1, line:33:1> line:16:7 class SendPattern definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x562fedf16908 <col:1, col:7> col:7 implicit referenced class SendPattern
|-FieldDecl 0x562fedf169b0 <line:18:3, col:7> col:7 referenced _len 'int'
|-AccessSpecDecl 0x562fedf16a00 <line:20:2, col:8> col:2 public
|-CXXConstructorDecl 0x562fedf16a90 <line:22:3, col:15> col:3 SendPattern 'void ()'
|-CXXDestructorDecl 0x562fedf16b80 <line:23:3, col:16> col:3 ~SendPattern 'void ()' noexcept-unevaluated 0x562fedf16b80
| `-Overrides: [ 0x562fedeff0a8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x562fedf16cb0 <line:25:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x562fedf00508 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x562fedf176b8 <col:34, col:58>
|   `-ReturnStmt 0x562fedf176a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x562fedf17690 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562fedf17668 <col:43> 'const char [12]' lvalue "SendPattern"
|-CXXMethodDecl 0x562fedf16d78 <line:26:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x562fedf005d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x562fedf17718 <col:34, col:54>
|   `-ReturnStmt 0x562fedf17708 <col:36, col:43>
|     `-ImplicitCastExpr 0x562fedf176f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x562fedf176d0 <col:43> 'const char []' lvalue Var 0x562fedf00770 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x562fedf16e40 <line:27:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x562fedf00998 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x562fedf17778 <col:34, col:49>
|   `-ReturnStmt 0x562fedf17768 <col:36, col:43>
|     `-ImplicitCastExpr 0x562fedf17750 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x562fedf17730 <col:43> 'const char []' lvalue Var 0x562fedf00b68 'PULL' 'const char []'
|-CXXMethodDecl 0x562fedf17110 <line:29:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x562fedf01da0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x562fedf16fc0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x562fedf17038 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x562fedf17268 <line:31:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x562fedeff508 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x562fedf171d8 <col:16> col:19 'int'
|-CXXConstructorDecl 0x562fedf17338 <line:16:7> col:7 implicit SendPattern 'void (const SendPattern &)' inline default_delete noexcept-unevaluated 0x562fedf17338
| `-ParmVarDecl 0x562fedf17448 <col:7> col:7 'const SendPattern &'
`-CXXMethodDecl 0x562fedf174e8 <col:7> col:7 implicit operator= 'SendPattern &(const SendPattern &)' inline default_delete noexcept-unevaluated 0x562fedf174e8
  `-ParmVarDecl 0x562fedf175f8 <col:7> col:7 'const SendPattern &'

Layout: <CGRecordLayout
  LLVMType:%class.SendPattern = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.SendPattern = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedccfce0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562fedccfdf8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x562fedccfe98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x562fedccfef8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x562fedccff58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x562fedcd0008 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedcd0310 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562fedcd0428 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x562fedcd04d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x562fedcd0538 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x562fedcd05c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x562fedcd6660 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562fedcd6a98 <col:12>
|-CXXConstructorDecl 0x562fedcd6768 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562fedcd6878 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562fedcd04d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x562fedcd9020 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x562fedcd8ff0 <col:12> 'const char *const' lvalue .data 0x562fedcd04d0
| |     `-DeclRefExpr 0x562fedcd8fd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562fedcd0538 'length' 'int'
| | `-ImplicitCastExpr 0x562fedcd90b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562fedcd9080 <col:12> 'const int' lvalue .length 0x562fedcd0538
| |     `-DeclRefExpr 0x562fedcd9060 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562fedcd05c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x562fedcd9140 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x562fedcd9110 <col:12> 'String::memo_t *const' lvalue .memo 0x562fedcd05c8
| |     `-DeclRefExpr 0x562fedcd90f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| `-CompoundStmt 0x562fedcd9198 <col:12>
|-CXXConstructorDecl 0x562fedcd6918 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562fedcd6918
| `-ParmVarDecl 0x562fedcd6a28 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x562fedcdbf80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562fedce7998 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562fedce7aa8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x562fedce7fc0 <col:12>
|   |-BinaryOperator 0x562fedce7dd8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562fedce7d90 <col:12> 'const char *' lvalue ->data 0x562fedcd04d0
|   | | `-CXXThisExpr 0x562fedce7d80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562fedce7dc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x562fedce7d50 <col:12> 'const char *const' lvalue .data 0x562fedcd04d0
|   |     `-DeclRefExpr 0x562fedce7d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562fedce7ea0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x562fedce7e58 <col:12> 'int' lvalue ->length 0x562fedcd0538
|   | | `-CXXThisExpr 0x562fedce7e48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562fedce7e88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x562fedce7e18 <col:12> 'const int' lvalue .length 0x562fedcd0538
|   |     `-DeclRefExpr 0x562fedce7df8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562fedce7f68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x562fedce7f20 <col:12> 'String::memo_t *' lvalue ->memo 0x562fedcd05c8
|   | | `-CXXThisExpr 0x562fedce7f10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562fedce7f50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x562fedce7ee0 <col:12> 'String::memo_t *const' lvalue .memo 0x562fedcd05c8
|   |     `-DeclRefExpr 0x562fedce7ec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x562fedce7fb0 <col:12>
|     `-UnaryOperator 0x562fedce7f98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedce7f88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x562fedce7b18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562fedce7b18
  `-ParmVarDecl 0x562fedce7c28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedcc7250 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562fedcc7368 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x562fedcc73f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x562fedcc7438 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x562fed99afd0 'const char *'
|   `-QualType 0x562fed99a521 'const char' const
|     `-BuiltinType 0x562fed99a520 'char'
|-TypedefDecl 0x562fedcc74c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x562fedcc7490 'String::const_iterator' sugar
|   |-Typedef 0x562fedcc7438 'const_iterator'
|   `-PointerType 0x562fed99afd0 'const char *'
|     `-QualType 0x562fed99a521 'const char' const
|       `-BuiltinType 0x562fed99a520 'char'
|-TypedefDecl 0x562fedcc7630 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x562fedcc75a0 'int (String::*)() const'
|   |-RecordType 0x562fedcc72e0 'String'
|   | `-CXXRecord 0x562fedcc7250 'String'
|   `-ParenType 0x562fedcc7540 'int () const' sugar
|     `-FunctionProtoType 0x562fedc9b0d0 'int () const' const cdecl
|       `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedcc7698 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x562fedaef870 'int64_t' sugar
|   |-Typedef 0x562feda03390 'int64_t'
|   `-TypedefType 0x562fed9dc630 '__int64_t' sugar
|     |-Typedef 0x562fed9dc208 '__int64_t'
|     `-BuiltinType 0x562fed99a5a0 'long'
|-TypedefDecl 0x562fedcc7700 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x562fedaef790 'uint64_t' sugar
|   |-Typedef 0x562feda03530 'uint64_t'
|   `-TypedefType 0x562fed9dc6c0 '__uint64_t' sugar
|     |-Typedef 0x562fed9dc278 '__uint64_t'
|     `-BuiltinType 0x562fed99a640 'unsigned long'
|-TypedefDecl 0x562fedcc7790 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x562fedcc7760 'String::intmax_t' sugar
|   |-Typedef 0x562fedcc7698 'intmax_t'
|   `-TypedefType 0x562fedaef870 'int64_t' sugar
|     |-Typedef 0x562feda03390 'int64_t'
|     `-TypedefType 0x562fed9dc630 '__int64_t' sugar
|       |-Typedef 0x562fed9dc208 '__int64_t'
|       `-BuiltinType 0x562fed99a5a0 'long'
|-TypedefDecl 0x562fedcc7820 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x562fedcc77f0 'String::uintmax_t' sugar
|   |-Typedef 0x562fedcc7700 'uintmax_t'
|   `-TypedefType 0x562fedaef790 'uint64_t' sugar
|     |-Typedef 0x562feda03530 'uint64_t'
|     `-TypedefType 0x562fed9dc6c0 '__uint64_t' sugar
|       |-Typedef 0x562fed9dc278 '__uint64_t'
|       `-BuiltinType 0x562fed99a640 'unsigned long'
|-CXXConstructorDecl 0x562fedcc78e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x562fedcc7a88 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x562fedcc79c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x562fedcc7c38 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x562fedcc7b78 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x562fedcc7d90 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x562fedcc7d00 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x562fedcc7fa8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x562fedcc7e58 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x562fedcc7ed8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x562fedcc81c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562fedcc8078 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x562fedcc80f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x562fedcc83e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562fedcc8298 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x562fedcc8318 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x562fedcc8608 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562fedcc84b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x562fedcc8538 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x562fedcc8798 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x562fedcc86d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x562fedcc8918 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x562fedcc8858 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x562fedcc8aa8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x562fedcc89e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x562fedcc8c00 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x562fedcc8b70 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x562fedcc8d58 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x562fedcc8cc8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x562fedcc8eb0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x562fedcc8e20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x562fedcc9038 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x562fedcc8f78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x562fedcc91c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x562fedcc9100 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x562fedcc9358 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x562fedcc9290 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x562fedcc94e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x562fedcc9420 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x562fedcc95e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x562fedcc9708 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x562fedcc9888 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x562fedcc97c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x562fedcc99d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x562fedcc9948 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x562fedcc9a90 <col:63> "" ""
|-CXXMethodDecl 0x562fedcc9bd8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x562fedcc9b18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x562fedcc9de8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x562fedcc9c98 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x562fedcc9d18 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x562fedcca008 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x562fedcc9eb0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x562fedcc9f30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x562fedcca2e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x562fedcca0c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x562fedcca148 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x562fedcd6130 <col:55> 'int' 10
| `-ParmVarDecl 0x562fedcca1c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562fedcd6150 <col:76> 'bool' true
|-CXXMethodDecl 0x562fedcca5c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x562fedcca3b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x562fedcca430 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x562fedcd6160 <col:56> 'int' 10
| `-ParmVarDecl 0x562fedcca4a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562fedcd6180 <col:77> 'bool' true
|-CXXMethodDecl 0x562fedcca6d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x562fedcca798 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x562fedcca860 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x562fedcca900 <col:20>
| `-OptimizeNoneAttr 0x562fedcca958 <col:30>
|-CXXConversionDecl 0x562fedccaa48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x562fedccab18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x562fedccabd8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x562fedccacc8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562fedccad88 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562fedccaf08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x562fedccae40 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x562fedccb058 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x562fedccafc8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x562fedccb148 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x562fedccb208 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x562fedccb458 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x562fedccb2c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x562fedccb340 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x562fedccb6b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x562fedccb520 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x562fedccb5a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x562fedccb788 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedccb998 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x562fedccb840 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x562fedccb8c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x562fedccbbb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x562fedccba60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x562fedccbae0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x562fedccbd48 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x562fedccbc80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x562fedccbe38 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x562fedccbfa8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x562fedccbee8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562fedccc1b8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x562fedccc068 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562fedccc0e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562fedccc3d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x562fedccc278 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x562fedccc2f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x562fedccc560 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x562fedccc490 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562fedccc780 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x562fedccc620 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x562fedccc6a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562fedccc8d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x562fedccc840 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x562fedcccaa8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x562fedccc990 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562fedccca10 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x562fedcccbf8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x562fedcccb68 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x562fedccce10 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x562fedccccb0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x562fedcccd30 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x562fedcd6190 <col:39> 'int' 0
|-CXXMethodDecl 0x562fedccd030 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x562fedccced0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x562fedcccf50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x562fedcd61b0 <col:48> 'int' 0
|-CXXMethodDecl 0x562fedccd210 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x562fedccd0f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x562fedccd170 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x562fedcd61d0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x562fedccd2e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x562fedccd3a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x562fedccd460 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x562fedccd520 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x562fedccd5e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x562fedccd788 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x562fedccd690 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x562fedccd908 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x562fedccd840 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x562fedccdae0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x562fedccd9c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x562fedccdc58 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x562fedccdb98 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x562fedccdda0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x562fedccdd10 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562fedccdef0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x562fedccde60 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x562fedcce0c8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x562fedccdfb0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562fedcce030 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562fedcce2a8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562fedcce190 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x562fedcce210 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x562fedcce3f8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x562fedcce368 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x562fedcce608 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x562fedcce4b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x562fedcce538 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x562fedcce768 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x562fedcce6d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562fedcce8c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x562fedcce828 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x562fedcce968 <col:57> "" ""
|-CXXMethodDecl 0x562fedccea78 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x562fedcce9e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x562fedccebc8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x562fedcceb38 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x562fedcced48 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x562fedccec80 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x562fedccee10 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x562fedcceed0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x562fedccef90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x562fedccf030 <col:49> "" ""
|-CXXMethodDecl 0x562fedccf0c0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x562fedccf180 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x562fedccf270 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x562fedccf338 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x562fedccf3f8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x562fedccf4b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x562fedccf5b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x562fedccf678 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x562fedccf740 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x562fedccf918 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x562fedccf7f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x562fedccf878 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x562fedccfb40 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x562fedccf9e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x562fedccfa60 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x562fedccfc50 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x562fedccfcb8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x562fedccfce0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x562fedccfdf8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x562fedccfe98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x562fedccfef8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x562fedccff58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x562fedcd0008 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x562fedcd0070 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x562fedcd02a8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x562fedcd02f8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedcd0288 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x562fedcd0198 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x562fedcd0140 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x562fedcd0180 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x562fedcd0160 <col:32> 'int' 8
|-CXXRecordDecl 0x562fedcd0310 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562fedcd0428 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x562fedcd04d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x562fedcd0538 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x562fedcd05c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x562fedcd6660 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562fedcd6a98 <col:12>
| |-CXXConstructorDecl 0x562fedcd6768 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562fedcd6878 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562fedcd04d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x562fedcd9020 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x562fedcd8ff0 <col:12> 'const char *const' lvalue .data 0x562fedcd04d0
| | |     `-DeclRefExpr 0x562fedcd8fd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562fedcd0538 'length' 'int'
| | | `-ImplicitCastExpr 0x562fedcd90b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562fedcd9080 <col:12> 'const int' lvalue .length 0x562fedcd0538
| | |     `-DeclRefExpr 0x562fedcd9060 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562fedcd05c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x562fedcd9140 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x562fedcd9110 <col:12> 'String::memo_t *const' lvalue .memo 0x562fedcd05c8
| | |     `-DeclRefExpr 0x562fedcd90f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedcd6878 '' 'const String::rep_t &'
| | `-CompoundStmt 0x562fedcd9198 <col:12>
| |-CXXConstructorDecl 0x562fedcd6918 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562fedcd6918
| | `-ParmVarDecl 0x562fedcd6a28 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x562fedcdbf80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x562fedce7998 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562fedce7aa8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x562fedce7fc0 <col:12>
| |   |-BinaryOperator 0x562fedce7dd8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x562fedce7d90 <col:12> 'const char *' lvalue ->data 0x562fedcd04d0
| |   | | `-CXXThisExpr 0x562fedce7d80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562fedce7dc0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x562fedce7d50 <col:12> 'const char *const' lvalue .data 0x562fedcd04d0
| |   |     `-DeclRefExpr 0x562fedce7d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562fedce7ea0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x562fedce7e58 <col:12> 'int' lvalue ->length 0x562fedcd0538
| |   | | `-CXXThisExpr 0x562fedce7e48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562fedce7e88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x562fedce7e18 <col:12> 'const int' lvalue .length 0x562fedcd0538
| |   |     `-DeclRefExpr 0x562fedce7df8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562fedce7f68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x562fedce7f20 <col:12> 'String::memo_t *' lvalue ->memo 0x562fedcd05c8
| |   | | `-CXXThisExpr 0x562fedce7f10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562fedce7f50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x562fedce7ee0 <col:12> 'String::memo_t *const' lvalue .memo 0x562fedcd05c8
| |   |     `-DeclRefExpr 0x562fedce7ec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562fedce7aa8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x562fedce7fb0 <col:12>
| |     `-UnaryOperator 0x562fedce7f98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562fedce7f88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x562fedce7b18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562fedce7b18
|   `-ParmVarDecl 0x562fedce7c28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x562fedcd0640 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x562fedcd0888 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x562fedcd06a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x562fedcd0728 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x562fedcd07a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x562fedcd6620 <col:79, line:261:5>
|   |-BinaryOperator 0x562fedcd6298 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562fedcd6230 <col:2, col:5> 'const char *' lvalue .data 0x562fedcd04d0
|   | | `-MemberExpr 0x562fedcd6200 <col:2> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|   | |   `-CXXThisExpr 0x562fedcd61f0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562fedcd6280 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562fedcd6260 <col:12> 'const char *' lvalue ParmVar 0x562fedcd06a8 'data' 'const char *'
|   |-BinaryOperator 0x562fedcd6360 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x562fedcd62f8 <col:2, col:5> 'int' lvalue .length 0x562fedcd0538
|   | | `-MemberExpr 0x562fedcd62c8 <col:2> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|   | |   `-CXXThisExpr 0x562fedcd62b8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562fedcd6348 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562fedcd6328 <col:14> 'int' lvalue ParmVar 0x562fedcd0728 'length' 'int'
|   `-IfStmt 0x562fedcd6608 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x562fedcd6480 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562fedcd6468 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x562fedcd6448 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x562fedcd6428 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x562fedcd63c0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|     |       | `-MemberExpr 0x562fedcd6390 <col:7> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|     |       |   `-CXXThisExpr 0x562fedcd6380 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x562fedcd6410 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fedcd63f0 <col:17> 'String::memo_t *' lvalue ParmVar 0x562fedcd07a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x562fedcd65e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x562fedcd65c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562fedcd64d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x562fedcbf2b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x562fedcd6538 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562fedccfe98
|         `-ImplicitCastExpr 0x562fedcd6520 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x562fedcd6500 <col:27> 'String::memo_t *' lvalue ParmVar 0x562fedcd07a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x562fedcd0b38 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x562fedcd0958 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x562fedcd09d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x562fedcd0a50 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x562fedcd0640 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x562fedcd6aa8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x562fedcd6c38 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x562fedcd6ba0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x562fedcd6b10 <col:2> '<bound member function type>' ->assign_memo 0x562fedcd0888
|     | `-ImplicitCastExpr 0x562fedcd6bd8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x562fedcd6b00 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x562fedcd6bf0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x562fedcd6b40 <col:14> 'const char *' lvalue ParmVar 0x562fedcd0958 'data' 'const char *'
|     |-ImplicitCastExpr 0x562fedcd6c08 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x562fedcd6b60 <col:20> 'int' lvalue ParmVar 0x562fedcd09d8 'length' 'int'
|     `-ImplicitCastExpr 0x562fedcd6c20 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x562fedcd6b80 <col:28> 'String::memo_t *' lvalue ParmVar 0x562fedcd0a50 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x562fedcd0cc8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x562fedcd0c08 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x562fedcd6e90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x562fedcd6e10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x562fedcd6c60 <col:2> '<bound member function type>' ->assign_memo 0x562fedcd0888
|     | `-CXXThisExpr 0x562fedcd6c50 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x562fedcd6e48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x562fedcd6ce0 <col:14, col:19> 'const char *' lvalue .data 0x562fedcd04d0
|     |   `-MemberExpr 0x562fedcd6cb0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x562fedcd0640
|     |     `-DeclRefExpr 0x562fedcd6c90 <col:14> 'const String' lvalue ParmVar 0x562fedcd0c08 'x' 'const String &'
|     |-ImplicitCastExpr 0x562fedcd6e60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x562fedcd6d60 <col:25, col:30> 'int' lvalue .length 0x562fedcd0538
|     |   `-MemberExpr 0x562fedcd6d30 <col:25, col:27> 'String::rep_t' lvalue ._r 0x562fedcd0640
|     |     `-DeclRefExpr 0x562fedcd6d10 <col:25> 'const String' lvalue ParmVar 0x562fedcd0c08 'x' 'const String &'
|     `-ImplicitCastExpr 0x562fedcd6e78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x562fedcd6de0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|         `-MemberExpr 0x562fedcd6db0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x562fedcd0640
|           `-DeclRefExpr 0x562fedcd6d90 <col:38> 'const String' lvalue ParmVar 0x562fedcd0c08 'x' 'const String &'
|-CXXMethodDecl 0x562fedcd0d90 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x562fedcd7850 <col:31, line:278:5>
|   `-IfStmt 0x562fedcd7838 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x562fedcd6f30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562fedcd6f18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x562fedcd6ee8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|     |     `-MemberExpr 0x562fedcd6eb8 <col:6> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|     |       `-CXXThisExpr 0x562fedcd6ea8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x562fedcd7810 <col:15, line:277:2>
|       |-ParenExpr 0x562fedcd73e0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x562fedcd73b0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x562fedcd7040 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x562fedcd7028 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x562fedcd7010 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x562fedcd6fd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562fedccfe98
|       |   |       `-ImplicitCastExpr 0x562fedcd6fb8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x562fedcd6f88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|       |   |           `-MemberExpr 0x562fedcd6f58 <col:27> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|       |   |             `-CXXThisExpr 0x562fedcd6f48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x562fedcd70a0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x562fedcd7080 <col:54> 'int' 0
|       |   `-CallExpr 0x562fedcd7310 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x562fedcd72f8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562fedcd7278 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x562fedcd7350 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562fedcd7188 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x562fedcd7368 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562fedcd71b8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x562fedcd7380 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x562fedcd71f0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x562fedcd7398 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x562fedcd7260 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x562fedcd7248 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x562fedcd7210 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x562fedcd7730 <line:274:6, line:275:22>
|       | |-CallExpr 0x562fedcd75f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x562fedcd75d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x562fedcd7550 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x562fedcc0700 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x562fedcd7520 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562fedccfe98
|       | |   `-ImplicitCastExpr 0x562fedcd7508 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x562fedcd74d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|       | |       `-MemberExpr 0x562fedcd74a8 <col:40> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|       | |         `-CXXThisExpr 0x562fedcd7498 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x562fedcd76f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x562fedcd76d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x562fedcd7618 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x562fedcd5570 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x562fedcd7718 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x562fedcd7678 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|       |       `-MemberExpr 0x562fedcd7648 <col:15> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|       |         `-CXXThisExpr 0x562fedcd7638 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x562fedcd77f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x562fedcd7788 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562fedcd05c8
|         | `-MemberExpr 0x562fedcd7758 <col:6> 'String::rep_t' lvalue ->_r 0x562fedcd0640
|         |   `-CXXThisExpr 0x562fedcd7748 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x562fedcd77d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x562fedcd77b8 <col:16> 'int' 0
|-CXXMethodDecl 0x562fedcd1028 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x562fedcd0e48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562fedcd0ec8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562fedcd0f40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x562fedcd1100 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x562fedcd1350 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x562fedcd11b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562fedcd1238 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562fedcd12b0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x562fedcd1538 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x562fedcd1420 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x562fedcd14a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x562fedcd1638 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x562fedcd7928 <col:41, line:286:5>
|   `-ReturnStmt 0x562fedcd7918 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x562fedcd78e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x562fedcd78b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x562fedcd7898 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x562fedcd7878 <col:46> 'int' 1
|-CXXMethodDecl 0x562fedcd18d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x562fedcd16f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x562fedcd1770 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x562fedcd17f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x562fedcd5570 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x562fedcd19a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x562fedcd5640 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x562fedcd5810 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x562fedcd56f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562fedcd5778 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x562fedcd58d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x562fedcd5998 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x562fedcd5a98 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x562fedcd5b10 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x562fedcd5b88 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x562fedcd5bf0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x562fedcd5cf0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x562fedcd5d40 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedcd5cd0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x562fedcd5cb0 <col:22> 'int' 14
|-CXXMethodDecl 0x562fedcd5f58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x562fedcd5d70 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x562fedcd5df0 <col:38> col:41 'int'
| `-ParmVarDecl 0x562fedcd5e70 <col:43> col:46 'int'
|-FriendDecl 0x562fedcd6060 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x562fedcd60f0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562fedf438d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x562fedf43aa8 prev 0x562fedf438d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562fedf43b38 <col:46, col:52> col:46 public
|-TypedefDecl 0x562fedf43b60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf454c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x562fedf45470 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x562fedf45450 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x562fedf43d78 'type'
|     `-SubstTemplateTypeParmType 0x562fedf43d40 'String' sugar
|       |-TemplateTypeParmType 0x562fedc8aaf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc8aaa0 'T'
|       `-RecordType 0x562fedcc72e0 'String'
|         `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf45578 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x562fedf45540 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x562fedf45520 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562fedf454c0 'type'
|     `-ElaboratedType 0x562fedf45470 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x562fedf45450 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x562fedf43d78 'type'
|         `-SubstTemplateTypeParmType 0x562fedf43d40 'String' sugar
|           |-TemplateTypeParmType 0x562fedc8aaf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562fedc8aaa0 'T'
|           `-RecordType 0x562fedcc72e0 'String'
|             `-CXXRecord 0x562fedcc7250 'String'
|-CXXMethodDecl 0x562fedf456f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x562fedf45608 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x562fedf457e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562fedf458c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562fedf458c8
|-CXXMethodDecl 0x562fedf45b98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562fedf45aa0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x562fedf45dd8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562fedf45c50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf45cc8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf45fa8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562fedf45e98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf45f10 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf46108 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562fedf461d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562fedf46428 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562fedf46298 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562fedf46310 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf4a6b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x562fedf4a530 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562fedf4a5a8 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf4a878 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562fedf4a788 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf4aa38 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562fedf4a940 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf4aaf0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562fedf4aba0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562fedf4add8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562fedf4ac50 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf4acc8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562fedf4b078 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562fedf4af80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x562fedf4b140 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x562fedf4b190 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562fedf4b1e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562fedf01a10 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x562fedf42338 prev 0x562fedf01a10 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562fedf43840 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x562fedf437f0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x562fedf437d0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562fedf43680 'type'
|     `-SubstTemplateTypeParmType 0x562fedf43510 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x562fedc608a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x562fedc60848 'F'
|       `-RecordType 0x562fedf43170 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x562fedf43090 'typed_array_memory'
|-FieldDecl 0x562fedf4b230 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x562fedf4b280 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562fedf4b2b8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|   |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562fedc97db8 'T'
|   `-RecordType 0x562fedcc72e0 'String'
|     `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4b348 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x562fedf4b310 'String &'
|   `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-RecordType 0x562fedcc72e0 'String'
|       `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4b3d8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x562fedf4b3a0 'const String &'
|   `-QualType 0x562fedf423d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-RecordType 0x562fedcc72e0 'String'
|         `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4b468 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x562fedf4b430 'String *'
|   `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-RecordType 0x562fedcc72e0 'String'
|       `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4b4f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x562fedf4b4c0 'const String *'
|   `-QualType 0x562fedf423d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-RecordType 0x562fedcc72e0 'String'
|         `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4c150 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x562fedf4c100 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x562fedf4c0e0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x562fedf4c018 'type'
|     `-LValueReferenceType 0x562fedf4bfe0 'const String &'
|       `-QualType 0x562fedf4bd81 'const String' const
|         `-SubstTemplateTypeParmType 0x562fedf4bd80 'String' sugar
|           |-TemplateTypeParmType 0x562fedc6a7f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562fedc6a798 'T'
|           `-RecordType 0x562fedcc72e0 'String'
|             `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4c1b8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x562fedf4b3a0 'const String &'
|   `-QualType 0x562fedf423d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-RecordType 0x562fedcc72e0 'String'
|         `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4c210 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf4c278 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x562fedf4b430 'String *'
|   `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-RecordType 0x562fedcc72e0 'String'
|       `-CXXRecord 0x562fedcc7250 'String'
|-TypedefDecl 0x562fedf4c2e0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x562fedf4b4c0 'const String *'
|   `-QualType 0x562fedf423d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562fedf423d0 'String' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-RecordType 0x562fedcc72e0 'String'
|         `-CXXRecord 0x562fedcc7250 'String'
|-EnumDecl 0x562fedf4c338 <line:134:5> col:5
| `-EnumConstantDecl 0x562fedf4c430 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562fedf4c410 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562fedc99498 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562fedc99470 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562fedc99450 <col:40> 'int' 1
|-CXXConstructorDecl 0x562fedf4c4b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562fedf4c748 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf4c570 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf4c610 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x562fedf4c9d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x562fedf4c8c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x562fedf4cc98 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x562fedf4cb80 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x562fedf4cfb0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x562fedf4ce90 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x562fedf4d2c0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x562fedf4d1a0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x562fedf4d5b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf4d3f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf4d470 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562fedf4d6d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562fedf4d788 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4d7e0 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4d828 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562fedf4d8d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4d930 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4d9f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562fedf4daa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4db00 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4db48 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562fedf4dbf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4dc50 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4dc98 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562fedf4dd48 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4dda0 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4dde8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562fedf4de98 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf4def0 <col:30> Inherited
|-CXXMethodDecl 0x562fedf4df18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562fedf4dfc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562fedf4e078 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562fedf4e238 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf4e128 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf4e1a0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562fedf4e388 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf4e2f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf4e538 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x562fedf4e440 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562fedf4e5f0 <col:20>
| `-OptimizeNoneAttr 0x562fedf4e648 <col:30>
|-CXXMethodDecl 0x562fedf4e768 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x562fedf4e670 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562fedf4e820 <col:20>
| `-OptimizeNoneAttr 0x562fedf4e878 <col:30>
|-CXXMethodDecl 0x562fedf4e930 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf4e8a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf4ea78 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562fedf4e9e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf4eba8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x562fedf4eca8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x562fedf4ed78 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x562fedf4ee48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x562fedf4ef88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf4eef8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf4f0d0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562fedf4f040 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf4f218 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x562fedf4f188 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562fedf4f2d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562fedf4f3d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562fedf4f340 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562fedf4f488 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562fedf4f548 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x562fedf4f648 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x562fedf4f7c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562fedf4f708 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x562fedf4ff88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562fedf4f880 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x562fedf4fee8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x562fedf4fde8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x562fedf50068 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562fedf501b8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562fedf50128 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562fedf50270 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562fedf504b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf50330 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562fedf503a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562fedf50648 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x562fedf50588 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562fedf50858 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x562fedf50710 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562fedf50788 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562fedf50918 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562fedf50b78 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x562fedf50a80 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x562fedf50c48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x562fedf50c48

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedfcb3f8 prev 0x562fede7c298 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562fedfcb4f0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562fedfcb580 <col:22, col:28> col:22 public
|-EnumDecl 0x562fedfcb5a8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562fedfcb6c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb6a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562fedfcb690 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562fedfcb670 <col:14> 'int' 999
| |-EnumConstantDecl 0x562fedfcb770 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb750 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562fedfcb738 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562fedfcb718 <col:14> 'int' 1
| |-EnumConstantDecl 0x562fedfcb800 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb7e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562fedfcb7c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x562fedfcb890 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb870 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562fedfcb850 <col:13> 'int' 1
| |-EnumConstantDecl 0x562fedfcb920 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb900 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562fedfcb8e0 <col:16> 'int' 2
| |-EnumConstantDecl 0x562fedfcb9b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcb990 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562fedfcb970 <col:13> 'int' 3
| |-EnumConstantDecl 0x562fedfcba40 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcba20 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562fedfcba00 <col:15> 'int' 4
| |-EnumConstantDecl 0x562fedfcbad0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcbab0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562fedfcba90 <col:14> 'int' 5
| |-EnumConstantDecl 0x562fedfcbb60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562fedfcbb40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562fedfcbb20 <col:12> 'int' 6
| `-EnumConstantDecl 0x562fedfcbbf0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562fedfcbbd0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562fedfcbbb0 <col:13> 'int' 7
|-VarDecl 0x562fedfcbc60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562fedfcbce8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562fedfcbd70 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x562fedfcbdf8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562fedfcbe80 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x562fedfcbf08 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562fedfcbf90 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x562fedfcc018 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562fedfcc0a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x562fedfcc128 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562fedfcc1b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562fedfcc2b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x562fedfd15a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x562fedfd1d38 <line:128:13> 'int' 0
| `-CompoundStmt 0x562fedfd1da8 <col:16, line:129:5>
|-CXXDestructorDecl 0x562fedfcc3a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x562fedfd1db8 <col:29, line:132:5>
|-CXXMethodDecl 0x562fedfcc558 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562fedfcc490 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedfcc620 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562fedfcc708 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562fedfd1e10 <col:44, line:161:5>
|   `-ReturnStmt 0x562fedfd1e00 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x562fedfd1de8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562fedfd1dc8 <col:9> 'ErrorHandler *' lvalue Var 0x562fedfd1608 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562fedfcc848 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562fedfcc7b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562fedfcc910 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562fedfd1e70 <col:43, line:173:5>
|   `-ReturnStmt 0x562fedfd1e60 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x562fedfd1e48 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562fedfd1e28 <col:9> 'ErrorHandler *' lvalue Var 0x562fedfd1680 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562fedfcc9c8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562fedfcca48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562fedfccb58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562fedfccac8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562fedfccca8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x562fedfccc18 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcce00 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562fedfccd68 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562fedfccf58 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x562fedfccec0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcd0b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x562fedfcd018 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcd2c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562fedfcd168 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562fedfcd1e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcd498 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562fedfcd380 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x562fedfcd400 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcd6b8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562fedfcd558 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562fedfcd5d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcd898 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562fedfcd778 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562fedfcd7f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcda78 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562fedfcd958 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562fedfcd9d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcdc00 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562fedfcdb38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562fedfcddd0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562fedfcdcb8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562fedfcdd30 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x562fedfd20c8 <col:57, line:234:5>
|   `-ReturnStmt 0x562fedfd20b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x562fedfd20a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562fedfd2048 <col:9, col:41> 'int'
|         |-MemberExpr 0x562fedfd2018 <col:9> '<bound member function type>' ->xmessage 0x562fedfcdc00
|         | `-CXXThisExpr 0x562fedfd2008 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x562fedfd2088 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562fedfd2070 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562fedfd1fe8 <col:18, col:40> 'String' (CXXTemporary 0x562fedfd1fe8)
|               `-CallExpr 0x562fedfd1fb0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x562fedfd1f98 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x562fedfd1f10 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562fedfcfdc8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x562fedfd1f30 <col:31> 'const String' lvalue ParmVar 0x562fedfcdd30 'str' 'const String &'
|                 `-DeclRefExpr 0x562fedfd1f50 <col:36> 'const String' lvalue ParmVar 0x562fedfcdcb8 'anno' 'const String &'
|-CXXMethodDecl 0x562fedfce0b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562fedfcde90 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562fedfcdf10 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562fedfcdf88 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562fedfd2358 <col:68, line:243:5>
|   `-ReturnStmt 0x562fedfd2348 <line:242:2, col:41>
|     `-ExprWithCleanups 0x562fedfd2330 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562fedfd22d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x562fedfd22a0 <col:9> '<bound member function type>' ->xmessage 0x562fedfcddd0
|         | `-CXXThisExpr 0x562fedfd2290 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562fedfd2168 <col:18> 'const String' lvalue ParmVar 0x562fedfcde90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562fedfd2318 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562fedfd2300 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562fedfd2270 <col:24, col:40> 'String' (CXXTemporary 0x562fedfd2270)
|               `-CXXMemberCallExpr 0x562fedfd2208 <col:24, col:40> 'String'
|                 |-MemberExpr 0x562fedfd2198 <col:24> '<bound member function type>' ->vformat 0x562fedfcf290
|                 | `-CXXThisExpr 0x562fedfd2188 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562fedfd2238 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562fedfd21c8 <col:32> 'const char *' lvalue ParmVar 0x562fedfcdf10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562fedfd2250 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562fedfd21e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562fedfcdf88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562fedfce350 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562fedfce178 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562fedfce1f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562fedfce268 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x562fedfd2698 <col:23, line:254:5>
|   `-ReturnStmt 0x562fedfd2688 <line:253:2, col:71>
|     `-ExprWithCleanups 0x562fedfd2670 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x562fedfd2610 <col:9, col:71> 'int'
|         |-MemberExpr 0x562fedfd25e0 <col:9> '<bound member function type>' ->xmessage 0x562fedfcddd0
|         | `-CXXThisExpr 0x562fedfd25d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x562fedfd2658 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x562fedfd2640 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x562fedfd2590 <col:18, col:65> 'String' (CXXTemporary 0x562fedfd2590)
|         |     `-CallExpr 0x562fedfd2528 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x562fedfd2510 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x562fedfd23f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562fedfcfdc8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x562fedfd2418 <col:31> 'const String' lvalue ParmVar 0x562fedfce1f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x562fedfd2570 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x562fedfd2558 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x562fedfd24f0 <col:37, col:64> 'String' (CXXTemporary 0x562fedfd24f0)
|         |             `-CallExpr 0x562fedfd24c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x562fedfd24a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x562fedfd2438 <col:37> 'String (const String &)' lvalue CXXMethod 0x562fedfd0418 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x562fedfd2458 <col:56> 'const String' lvalue ParmVar 0x562fedfce178 'landmark' 'const String &'
|         `-DeclRefExpr 0x562fedfd25b0 <col:68> 'const String' lvalue ParmVar 0x562fedfce268 'str' 'const String &'
|-CXXMethodDecl 0x562fedfce6d0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562fedfce418 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562fedfce490 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562fedfce510 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562fedfce588 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562fedfd2950 <col:34, line:267:5>
|   `-ReturnStmt 0x562fedfd2940 <line:266:2, col:51>
|     `-ExprWithCleanups 0x562fedfd2928 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x562fedfd28c0 <col:9, col:51> 'int'
|         |-MemberExpr 0x562fedfd2890 <col:9> '<bound member function type>' ->xmessage 0x562fedfce350
|         | `-CXXThisExpr 0x562fedfd2880 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562fedfd2738 <col:18> 'const String' lvalue ParmVar 0x562fedfce418 'landmark' 'const String &'
|         |-DeclRefExpr 0x562fedfd2758 <col:28> 'const String' lvalue ParmVar 0x562fedfce490 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562fedfd2910 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x562fedfd28f8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562fedfd2860 <col:34, col:50> 'String' (CXXTemporary 0x562fedfd2860)
|               `-CXXMemberCallExpr 0x562fedfd27f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x562fedfd2788 <col:34> '<bound member function type>' ->vformat 0x562fedfcf290
|                 | `-CXXThisExpr 0x562fedfd2778 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562fedfd2828 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562fedfd27b8 <col:42> 'const char *' lvalue ParmVar 0x562fedfce510 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562fedfd2840 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562fedfd27d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562fedfce588 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562fedfce7e0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x562fedfd29d0 <col:25, line:288:5>
|   `-ReturnStmt 0x562fedfd29c0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x562fedfd29a8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x562fedfd2978 <col:9> 'const int' lvalue ->_nerrors 0x562fedfd15a8
|         `-CXXThisExpr 0x562fedfd2968 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562fedfce9f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562fedfce898 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562fedfce918 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcecd8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562fedfceab8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562fedfceb38 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x562fedfcebb0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562fedfcee70 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x562fedfceda8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcf0b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562fedfcef30 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x562fedfcefa8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562fedfd2c30 <col:58, line:357:5>
|   `-ReturnStmt 0x562fedfd2c20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x562fedfd2c08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x562fedfd2bd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562fedfd2bc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562fedfd2ba0 <col:9, col:29> 'String' (CXXTemporary 0x562fedfd2ba0)
|             `-CallExpr 0x562fedfd2b30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x562fedfd2b18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x562fedfd2a98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x562fedfcecd8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x562fedfd2a38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x562fedfd2b68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x562fedfd2a58 <col:21> 'const char *' lvalue ParmVar 0x562fedfcef30 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x562fedfd2b80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x562fedfd2a78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562fedfcefa8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562fedfcf290 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x562fedfcf180 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x562fedfcf1f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562fedfcf3e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x562fedfcf358 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x562fedfcf530 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x562fedfcf4a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x562fedfcf7d0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x562fedfcf5e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x562fedfcf668 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x562fedfcf6e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x562fedfcf930 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x562fedfcf8a0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x562fedfd2d48 <col:37, line:441:5>
|   `-IfStmt 0x562fedfd2d30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x562fedfd2cb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x562fedfd2c88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x562fedfd2c48 <col:6> 'int' lvalue ParmVar 0x562fedfcf8a0 'level' 'int'
|     | `-ImplicitCastExpr 0x562fedfd2ca0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x562fedfd2c68 <col:15> 'ErrorHandler::Level' EnumConstant 0x562fedfcb9b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x562fedfd2d18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x562fedfd2ce8 <col:8> 'int' lvalue ->_nerrors 0x562fedfd15a8
|         `-CXXThisExpr 0x562fedfd2cd8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x562fedfcf9f8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x562fedfd2de0 <col:26, line:448:5>
|   `-BinaryOperator 0x562fedfd2dc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x562fedfd2d70 <col:2> 'int' lvalue ->_nerrors 0x562fedfd15a8
|     | `-CXXThisExpr 0x562fedfd2d60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x562fedfd2da0 <col:13> 'int' 0
|-CXXMethodDecl 0x562fedfcfbc0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x562fedfcfab0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x562fedfcfb28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x562fedfcfdc8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x562fedfcfc80 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x562fedfcfcf8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x562fedfd0078 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x562fedfcfe88 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x562fedfcff08 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x562fedfcff88 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x562fedfd0130 <col:59> 0 0
|-CXXMethodDecl 0x562fedfd02c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x562fedfd01a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x562fedfd0228 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x562fedfd3450 <col:70, line:534:5>
|   |-DeclStmt 0x562fedfd2f50 <line:528:2, col:20>
|   | |-VarDecl 0x562fedfd2e08 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x562fedfd2e70 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x562fedfd2ea8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x562fedfd2f10 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x562fedfd3020 <line:529:2, col:23>
|   | `-VarDecl 0x562fedfd2f80 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x562fedfd3008 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x562fedfd2fe8 <col:18> 'const char *' lvalue ParmVar 0x562fedfd01a8 'begin' 'const char *'
|   |-DoStmt 0x562fedfd33e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x562fedfd3318 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x562fedfd3300 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x562fedfd32e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x562fedfd3038 <col:6> 'const char *' lvalue Var 0x562fedfd2f80 'x' 'const char *'
|   | |     `-CallExpr 0x562fedfd3230 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x562fedfd3218 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x562fedfd31d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x562fedfd1a80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x562fedfd3298 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x562fedfd3280 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x562fedfd30f0 <col:20, col:27> 'String' (CXXTemporary 0x562fedfd30f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x562fedfd30b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x562fedfd32b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562fedfd3110 <col:30> 'const char *' lvalue Var 0x562fedfd2f80 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x562fedfd32c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562fedfd3130 <col:33> 'const char *' lvalue ParmVar 0x562fedfd0228 'end' 'const char *'
|   | |       |-UnaryOperator 0x562fedfd3170 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562fedfd3150 <col:39> 'String' lvalue Var 0x562fedfd2e08 'name' 'String'
|   | |       |-UnaryOperator 0x562fedfd31a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562fedfd3188 <col:46> 'String' lvalue Var 0x562fedfd2ea8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x562fedfd31c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x562fedfd33d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x562fedfd33b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x562fedfd3398 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x562fedfd3368 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|   |         `-ImplicitCastExpr 0x562fedfd3350 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x562fedfd3330 <col:11> 'String' lvalue Var 0x562fedfd2e08 'name' 'String'
|   `-ReturnStmt 0x562fedfd3440 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x562fedfd3428 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x562fedfd3408 <col:9> 'const char *' lvalue Var 0x562fedfd2f80 'x' 'const char *'
|-CXXMethodDecl 0x562fedfd0418 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x562fedfd0388 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x562fedfd3a58 <col:55, line:550:5>
|   `-IfStmt 0x562fedfd3a30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x562fedfd3690 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x562fedfd3678 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562fedfd3660 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562fedfd3640 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562fedfd3610 <col:6> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|     | |       `-DeclRefExpr 0x562fedfd34b0 <col:6> 'const String' lvalue ParmVar 0x562fedfd0388 'x' 'const String &'
|     | `-BinaryOperator 0x562fedfd35f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x562fedfd35c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x562fedfd3570 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x562fedfd3558 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562fedfd3510 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x562fedce4280 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x562fedfd34d0 <col:11> 'const String' lvalue ParmVar 0x562fedfd0388 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x562fedfd34f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x562fedfd35d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x562fedfd35a8 <col:19> 'char' 123
|     |-ReturnStmt 0x562fedfd3700 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x562fedfd36d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x562fedfd36b0 <col:13> 'const String' lvalue ParmVar 0x562fedfd0388 'x' 'const String &'
|     `-IfStmt 0x562fedfd3a08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x562fedfd3798 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562fedfd3780 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562fedfd3760 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562fedfd3730 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |       `-DeclRefExpr 0x562fedfd3710 <col:11> 'const String' lvalue ParmVar 0x562fedfd0388 'x' 'const String &'
|       |-ReturnStmt 0x562fedfd3920 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x562fedfd3908 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x562fedfd38d8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x562fedfd38c0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x562fedfd38a0 <col:13, col:29> 'String' (CXXTemporary 0x562fedfd38a0)
|       |         `-CallExpr 0x562fedfd3850 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x562fedfd3838 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x562fedfd37b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x562fedfcfbc0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x562fedfd3880 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x562fedfd37d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x562fedfd37f0 <col:28> 'const String' lvalue ParmVar 0x562fedfd0388 'x' 'const String &'
|       `-ReturnStmt 0x562fedfd39f8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x562fedfd39e0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x562fedfd39b0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x562fedfd3998 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x562fedfd3978 <col:13, col:20> 'String' (CXXTemporary 0x562fedfd3978)
|                 `-CXXTemporaryObjectExpr 0x562fedfd3940 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x562fedfd05e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x562fedfd04d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x562fedfd0548 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562fedfd1d28 <col:71> 'bool' false
|-CXXRecordDecl 0x562fedfd0690 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x562fedfd0988 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x562fedfd0920 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x562fedfd08c0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x562fedfd0880 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x562fedcc72e0 'String'
|       | `-CXXRecord 0x562fedcc7250 'String'
|       |-BuiltinType 0x562fed99a580 'int'
|       `-DecayedType 0x562fede7d2e0 '__va_list_tag *' sugar
|         |-TypedefType 0x562fede7d2b0 'va_list' sugar
|         | |-Typedef 0x562fedbb8390 'va_list'
|         | `-TypedefType 0x562fedbb8340 '__gnuc_va_list' sugar
|         |   |-Typedef 0x562fedaefb28 '__gnuc_va_list'
|         |   `-TypedefType 0x562fedaefa90 '__builtin_va_list' sugar
|         |     |-Typedef 0x562fed9dbd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x562fed9dbce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x562fed99b2d0 '__va_list_tag'
|         |         `-CXXRecord 0x562fed99b238 '__va_list_tag'
|         `-PointerType 0x562fedbbdc30 '__va_list_tag *'
|           `-RecordType 0x562fed99b2d0 '__va_list_tag'
|             `-CXXRecord 0x562fed99b238 '__va_list_tag'
|-EnumDecl 0x562fedfd09e0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x562fedfd0ae0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd1040 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0ac0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x562fedfd0aa0 <col:16> 'int' 1
| |-EnumConstantDecl 0x562fedfd0b70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd1058 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0b50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x562fedfd0b30 <col:21> 'int' 2
| |-EnumConstantDecl 0x562fedfd0c00 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd1070 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0be0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x562fedfd0bc0 <col:22> 'int' 4
| |-EnumConstantDecl 0x562fedfd0c90 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd1088 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0c70 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x562fedfd0c50 <col:17> 'int' 8
| |-EnumConstantDecl 0x562fedfd0d20 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd10a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0d00 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x562fedfd0ce0 <col:22> 'int' 16
| |-EnumConstantDecl 0x562fedfd0db0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd10b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0d90 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562fedfd0d70 <col:19> 'int' 32
| |-EnumConstantDecl 0x562fedfd0e40 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd10e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0e20 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x562fedfd0e00 <col:17> 'int' 64
| |-EnumConstantDecl 0x562fedfd0ed0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd10f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0eb0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x562fedfd0e90 <col:14> 'int' 128
| |-EnumConstantDecl 0x562fedfd0f60 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562fedfd1110 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfd0f40 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x562fedfd0f20 <col:16> 'int' 256
| `-EnumConstantDecl 0x562fedfd0ff0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x562fedfd1128 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedfd0fd0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x562fedfd0fb0 <col:12> 'int' 1024
|-CXXMethodDecl 0x562fedfd1338 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x562fedfd1150 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x562fedfd11f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x562fedfd14c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x562fedfd13f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x562fedfd1568 <line:580:3, col:10> col:3 private
|-FieldDecl 0x562fedfd15a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x562fedfd1608 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x562fedfd1680 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x562fedfd1a80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x562fedfd16f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x562fedfd1778 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x562fedfd17f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x562fedfd1870 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x562fedfd18e8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x562fedfd1960 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x562fedfd1ba8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x562fedfd1ba8
| `-ParmVarDecl 0x562fedfd1cb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x562fedfd3db8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x562fedfd3db8
  `-ParmVarDecl 0x562fedfd3ec8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fede7c328 prev 0x562fedec1528 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562fede7c420 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x562fede7c4b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x562fede7c5e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x562fede7c4e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562fede7da10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562fede7d9f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562fede7d588 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562fede7daa0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562fede7da60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x562fede7c4e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562fede7d5f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562fede7db20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562fede7dae0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562fede7d650 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562fede7db60 <col:54> 'bool' false
| `-CompoundStmt 0x562fede7dc68 <col:61, line:38:5>
|   `-BinaryOperator 0x562fede7dc48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x562fede7dbe0 <col:9> 'const Element *' lvalue ->_context 0x562fede7d528
|     | `-CXXThisExpr 0x562fede7dbd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x562fede7dc30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x562fede7dc10 <col:20> 'int' 0
|-CXXConstructorDecl 0x562fede7c7f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562fede7c6a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x562fede7c720 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562fede7da48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562fede7da28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x562fede7d528 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x562fede7dcc0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x562fede7dc80 <col:20> 'const Element *' lvalue ParmVar 0x562fede7c6a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x562fede7d588 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562fede7dd40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562fede7dd00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x562fede7c720 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562fede7d5f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562fede7ddc0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562fede7dd80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x562fede7d650 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562fede7de00 <col:73> 'bool' false
| `-CompoundStmt 0x562fede7de78 <col:80, line:46:5>
|-CXXMethodDecl 0x562fede7c928 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x562fede7def0 <col:36, line:51:5>
|   `-ReturnStmt 0x562fede7dee0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x562fede7dec8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x562fede7de98 <col:16> 'const Element *const' lvalue ->_context 0x562fede7d528
|         `-CXXThisExpr 0x562fede7de88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562fede7ca18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x562fede7df70 <col:32, line:57:5>
|   `-ReturnStmt 0x562fede7df60 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x562fede7df48 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x562fede7df18 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x562fede7d588
|         `-CXXThisExpr 0x562fede7df08 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562fede7cad8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x562fede7cc60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x562fede7cb90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562fede7cdb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x562fede7cd20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562fede7cf00 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x562fede7ce70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562fede7d108 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x562fede7cfb8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x562fede7d030 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x562fede7d438 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x562fede7d1c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x562fede7d248 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x562fede7d310 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x562fede7d4f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x562fede7d528 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x562fede7d588 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x562fede7d5f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x562fede7d650 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x562fede7d6a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x562fede7d6a0
| `-ParmVarDecl 0x562fede7d7b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x562fede7d858 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x562fede7d858
| `-ParmVarDecl 0x562fede7d968 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x562fedfde948 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562fedf89c90 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x562fedf89e68 prev 0x562fedf89c90 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562fedf89ef8 <col:46, col:52> col:46 public
|-TypedefDecl 0x562fedf89f20 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf8baf0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x562fedf8baa0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x562fedf8a3d0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x562fedf8a2d0 'type'
|     `-TemplateSpecializationType 0x562fedf8a260 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x562fedf8a140 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x562fedf8a120 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x562fedf8a100 <col:24> 'unsigned long' 4
|       `-RecordType 0x562fedf8a240 'char_array<4>'
|         `-ClassTemplateSpecialization 0x562fedf8a160 'char_array'
|-TypedefDecl 0x562fedf8bba8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x562fedf8bb70 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x562fedf8bb50 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x562fedf8baf0 'type'
|     `-ElaboratedType 0x562fedf8baa0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x562fedf8a3d0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x562fedf8a2d0 'type'
|         `-TemplateSpecializationType 0x562fedf8a260 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x562fedf8a140 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x562fedf8a120 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x562fedf8a100 <col:24> 'unsigned long' 4
|           `-RecordType 0x562fedf8a240 'char_array<4>'
|             `-ClassTemplateSpecialization 0x562fedf8a160 'char_array'
|-CXXMethodDecl 0x562fedf8bd28 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x562fedf8bc38 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x562fedf8be18 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562fedf8bef8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x562fedf8c1c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562fedf8c0d0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x562fedf8c408 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562fedf8c280 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf8c2f8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8c5d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562fedf8c4c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf8c540 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8c738 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562fedf8c808 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562fedf8ca58 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562fedf8c8c8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562fedf8c940 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8ccb8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x562fedf8cb28 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562fedf8cba0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8ce78 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562fedf8cd88 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8d038 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562fedf8cf40 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf8d0f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562fedf8d1a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562fedf8d3d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562fedf8d250 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562fedf8d2c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562fedf93a88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562fedf8d580 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x562fedf93b50 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x562fedf93ba0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562fedf93bf0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562fedf88698 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x562fedf888a8 prev 0x562fedf88698 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562fedf89c00 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x562fedf89bb0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x562fedf89b90 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x562fedf89a40 'type'
|     `-SubstTemplateTypeParmType 0x562fedf89860 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x562fedc60120 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc600c8 'T'
|       `-RecordType 0x562fedf893b0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x562fedf892c8 'sized_array_memory'
|-FieldDecl 0x562fedf93c40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x562fedf93c90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562fedf93cc8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|   |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562fedc97db8 'T'
|   `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf93d58 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x562fedf93d20 'int &'
|   `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf93e18 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x562fedf93de0 'const int &'
|   `-QualType 0x562fedf88941 'const int' const
|     `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf93ea8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x562fedf93e70 'int *'
|   `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf93f38 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x562fedf93f00 'const int *'
|   `-QualType 0x562fedf88941 'const int' const
|     `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf94b20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x562fedf94ad0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x562fedf94ab0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x562fedf94a40 'type'
|     `-SubstTemplateTypeParmType 0x562fedf94800 'int' sugar
|       |-TemplateTypeParmType 0x562fedc6af20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc6aed0 'T'
|       `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf94b88 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x562fedf93de0 'const int &'
|   `-QualType 0x562fedf88941 'const int' const
|     `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf94be0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf94c48 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x562fedf93e70 'int *'
|   `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|     |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562fedc97db8 'T'
|     `-BuiltinType 0x562fed99a580 'int'
|-TypedefDecl 0x562fedf94cb0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x562fedf93f00 'const int *'
|   `-QualType 0x562fedf88941 'const int' const
|     `-SubstTemplateTypeParmType 0x562fedf88940 'int' sugar
|       |-TemplateTypeParmType 0x562fedc97e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562fedc97db8 'T'
|       `-BuiltinType 0x562fed99a580 'int'
|-EnumDecl 0x562fedf94d08 <line:134:5> col:5
| `-EnumConstantDecl 0x562fedf94e00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562fedf94de0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562fedc99498 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562fedc99470 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562fedc99450 <col:40> 'int' 1
|-CXXConstructorDecl 0x562fedf94e88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562fedf950d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf94f40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf94fe0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x562fedf95398 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x562fedf95280 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x562fedf95658 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x562fedf95540 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x562fedf959a0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x562fedf95880 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x562fedf95cb0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x562fedf95b90 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x562fedf95fa0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf95de8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf95e60 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562fedf960c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562fedf961a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf96200 <col:30> Inherited
|-CXXMethodDecl 0x562fedf96248 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562fedf962f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf96350 <col:30> Inherited
|-CXXMethodDecl 0x562fedf96418 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562fedf964c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf96520 <col:30> Inherited
|-CXXMethodDecl 0x562fedf96568 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562fedf96618 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf96670 <col:30> Inherited
|-CXXMethodDecl 0x562fedf966b8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562fedf96768 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf967c0 <col:30> Inherited
|-CXXMethodDecl 0x562fedf96808 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562fedf968b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562fedf96910 <col:30> Inherited
|-CXXMethodDecl 0x562fedf96938 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562fedf969e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562fedf96a98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562fedf96c58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf96b48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562fedf96bc0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562fedf96da8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf96d18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf96f58 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x562fedf96e60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562fedf97010 <col:20>
| `-OptimizeNoneAttr 0x562fedf97068 <col:30>
|-CXXMethodDecl 0x562fedf97188 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x562fedf97090 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562fedf97240 <col:20>
| `-OptimizeNoneAttr 0x562fedf97298 <col:30>
|-CXXMethodDecl 0x562fedf97350 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf972c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf97498 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562fedf97408 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf975c8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x562fedf976f8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x562fedf977c8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x562fedf97898 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x562fedf979d8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562fedf97948 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf97b20 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562fedf97a90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562fedf97c68 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x562fedf97bd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562fedf97d20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562fedf97e20 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562fedf97d90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562fedf97ed8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562fedf97f98 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x562fedf98098 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x562fedf98218 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562fedf98158 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x562fedf989d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562fedf982d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x562fedf98938 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x562fedf98838 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x562fedf98ab8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562fedf98c08 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562fedf98b78 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562fedf98cc0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562fedf98f08 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562fedf98d80 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562fedf98df8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562fedf990c8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x562fedf98fd8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562fedf99318 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x562fedf99190 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562fedf99208 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562fedf993d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562fedf99638 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x562fedf99540 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x562fedf99708 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedf86808 prev 0x562fede82e88 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562fedf86900 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x562fedf869f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x562fedfab440 <col:16, line:828:9>
|-CXXDestructorDecl 0x562fedf86ae0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x562fedfab450 <col:25, line:830:9>
|-CXXMethodDecl 0x562fedf86be0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x562fedf86c90 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x562fedf86d38 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562fedf86d38
| `-ParmVarDecl 0x562fedf86e48 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x562fedf87608 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562fedf87608
  `-ParmVarDecl 0x562fedf87718 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fede82c98 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x562fede82df8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x562fede82e88 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x562fede82f40 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x562fedf6c5e8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x562fede82f78 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562fedf9acc8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562fedf9aca8 <col:31> 'int' 0
|-CXXConstructorDecl 0x562fedf6c908 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf6c780 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x562fedf6c7f8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562fedf9ad00 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562fedf9ace0 <col:59> 'int' 0
|-CXXConstructorDecl 0x562fedf6cae0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf6c9d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x562fedf6ca48 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562fedf9ad38 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562fedf9ad18 <col:55> 'int' 0
|-CXXConstructorDecl 0x562fedf6ce98 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562fedf6cc80 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x562fedf6ccf8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x562fedf6cd70 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562fedf9ad70 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562fedf9ad50 <col:31> 'int' 0
|-CXXConstructorDecl 0x562fedf6d058 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x562fedf6cf98 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x562fedf6d150 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x562fedf6d338 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x562fedf6d240 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x562fedf6d428 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x562fedf9b120 <col:24, line:291:5>
|   `-ReturnStmt 0x562fedf9b110 <line:290:9, col:79>
|     `-BinaryOperator 0x562fedf9b0f0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x562fedf9afc8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x562fedf9af20 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x562fedf9af00 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x562fedf9adf8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x562fedf9ade0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x562fedf9adc8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x562fedf9ad98 <col:18> 'Vector<String> *const' lvalue ->_conf 0x562fedf88630
|       | |   |       `-CXXThisExpr 0x562fedf9ad88 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x562fedf9aee8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x562fedf9aed0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x562fedf9ae98 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x562fedf9ae68 <col:28, col:35> '<bound member function type>' ->size 0x562fedf4df18
|       | |           `-ImplicitCastExpr 0x562fedf9aeb8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x562fedf9ae50 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x562fedf9ae20 <col:28> 'Vector<String> *const' lvalue ->_conf 0x562fedf88630
|       | |                 `-CXXThisExpr 0x562fedf9ae10 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x562fedf9afb0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x562fedf9af98 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x562fedf9af80 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x562fedf9af50 <col:47> 'Args::Slot *const' lvalue ->_slots 0x562fedf99850
|       |         `-CXXThisExpr 0x562fedf9af40 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x562fedf9b0d0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x562fedf9b0b8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562fedf9b0a0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562fedf9b060 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562fedf9b048 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562fedf9aff8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562fedf99900
|         |     |   `-CXXThisExpr 0x562fedf9afe8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562fedf9b028 <col:73> 'int' 0
|         `-IntegerLiteral 0x562fedf9b080 <col:79> 'int' 0
|-CXXMethodDecl 0x562fedf6d4e8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x562fedf9b2f8 <col:32, line:296:5>
|   `-ReturnStmt 0x562fedf9b2e8 <line:295:9, col:49>
|     `-BinaryOperator 0x562fedf9b2c8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x562fedf9b1a8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x562fedf9b190 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x562fedf9b178 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x562fedf9b148 <col:17> 'Args::Slot *const' lvalue ->_slots 0x562fedf99850
|       |       `-CXXThisExpr 0x562fedf9b138 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x562fedf9b2a8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x562fedf9b290 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562fedf9b278 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562fedf9b238 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562fedf9b220 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562fedf9b1d0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562fedf99900
|         |     |   `-CXXThisExpr 0x562fedf9b1c0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562fedf9b200 <col:43> 'int' 0
|         `-IntegerLiteral 0x562fedf9b258 <col:49> 'int' 0
|-CXXMethodDecl 0x562fedf6d5d8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x562fedf9b508 <col:19, line:306:5>
|   |-IfStmt 0x562fedf9b428 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x562fedf9b368 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x562fedf9b350 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x562fedf9b320 <col:13> 'Vector<String> *' lvalue ->_conf 0x562fedf88630
|   | |     `-CXXThisExpr 0x562fedf9b310 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x562fedf9b408 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x562fedf9b3d8 <col:13, col:20> '<bound member function type>' ->clear 0x562fedf50918
|   |     `-ImplicitCastExpr 0x562fedf9b3c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x562fedf9b390 <col:13> 'Vector<String> *' lvalue ->_conf 0x562fedf88630
|   |         `-CXXThisExpr 0x562fedf9b380 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x562fedf9b4b0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x562fedf9b480 <col:9, col:16> '<bound member function type>' .clear 0x562fedf993d8
|   |   `-MemberExpr 0x562fedf9b450 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x562fedf997f0
|   |     `-CXXThisExpr 0x562fedf9b440 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x562fedf9b4f8 <line:305:9, col:17>
|     `-UnaryOperator 0x562fedf9b4e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedf9b4d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x562fedf6d858 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x562fedf6d760 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x562fedf6d9d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x562fedf6d910 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x562fedf6dd58 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x562fedf6da80 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x562fedf6dcb8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x562fedf6db28 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x562fedf6dba0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x562fedf9b828 <col:67, line:327:5>
|     |-WhileStmt 0x562fedf9b7d8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x562fedf9b5f0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x562fedf9b570 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562fedeb99f8 0x562fedd02fd8 0x562fedd02cb0 0x562fedcf4490 0x562fedcf4140 0x562fedcf3a30 0x562fedcc63a0 0x562fedc52860
|     | | |-DeclRefExpr 0x562fedf9b530 <col:16> 'Iter' lvalue ParmVar 0x562fedf6db28 'begin' 'Iter'
|     | | `-DeclRefExpr 0x562fedf9b550 <col:25> 'Iter' lvalue ParmVar 0x562fedf6dba0 'end' 'Iter'
|     | `-CompoundStmt 0x562fedf9b7b8 <col:30, line:325:9>
|     |   |-CallExpr 0x562fedf9b758 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x562fedf9b638 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x562fedf9b728 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x562fedf9b6b8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|     |   |   `-DeclRefExpr 0x562fedf9b698 <col:24> 'Iter' lvalue ParmVar 0x562fedf6db28 'begin' 'Iter'
|     |   `-UnaryOperator 0x562fedf9b7a0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x562fedf9b780 <col:15> 'Iter' lvalue ParmVar 0x562fedf6db28 'begin' 'Iter'
|     `-ReturnStmt 0x562fedf9b818 <line:326:9, col:17>
|       `-UnaryOperator 0x562fedf9b800 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9b7f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x562fedf6de60 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x562fedf6ddd0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x562fedf6dfa8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x562fedf6df18 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x562fedf6e070 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x562fedf9b908 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x562fedf9b8a8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x562fedf9b858 <col:9> '<bound member function type>' ->reset_from 0x562fedf99c78
|   | | `-CXXThisExpr 0x562fedf9b848 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x562fedf9b888 <col:20> 'int' 0
|   `-ReturnStmt 0x562fedf9b8f8 <line:352:9, col:17>
|     `-UnaryOperator 0x562fedf9b8e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedf9b8d0 <col:17> 'Args *' this
|-VarDecl 0x562fedf6e128 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x562fedf6e190 <col:38> 'int' 1
|-VarDecl 0x562fedf6e220 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x562fedf6e288 <col:39> 'int' 2
|-VarDecl 0x562fedf6e318 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x562fedf6e380 <col:39> 'int' 4
|-VarDecl 0x562fedf6e410 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x562fedf6e478 <col:39> 'int' 8
|-FunctionTemplateDecl 0x562fedf6e7f8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x562fedf6e4f0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf6e758 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562fedf6e5a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6e648 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9d2f0 <col:43, line:371:5>
|     `-ReturnStmt 0x562fedf9ba50 <line:370:9, col:34>
|       `-CallExpr 0x562fedf9ba18 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9b938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9b9b8 <col:21> 'const char *' lvalue ParmVar 0x562fedf6e5a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9b9d8 <col:30> 'int' 0
|         `-DeclRefExpr 0x562fedf9b9f8 <col:33> 'T' lvalue ParmVar 0x562fedf6e648 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf6eb28 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x562fedf6e860 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf6ea88 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562fedf6e910 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6e9b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9d440 <col:45, line:375:5>
|     `-ReturnStmt 0x562fedf9d430 <line:374:9, col:42>
|       `-CallExpr 0x562fedf9d3f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9d318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9d398 <col:21> 'const char *' lvalue ParmVar 0x562fedf6e910 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9d3b8 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int'
|         `-DeclRefExpr 0x562fedf9d3d8 <col:41> 'T' lvalue ParmVar 0x562fedf6e9b8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf6ee58 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x562fedf6eb90 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf6edb8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562fedf6ec40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6ece8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9d590 <col:45, line:379:5>
|     `-ReturnStmt 0x562fedf9d580 <line:378:9, col:43>
|       `-CallExpr 0x562fedf9d548 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9d468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9d4e8 <col:21> 'const char *' lvalue ParmVar 0x562fedf6ec40 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9d508 <col:30> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         `-DeclRefExpr 0x562fedf9d528 <col:42> 'T' lvalue ParmVar 0x562fedf6ece8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf6f188 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x562fedf6eec0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x562fedf6f0e8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x562fedf6ef70 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562fedf6f018 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x562fedf9d790 <col:46, line:383:5>
| |   `-ReturnStmt 0x562fedf9d780 <line:382:9, col:55>
| |     `-CallExpr 0x562fedf9d748 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562fedf9d5b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562fedf9d638 <col:21> 'const char *' lvalue ParmVar 0x562fedf6ef70 'keyword' 'const char *'
| |       |-BinaryOperator 0x562fedf9d708 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x562fedf9d6b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x562fedf9d698 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x562fedf9d6f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x562fedf9d6d0 <col:42> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x562fedf9d728 <col:54> 'T' lvalue ParmVar 0x562fedf6f018 'x' 'T &'
| `-CXXMethodDecl 0x562fedfdedd8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x562fedfdebf8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x562fedfdecc8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x562fedf6f588 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x562fedf6f1f0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf6f4e8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x562fedf6f2a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6f320 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf6f3c8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9d8d0 <col:54, line:388:5>
|     |-CallExpr 0x562fedf9d858 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9d7a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562fedf9d7e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9d7f8 <col:30> 'const char *' lvalue ParmVar 0x562fedf6f2a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9d818 <col:39> 'int' lvalue ParmVar 0x562fedf6f320 'flags' 'int'
|     | `-DeclRefExpr 0x562fedf9d838 <col:46> 'T' lvalue ParmVar 0x562fedf6f3c8 'x' 'T &'
|     `-ReturnStmt 0x562fedf9d8c0 <line:387:9, col:17>
|       `-UnaryOperator 0x562fedf9d8a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9d898 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf6fa38 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x562fedf6f5f8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf6f678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562fedf6f998 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562fedf6f738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6f7d8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf6f878 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9da40 <col:74, line:403:5>
|     `-ReturnStmt 0x562fedf9da30 <line:402:9, col:56>
|       `-CallExpr 0x562fedf9d9f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9d900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9d970 <col:28> 'const char *' lvalue ParmVar 0x562fedf6f738 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9d990 <col:37> 'int' 0
|         |-DeclRefExpr 0x562fedf9d9b0 <col:40> 'T' lvalue ParmVar 0x562fedf6f7d8 'x' 'T &'
|         `-DeclRefExpr 0x562fedf9d9d0 <col:43> 'const V' lvalue ParmVar 0x562fedf6f878 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562fedf6fea8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562fedf6faa8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf6fb28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562fedf6fe08 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562fedf6fbe8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf6fc88 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf6fd28 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9dba8 <col:76, line:407:5>
|     `-ReturnStmt 0x562fedf9db98 <line:406:9, col:65>
|       `-CallExpr 0x562fedf9db58 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9da68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9dad8 <col:28> 'const char *' lvalue ParmVar 0x562fedf6fbe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9daf8 <col:37> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         |-DeclRefExpr 0x562fedf9db18 <col:49> 'T' lvalue ParmVar 0x562fedf6fc88 'x' 'T &'
|         `-DeclRefExpr 0x562fedf9db38 <col:52> 'const V' lvalue ParmVar 0x562fedf6fd28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562fedf703f8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x562fedf6ff18 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf6ff98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562fedf70358 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562fedf70058 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf700d8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf70178 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf70218 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9dd10 <col:85, line:412:5>
|     |-CallExpr 0x562fedf9dc90 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9dbc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562fedf9dc00 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9dc10 <col:37> 'const char *' lvalue ParmVar 0x562fedf70058 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9dc30 <col:46> 'int' lvalue ParmVar 0x562fedf700d8 'flags' 'int'
|     | |-DeclRefExpr 0x562fedf9dc50 <col:53> 'T' lvalue ParmVar 0x562fedf70178 'x' 'T &'
|     | `-DeclRefExpr 0x562fedf9dc70 <col:56> 'const V' lvalue ParmVar 0x562fedf70218 'default_value' 'const V &'
|     `-ReturnStmt 0x562fedf9dd00 <line:411:9, col:17>
|       `-UnaryOperator 0x562fedf9dce8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9dcd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf70888 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x562fedf70470 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf704e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf707e8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf705a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf70620 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf706c8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9de90 <col:53, line:425:5>
|     `-ReturnStmt 0x562fedf9de80 <line:424:9, col:42>
|       `-CallExpr 0x562fedf9de40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9dd40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9ddc0 <col:21> 'const char *' lvalue ParmVar 0x562fedf705a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9dde0 <col:30> 'int' 0
|         |-DeclRefExpr 0x562fedf9de00 <col:33> 'P' lvalue ParmVar 0x562fedf70620 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9de20 <col:41> 'T' lvalue ParmVar 0x562fedf706c8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf70cd8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x562fedf708f8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf70978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf70c38 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf70a38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf70ab0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf70b58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9e008 <col:55, line:429:5>
|     `-ReturnStmt 0x562fedf9dff8 <line:428:9, col:50>
|       `-CallExpr 0x562fedf9dfb8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9deb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9df38 <col:21> 'const char *' lvalue ParmVar 0x562fedf70a38 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9df58 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int'
|         |-DeclRefExpr 0x562fedf9df78 <col:41> 'P' lvalue ParmVar 0x562fedf70ab0 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9df98 <col:49> 'T' lvalue ParmVar 0x562fedf70b58 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf71128 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x562fedf70d48 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf70dc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf71088 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf70e88 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf70f00 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf70fa8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9e180 <col:55, line:433:5>
|     `-ReturnStmt 0x562fedf9e170 <line:432:9, col:51>
|       `-CallExpr 0x562fedf9e130 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9e030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9e0b0 <col:21> 'const char *' lvalue ParmVar 0x562fedf70e88 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9e0d0 <col:30> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         |-DeclRefExpr 0x562fedf9e0f0 <col:42> 'P' lvalue ParmVar 0x562fedf70f00 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9e110 <col:50> 'T' lvalue ParmVar 0x562fedf70fa8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf71578 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x562fedf71198 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf71218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf714d8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf712d8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf71350 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf713f8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9e3a8 <col:56, line:437:5>
|     `-ReturnStmt 0x562fedf9e398 <line:436:9, col:63>
|       `-CallExpr 0x562fedf9e358 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9e1a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9e228 <col:21> 'const char *' lvalue ParmVar 0x562fedf712d8 'keyword' 'const char *'
|         |-BinaryOperator 0x562fedf9e2f8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562fedf9e2a8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562fedf9e288 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562fedf9e2e0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562fedf9e2c0 <col:42> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562fedf9e318 <col:54> 'P' lvalue ParmVar 0x562fedf71350 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9e338 <col:62> 'T' lvalue ParmVar 0x562fedf713f8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf71aa8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x562fedf715e8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf71668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf71a08 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562fedf71728 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf717a8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf71820 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf718c8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9e510 <col:64, line:442:5>
|     |-CallExpr 0x562fedf9e490 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9e3c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562fedf9e400 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9e410 <col:30> 'const char *' lvalue ParmVar 0x562fedf71728 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9e430 <col:39> 'int' lvalue ParmVar 0x562fedf717a8 'flags' 'int'
|     | |-DeclRefExpr 0x562fedf9e450 <col:46> 'P' lvalue ParmVar 0x562fedf71820 'parser' 'P'
|     | `-DeclRefExpr 0x562fedf9e470 <col:54> 'T' lvalue ParmVar 0x562fedf718c8 'x' 'T &'
|     `-ReturnStmt 0x562fedf9e500 <line:441:9, col:17>
|       `-UnaryOperator 0x562fedf9e4e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9e4d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf720a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x562fedf71b20 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf71b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562fedf71c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562fedf72008 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562fedf71ce0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf71d58 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf71df8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf71ec8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9e6a8 <col:84, line:458:5>
|     `-ReturnStmt 0x562fedf9e698 <line:457:9, col:64>
|       `-CallExpr 0x562fedf9e650 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9e540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9e5b0 <col:28> 'const char *' lvalue ParmVar 0x562fedf71ce0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9e5d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x562fedf9e5f0 <col:40> 'P' lvalue ParmVar 0x562fedf71d58 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9e610 <col:48> 'T' lvalue ParmVar 0x562fedf71df8 'x' 'T &'
|         `-DeclRefExpr 0x562fedf9e630 <col:51> 'const V' lvalue ParmVar 0x562fedf71ec8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562fedf72628 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562fedf72120 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf72198 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562fedf72218 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562fedf72588 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562fedf722e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf72358 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf723f8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf72498 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9e838 <col:86, line:462:5>
|     `-ReturnStmt 0x562fedf9e828 <line:461:9, col:73>
|       `-CallExpr 0x562fedf9e7e0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9e6d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9e740 <col:28> 'const char *' lvalue ParmVar 0x562fedf722e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9e760 <col:37> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         |-DeclRefExpr 0x562fedf9e780 <col:49> 'P' lvalue ParmVar 0x562fedf72358 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9e7a0 <col:57> 'T' lvalue ParmVar 0x562fedf723f8 'x' 'T &'
|         `-DeclRefExpr 0x562fedf9e7c0 <col:60> 'const V' lvalue ParmVar 0x562fedf72498 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562fedf72c88 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x562fedf726a0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf72718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562fedf72798 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562fedf72be8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562fedf72860 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf728e0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf72958 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf729f8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf72a98 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x562fedf9e9c8 <col:95, line:467:5>
|     |-CallExpr 0x562fedf9e940 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9e850 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562fedf9e890 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9e8a0 <col:37> 'const char *' lvalue ParmVar 0x562fedf72860 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9e8c0 <col:46> 'int' lvalue ParmVar 0x562fedf728e0 'flags' 'int'
|     | |-DeclRefExpr 0x562fedf9e8e0 <col:53> 'P' lvalue ParmVar 0x562fedf72958 'parser' 'P'
|     | |-DeclRefExpr 0x562fedf9e900 <col:61> 'T' lvalue ParmVar 0x562fedf729f8 'x' 'T &'
|     | `-DeclRefExpr 0x562fedf9e920 <col:64> 'const V' lvalue ParmVar 0x562fedf72a98 'default_value' 'const V &'
|     `-ReturnStmt 0x562fedf9e9b8 <line:466:9, col:17>
|       `-UnaryOperator 0x562fedf9e9a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9e990 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf73268 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x562fedf72d08 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf72d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf72e08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf731c8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf72ed0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf72f48 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf72fe8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562fedf73088 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x562fedf9eb70 <col:63, line:481:5>
|     `-ReturnStmt 0x562fedf9eb60 <line:480:9, col:47>
|       `-CallExpr 0x562fedf9eb18 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9e9f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9ea78 <col:21> 'const char *' lvalue ParmVar 0x562fedf72ed0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9ea98 <col:30> 'int' 0
|         |-DeclRefExpr 0x562fedf9eab8 <col:33> 'P' lvalue ParmVar 0x562fedf72f48 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9ead8 <col:41> 'T1' lvalue ParmVar 0x562fedf72fe8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562fedf9eaf8 <col:45> 'T2' lvalue ParmVar 0x562fedf73088 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562fedf737e8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x562fedf732e0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf73358 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf733d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf73748 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf734a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf73518 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf735b8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562fedf73658 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562fedf9ed10 <col:65, line:485:5>
|     `-ReturnStmt 0x562fedf9ed00 <line:484:9, col:55>
|       `-CallExpr 0x562fedf9ecb8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9eb98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9ec18 <col:21> 'const char *' lvalue ParmVar 0x562fedf734a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9ec38 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int'
|         |-DeclRefExpr 0x562fedf9ec58 <col:41> 'P' lvalue ParmVar 0x562fedf73518 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9ec78 <col:49> 'T1' lvalue ParmVar 0x562fedf735b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562fedf9ec98 <col:53> 'T2' lvalue ParmVar 0x562fedf73658 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562fedf73d68 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x562fedf73860 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf738d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf73958 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf73cc8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf73a20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf73a98 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf73b38 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562fedf73bd8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562fedf9eeb0 <col:65, line:489:5>
|     `-ReturnStmt 0x562fedf9eea0 <line:488:9, col:56>
|       `-CallExpr 0x562fedf9ee58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9ed38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9edb8 <col:21> 'const char *' lvalue ParmVar 0x562fedf73a20 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9edd8 <col:30> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         |-DeclRefExpr 0x562fedf9edf8 <col:42> 'P' lvalue ParmVar 0x562fedf73a98 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9ee18 <col:50> 'T1' lvalue ParmVar 0x562fedf73b38 'x1' 'T1 &'
|         `-DeclRefExpr 0x562fedf9ee38 <col:54> 'T2' lvalue ParmVar 0x562fedf73bd8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562fedf742e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x562fedf73de0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf73e58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf73ed8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf74248 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf73fa0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf74018 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf740b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562fedf74158 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x562fedf9f100 <col:66, line:493:5>
|     `-ReturnStmt 0x562fedf9f0f0 <line:492:9, col:68>
|       `-CallExpr 0x562fedf9f0a8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9eed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9ef58 <col:21> 'const char *' lvalue ParmVar 0x562fedf73fa0 'keyword' 'const char *'
|         |-BinaryOperator 0x562fedf9f028 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562fedf9efd8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562fedf9efb8 <col:30> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562fedf9f010 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562fedf9eff0 <col:42> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562fedf9f048 <col:54> 'P' lvalue ParmVar 0x562fedf74018 'parser' 'P'
|         |-DeclRefExpr 0x562fedf9f068 <col:62> 'T1' lvalue ParmVar 0x562fedf740b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562fedf9f088 <col:66> 'T2' lvalue ParmVar 0x562fedf74158 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562fedf75108 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x562fedf74360 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf743d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf74458 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf75068 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf74ce0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf74d60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf74dd8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf74e78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562fedf74f18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x562fedf9f290 <col:74, line:498:5>
|     |-CallExpr 0x562fedf9f208 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9f118 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562fedf9f158 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9f168 <col:30> 'const char *' lvalue ParmVar 0x562fedf74ce0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9f188 <col:39> 'int' lvalue ParmVar 0x562fedf74d60 'flags' 'int'
|     | |-DeclRefExpr 0x562fedf9f1a8 <col:46> 'P' lvalue ParmVar 0x562fedf74dd8 'parser' 'P'
|     | |-DeclRefExpr 0x562fedf9f1c8 <col:54> 'T1' lvalue ParmVar 0x562fedf74e78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x562fedf9f1e8 <col:58> 'T2' lvalue ParmVar 0x562fedf74f18 'x2' 'T2 &'
|     `-ReturnStmt 0x562fedf9f280 <line:497:9, col:17>
|       `-UnaryOperator 0x562fedf9f268 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9f258 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf75468 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x562fedf75188 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf753c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562fedf75240 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf752b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x562fedf9f3d8 <col:52, line:509:5>
|     `-ReturnStmt 0x562fedf9f3c8 <line:508:9, col:44>
|       `-CallExpr 0x562fedf9f390 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9f2c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9f330 <col:26> 'const char *' lvalue ParmVar 0x562fedf75240 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedf9f350 <col:35> 'int' 0
|         `-DeclRefExpr 0x562fedf9f370 <col:38> 'P' lvalue ParmVar 0x562fedf752b8 'parser' 'P'
|-FunctionTemplateDecl 0x562fedf75768 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x562fedf754d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf756c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562fedf75580 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf755f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562fedf9f518 <col:54, line:513:5>
|     `-ReturnStmt 0x562fedf9f508 <line:512:9, col:52>
|       `-CallExpr 0x562fedf9f4d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9f400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9f470 <col:26> 'const char *' lvalue ParmVar 0x562fedf75580 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9f490 <col:35> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int'
|         `-DeclRefExpr 0x562fedf9f4b0 <col:46> 'P' lvalue ParmVar 0x562fedf755f8 'parser' 'P'
|-FunctionTemplateDecl 0x562fedf75a68 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x562fedf757d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf759c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562fedf75880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf758f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562fedf9f658 <col:54, line:517:5>
|     `-ReturnStmt 0x562fedf9f648 <line:516:9, col:53>
|       `-CallExpr 0x562fedf9f610 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9f540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9f5b0 <col:26> 'const char *' lvalue ParmVar 0x562fedf75880 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9f5d0 <col:35> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int'
|         `-DeclRefExpr 0x562fedf9f5f0 <col:47> 'P' lvalue ParmVar 0x562fedf758f8 'parser' 'P'
|-FunctionTemplateDecl 0x562fedf75d68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x562fedf75ad0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf75cc8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562fedf75b80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf75bf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x562fedf9f848 <col:55, line:521:5>
|     `-ReturnStmt 0x562fedf9f838 <line:520:9, col:65>
|       `-CallExpr 0x562fedf9f800 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9f680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9f6f0 <col:26> 'const char *' lvalue ParmVar 0x562fedf75b80 'keyword' 'const char *'
|         |-BinaryOperator 0x562fedf9f7c0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x562fedf9f770 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562fedf9f750 <col:35> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562fedf9f7a8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562fedf9f788 <col:47> 'const int' lvalue Var 0x562fedf6e220 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x562fedf9f7e0 <col:59> 'P' lvalue ParmVar 0x562fedf75bf8 'parser' 'P'
|-FunctionTemplateDecl 0x562fedf76138 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x562fedf75dd0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf76098 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562fedf75e80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf75f00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf75f78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x562fedf9f988 <col:63, line:526:5>
|     |-CallExpr 0x562fedf9f910 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedf9f860 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x562fedf9f8a0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x562fedf9f8b0 <col:35> 'const char *' lvalue ParmVar 0x562fedf75e80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562fedf9f8d0 <col:44> 'int' lvalue ParmVar 0x562fedf75f00 'flags' 'int'
|     | `-DeclRefExpr 0x562fedf9f8f0 <col:51> 'P' lvalue ParmVar 0x562fedf75f78 'parser' 'P'
|     `-ReturnStmt 0x562fedf9f978 <line:525:9, col:17>
|       `-UnaryOperator 0x562fedf9f960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedf9f950 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf76588 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x562fedf761a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf76228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf764e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf762e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf76360 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf76408 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9fae0 <col:58, line:541:5>
|     `-ReturnStmt 0x562fedf9fad0 <line:540:9, col:39>
|       `-CallExpr 0x562fedf9fa98 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9f9b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9fa38 <col:21> 'const char *' lvalue ParmVar 0x562fedf762e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9fa58 <col:30> 'P' lvalue ParmVar 0x562fedf76360 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9fa78 <col:38> 'T' lvalue ParmVar 0x562fedf76408 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf769d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x562fedf765f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf76678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf76938 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf76738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf767b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf76858 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9fc18 <col:60, line:545:5>
|     `-ReturnStmt 0x562fedf9fc08 <line:544:9, col:41>
|       `-CallExpr 0x562fedf9fbd0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9fb08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9fb70 <col:23> 'const char *' lvalue ParmVar 0x562fedf76738 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9fb90 <col:32> 'P' lvalue ParmVar 0x562fedf767b0 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9fbb0 <col:40> 'T' lvalue ParmVar 0x562fedf76858 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf76e28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x562fedf76a48 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf76ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf76d88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf76b88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf76c00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf76ca8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9fd50 <col:60, line:549:5>
|     `-ReturnStmt 0x562fedf9fd40 <line:548:9, col:41>
|       `-CallExpr 0x562fedf9fd08 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9fc40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9fca8 <col:23> 'const char *' lvalue ParmVar 0x562fedf76b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9fcc8 <col:32> 'P' lvalue ParmVar 0x562fedf76c00 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9fce8 <col:40> 'T' lvalue ParmVar 0x562fedf76ca8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf77278 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x562fedf76e98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf76f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf771d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf76fd8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf77050 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf770f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x562fedf9fe88 <col:61, line:553:5>
|     `-ReturnStmt 0x562fedf9fe78 <line:552:9, col:42>
|       `-CallExpr 0x562fedf9fe40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9fd78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9fde0 <col:24> 'const char *' lvalue ParmVar 0x562fedf76fd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9fe00 <col:33> 'P' lvalue ParmVar 0x562fedf77050 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9fe20 <col:41> 'T' lvalue ParmVar 0x562fedf770f8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf77758 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x562fedf772e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf77368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf776b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562fedf77428 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf774a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf77520 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf775c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x562fedfa0000 <col:69, line:557:5>
|     `-ReturnStmt 0x562fedf9fff0 <line:556:9, col:46>
|       `-CallExpr 0x562fedf9ffb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedf9feb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedf9ff30 <col:21> 'const char *' lvalue ParmVar 0x562fedf77428 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedf9ff50 <col:30> 'int' lvalue ParmVar 0x562fedf774a8 'flags' 'int'
|         |-DeclRefExpr 0x562fedf9ff70 <col:37> 'P' lvalue ParmVar 0x562fedf77520 'parser' 'P'
|         `-DeclRefExpr 0x562fedf9ff90 <col:45> 'T' lvalue ParmVar 0x562fedf775c8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf77a68 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x562fedf777d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf779c8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562fedf77880 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf778f8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x562fedfa0140 <col:56, line:571:5>
|     `-ReturnStmt 0x562fedfa0130 <line:570:9, col:48>
|       `-CallExpr 0x562fedfa00f8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedfa0028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedfa0098 <col:30> 'const char *' lvalue ParmVar 0x562fedf77880 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedfa00b8 <col:39> 'int' 0
|         `-DeclRefExpr 0x562fedfa00d8 <col:42> 'P' lvalue ParmVar 0x562fedf778f8 'parser' 'P'
|-FunctionTemplateDecl 0x562fedf77df8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x562fedf77ad0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf77d58 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562fedf77b80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf77c00 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf77c78 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562fedfa0310 <col:67, line:576:5>
|     |-CallExpr 0x562fedfa0298 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedfa0158 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562fedfa0198 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562fedfa01a8 <col:39> 'const char *' lvalue ParmVar 0x562fedf77b80 'keyword' 'const char *'
|     | |-BinaryOperator 0x562fedfa0258 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562fedfa0208 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562fedfa01c8 <col:48> 'int' lvalue ParmVar 0x562fedf77c00 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562fedfa0240 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fedfa0220 <col:56> 'const int' lvalue Var 0x562fedf6e410 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x562fedfa0278 <col:68> 'P' lvalue ParmVar 0x562fedf77c78 'parser' 'P'
|     `-ReturnStmt 0x562fedfa0300 <line:575:9, col:17>
|       `-UnaryOperator 0x562fedfa02e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedfa02d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf78248 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x562fedf77e68 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf77ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf781a8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562fedf77fa8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf78020 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf780c8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x562fedfa0480 <col:62, line:592:5>
|     `-ReturnStmt 0x562fedfa0470 <line:591:9, col:51>
|       `-CallExpr 0x562fedfa0430 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedfa0340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedfa03b0 <col:30> 'const char *' lvalue ParmVar 0x562fedf77fa8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedfa03d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x562fedfa03f0 <col:42> 'P' lvalue ParmVar 0x562fedf78020 'parser' 'P'
|         `-DeclRefExpr 0x562fedfa0410 <col:50> 'T' lvalue ParmVar 0x562fedf780c8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf78728 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x562fedf782b8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf78338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf78688 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562fedf783f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf78478 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf784f0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf78598 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x562fedfa0678 <col:73, line:597:5>
|     |-CallExpr 0x562fedfa05f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedfa0498 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562fedfa04d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562fedfa04e8 <col:39> 'const char *' lvalue ParmVar 0x562fedf783f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x562fedfa0598 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562fedfa0548 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562fedfa0508 <col:48> 'int' lvalue ParmVar 0x562fedf78478 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562fedfa0580 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fedfa0560 <col:56> 'const int' lvalue Var 0x562fedf6e410 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562fedfa05b8 <col:68> 'P' lvalue ParmVar 0x562fedf784f0 'parser' 'P'
|     | `-DeclRefExpr 0x562fedfa05d8 <col:76> 'T' lvalue ParmVar 0x562fedf78598 'x' 'T &'
|     `-ReturnStmt 0x562fedfa0668 <line:596:9, col:17>
|       `-UnaryOperator 0x562fedfa0650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedfa0640 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf78cd8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x562fedf787a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf78818 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf78c38 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x562fedf788d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf78950 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf78b10 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562fedfa07e8 <col:65, line:614:5>
|     `-ReturnStmt 0x562fedfa07d8 <line:613:9, col:46>
|       `-CallExpr 0x562fedfa0798 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedfa06a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedfa0718 <col:25> 'const char *' lvalue ParmVar 0x562fedf788d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedfa0738 <col:34> 'int' 0
|         |-DeclRefExpr 0x562fedfa0758 <col:37> 'P' lvalue ParmVar 0x562fedf78950 'parser' 'P'
|         `-DeclRefExpr 0x562fedfa0778 <col:45> 'Vector<T>' lvalue ParmVar 0x562fedf78b10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562fedf79108 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x562fedf78d48 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf79068 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x562fedf78e00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf78f50 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562fedfa0a00 <col:55, line:618:5>
|     `-ReturnStmt 0x562fedfa09f0 <line:617:9, col:55>
|       `-CallExpr 0x562fedfa09b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedfa0810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedfa0880 <col:25> 'const char *' lvalue ParmVar 0x562fedf78e00 'keyword' 'const char *'
|         |-IntegerLiteral 0x562fedfa08a0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x562fedfa0970 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562fedfa0990 <col:54> 'Vector<T>' lvalue ParmVar 0x562fedf78f50 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562fedf796d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x562fedf79170 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf791e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf79638 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562fedf792a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf79328 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf793a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf794f0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562fedfa0bf8 <col:76, line:623:5>
|     |-CallExpr 0x562fedfa0b78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562fedfa0a18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x562fedfa0a58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x562fedfa0a68 <col:34> 'const char *' lvalue ParmVar 0x562fedf792a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x562fedfa0b18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x562fedfa0ac8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562fedfa0a88 <col:43> 'int' lvalue ParmVar 0x562fedf79328 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562fedfa0b00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fedfa0ae0 <col:51> 'const int' lvalue Var 0x562fedf6e410 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562fedfa0b38 <col:63> 'P' lvalue ParmVar 0x562fedf793a0 'parser' 'P'
|     | `-DeclRefExpr 0x562fedfa0b58 <col:71> 'Vector<T>' lvalue ParmVar 0x562fedf794f0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x562fedfa0be8 <line:622:9, col:17>
|       `-UnaryOperator 0x562fedfa0bd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedfa0bc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf79c18 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x562fedf79750 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf797c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf79b78 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x562fedf79888 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf79908 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf79a50 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562fedfa0e60 <col:66, line:627:5>
|     `-ReturnStmt 0x562fedfa0e50 <line:626:9, col:59>
|       `-CallExpr 0x562fedfa0e10 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562fedfa0c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562fedfa0c98 <col:25> 'const char *' lvalue ParmVar 0x562fedf79888 'keyword' 'const char *'
|         |-DeclRefExpr 0x562fedfa0cb8 <col:34> 'int' lvalue ParmVar 0x562fedf79908 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x562fedfa0dd0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562fedfa0df0 <col:58> 'Vector<T>' lvalue ParmVar 0x562fedf79a50 'x' 'Vector<T> &'
|-CXXMethodDecl 0x562fedf79ca8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x562fedfa0ee0 <col:25, line:633:5>
|   `-ReturnStmt 0x562fedfa0ed0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x562fedfa0eb8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562fedfa0e88 <col:16> 'const bool' lvalue ->_status 0x562fedf88498
|         `-CXXThisExpr 0x562fedfa0e78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562fedf79e28 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x562fedf79d60 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x562fedfa0fc8 <col:27, line:639:5>
|   |-BinaryOperator 0x562fedfa0f70 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562fedfa0ef8 <col:9> 'bool' lvalue ParmVar 0x562fedf79d60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562fedfa0f58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562fedfa0f28 <col:13> 'bool' lvalue ->_status 0x562fedf88498
|   |     `-CXXThisExpr 0x562fedfa0f18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562fedfa0fb8 <line:638:9, col:17>
|     `-UnaryOperator 0x562fedfa0fa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedfa0f90 <col:17> 'Args *' this
|-CXXMethodDecl 0x562fedf79fa8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562fedf79ee8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x562fedfa10b8 <col:39, line:644:5>
|   |-BinaryOperator 0x562fedfa1060 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562fedfa0fe8 <col:9> 'bool' lvalue ParmVar 0x562fedf79ee8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562fedfa1048 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562fedfa1018 <col:13> 'const bool' lvalue ->_status 0x562fedf88498
|   |     `-CXXThisExpr 0x562fedfa1008 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562fedfa10a8 <line:643:9, col:17>
|     `-UnaryOperator 0x562fedfa1090 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedfa1080 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562fedf7a070 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x562fedfa1160 <col:30, line:651:5>
|   `-ReturnStmt 0x562fedfa1150 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x562fedfa1138 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562fedfa1108 <col:16> 'bool' lvalue ->_read_status 0x562fede7d650
|         `-ImplicitCastExpr 0x562fedfa10e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x562fedfa10d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562fedf7a1b8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x562fedf7a128 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x562fedfa1268 <col:32, line:658:5>
|   |-BinaryOperator 0x562fedfa1210 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562fedfa1178 <col:9> 'bool' lvalue ParmVar 0x562fedf7a128 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562fedfa11f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562fedfa11c8 <col:13> 'bool' lvalue ->_read_status 0x562fede7d650
|   |     `-ImplicitCastExpr 0x562fedfa11a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562fedfa1198 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562fedfa1258 <line:657:9, col:17>
|     `-UnaryOperator 0x562fedfa1240 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedfa1230 <col:17> 'Args *' this
|-CXXMethodDecl 0x562fedf7a308 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562fedf7a278 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x562fedfa1378 <col:44, line:663:5>
|   |-BinaryOperator 0x562fedfa1320 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562fedfa1288 <col:9> 'bool' lvalue ParmVar 0x562fedf7a278 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562fedfa1308 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562fedfa12d8 <col:13> 'bool' lvalue ->_read_status 0x562fede7d650
|   |     `-ImplicitCastExpr 0x562fedfa12b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562fedfa12a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562fedfa1368 <line:662:9, col:17>
|     `-UnaryOperator 0x562fedfa1350 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedfa1340 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562fedf7a3d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x562fedf7a498 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x562fedf7a560 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x562fedf7a628 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x562fedf7a938 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x562fedf7a6c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf7a898 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x562fedf7a7a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x562fedfa1730 <col:19, line:706:5>
|     `-IfStmt 0x562fedfa1708 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x562fedfa1478 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x562fedfa1638 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x562fedfa1608 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x562fedfa15c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x562fedfa14d0 <col:42> '<bound member function type>' ->simple_slot 0x562fedf9a930
|       |     | `-CXXThisExpr 0x562fedfa14c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x562fedfa1568 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x562fedfa1520 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x562fedd07a78
|       |     | `-DeclRefExpr 0x562fedfa1500 <col:55> 'T' lvalue ParmVar 0x562fedf7a7a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x562fedfa15a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x562fedfa16f8 <line:705:13, col:34>
|         `-CallExpr 0x562fedfa16d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x562fedfa1658 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x562fedfa16b0 <col:33> 'T' lvalue ParmVar 0x562fedf7a7a8 'x' 'T &'
|-FunctionTemplateDecl 0x562fedf7ac08 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x562fedf7a998 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf7ab68 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x562fedf7aa78 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x562fedfa1b10 <col:31, line:717:5>
|     |-DeclStmt 0x562fedfa1870 <line:713:9, col:23>
|     | `-VarDecl 0x562fedfa1758 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x562fedfa1848 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562fedfa17d0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562fedfa1828 <col:21> 'T' lvalue ParmVar 0x562fedf7aa78 'x' 'T &'
|     |-IfStmt 0x562fedfa1ac0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x562fedfa1968 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x562fedfa1aa0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562fedfa1a40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562fedfa19d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|     |   | `-DeclRefExpr 0x562fedfa19b0 <col:14> 'T *' lvalue Var 0x562fedfa1758 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x562fedfa1a80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x562fedfa1af8 <line:716:9, col:16>
|       `-DeclRefExpr 0x562fedfa1ad8 <col:16> 'T *' lvalue Var 0x562fedfa1758 's' 'T *'
|-FunctionTemplateDecl 0x562fedf7b018 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x562fedf7ac68 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf7ace8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562fedf7af78 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x562fedf7adc8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x562fedf7ae68 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x562fedfa1e20 <col:37, line:726:5>
|     |-IfStmt 0x562fedfa1db0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x562fedfa1dd0 <line:723:13, col:26>
|     | | `-VarDecl 0x562fedfa1b78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x562fedfa1c68 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x562fedfa1bf0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x562fedfa1c48 <col:25> 'T' lvalue ParmVar 0x562fedf7adc8 'x' 'T &'
|     | |-DeclRefExpr 0x562fedfa1c90 <col:16> 'T *' lvalue Var 0x562fedfa1b78 's' 'T *'
|     | `-BinaryOperator 0x562fedfa1d90 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562fedfa1d40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562fedfa1cd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|     |   | `-DeclRefExpr 0x562fedfa1cb0 <col:14> 'T *' lvalue Var 0x562fedfa1b78 's' 'T *'
|     |   `-DeclRefExpr 0x562fedfa1d70 <col:18> 'const V' lvalue ParmVar 0x562fedf7ae68 'value' 'const V &'
|     `-ReturnStmt 0x562fedfa1e10 <line:725:9, col:17>
|       `-UnaryOperator 0x562fedfa1df8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562fedfa1de8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562fedf7b418 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x562fedf7b080 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562fedf7b378 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x562fedf7b130 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf7b1b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf7b258 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x562fedfa2c40 <col:65, line:737:5>
|     |-DeclStmt 0x562fedfa1eb8 <line:732:9, col:26>
|     | `-VarDecl 0x562fedfa1e50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562fedfa2c08 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x562fedfa2c28 <line:733:13, col:58>
|       | `-VarDecl 0x562fedfa1ee0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562fedfa20c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562fedfa2090 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562fedfa2078 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562fedfa2058 <col:26, col:58> 'String' (CXXTemporary 0x562fedfa2058)
|       |           `-CXXMemberCallExpr 0x562fedfa1fe8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562fedfa1f58 <col:26> '<bound member function type>' ->find 0x562fedf99f48
|       |             | `-CXXThisExpr 0x562fedfa1f48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562fedfa2020 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa1f88 <col:31> 'const char *' lvalue ParmVar 0x562fedf7b130 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562fedfa2038 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa1fa8 <col:40> 'int' lvalue ParmVar 0x562fedf7b1b0 'flags' 'int'
|       |             `-DeclRefExpr 0x562fedfa1fc8 <col:47> 'Args::Slot *' lvalue Var 0x562fedfa1e50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562fedfa2178 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562fedfa2160 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562fedfa2140 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562fedfa2110 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |       `-ImplicitCastExpr 0x562fedfa20f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562fedfa20d8 <col:20> 'String' lvalue Var 0x562fedfa1ee0 'str' 'String'
|       `-CompoundStmt 0x562fedfa2be8 <col:61, line:736:9>
|         |-DeclStmt 0x562fedfa2630 <line:734:13, col:76>
|         | `-VarDecl 0x562fedfa21c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562fedfa2600 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562fedfa2570 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562fedfa25b8 <col:60> 'T' lvalue ParmVar 0x562fedf7b258 'variable' 'T &'
|         |     `-UnaryOperator 0x562fedfa25e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562fedfa25d8 <col:71> 'Args *' this
|         `-CallExpr 0x562fedfa2bb8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x562fedfa2658 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|           | `-CXXThisExpr 0x562fedfa2648 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562fedfa2b78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562fedfa2688 <col:23> 'T *' lvalue Var 0x562fedfa21c8 's' 'T *'
|           | `-CallExpr 0x562fedfa2b38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562fedfa2910 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x562fedfa2a10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x562fedfa2a30 <col:86> 'String' lvalue Var 0x562fedfa1ee0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562fedfa2ae0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562fedfa2a70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|           |   | `-DeclRefExpr 0x562fedfa2a50 <col:92> 'T *' lvalue Var 0x562fedfa21c8 's' 'T *'
|           |   `-UnaryOperator 0x562fedfa2b20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562fedfa2b10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x562fedfa2b98 <col:103> 'Args::Slot *' lvalue Var 0x562fedfa1e50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf7b968 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562fedf7b488 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf7b508 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562fedf7b8c8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562fedf7b5c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf7b648 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf7b6e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x562fedf7b788 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x562fedfa3ae0 <col:88, line:745:5>
|     |-DeclStmt 0x562fedfa2cd8 <line:741:9, col:26>
|     | `-VarDecl 0x562fedfa2c70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562fedfa2ef8 <line:742:9, col:55>
|     | `-VarDecl 0x562fedfa2d00 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562fedfa2ee0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562fedfa2eb0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562fedfa2e98 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562fedfa2e78 <col:22, col:54> 'String' (CXXTemporary 0x562fedfa2e78)
|     |           `-CXXMemberCallExpr 0x562fedfa2e08 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562fedfa2d78 <col:22> '<bound member function type>' ->find 0x562fedf99f48
|     |             | `-CXXThisExpr 0x562fedfa2d68 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562fedfa2e40 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562fedfa2da8 <col:27> 'const char *' lvalue ParmVar 0x562fedf7b5c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562fedfa2e58 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562fedfa2dc8 <col:36> 'int' lvalue ParmVar 0x562fedf7b648 'flags' 'int'
|     |             `-DeclRefExpr 0x562fedfa2de8 <col:43> 'Args::Slot *' lvalue Var 0x562fedfa2c70 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562fedfa32d0 <line:743:9, col:72>
|     | `-VarDecl 0x562fedfa2f48 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562fedfa32a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562fedfa3210 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562fedfa3258 <col:56> 'T' lvalue ParmVar 0x562fedf7b6e8 'variable' 'T &'
|     |     `-UnaryOperator 0x562fedfa3288 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562fedfa3278 <col:67> 'Args *' this
|     `-CallExpr 0x562fedfa3ab0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x562fedfa32f8 <col:9> '<bound member function type>' ->postparse 0x562fedf9a158
|       | `-CXXThisExpr 0x562fedfa32e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562fedfa3a70 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562fedfa3328 <col:19> 'T *' lvalue Var 0x562fedfa2f48 's' 'T *'
|       | `-ParenExpr 0x562fedfa3a50 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x562fedfa3a20 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562fedfa3a08 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562fedfa39f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562fedfa39d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562fedfa39a0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |     |       `-ImplicitCastExpr 0x562fedfa3988 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562fedfa3348 <col:25> 'String' lvalue Var 0x562fedfa2d00 'str' 'String'
|       |     |-CallExpr 0x562fedfa37f8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562fedfa35d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x562fedfa36d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x562fedfa36f0 <col:89> 'String' lvalue Var 0x562fedfa2d00 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562fedfa37a0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562fedfa3730 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|       |     | | `-DeclRefExpr 0x562fedfa3710 <col:95> 'T *' lvalue Var 0x562fedfa2f48 's' 'T *'
|       |     | `-UnaryOperator 0x562fedfa37e0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562fedfa37d0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x562fedfa3968 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x562fedfa3948 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x562fedfa3918 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562fedfa38c8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562fedfa3858 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|       |         | | `-DeclRefExpr 0x562fedfa3838 <col:109> 'T *' lvalue Var 0x562fedfa2f48 's' 'T *'
|       |         | `-DeclRefExpr 0x562fedfa38f8 <col:113> 'const V' lvalue ParmVar 0x562fedf7b788 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562fedfa3938 <col:120> 'bool' true
|       `-DeclRefExpr 0x562fedfa3a90 <col:128> 'Args::Slot *' lvalue Var 0x562fedfa2c70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf7be98 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x562fedf7b9e0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf7ba58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf7bdf8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562fedf7bb18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf7bb98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf7bc10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf7bcb8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x562fedfa46d8 <col:75, line:754:5>
|     |-DeclStmt 0x562fedfa3b88 <line:749:9, col:26>
|     | `-VarDecl 0x562fedfa3b20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562fedfa46a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x562fedfa46c0 <line:750:13, col:58>
|       | `-VarDecl 0x562fedfa3bb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562fedfa3d90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562fedfa3d60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562fedfa3d48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562fedfa3d28 <col:26, col:58> 'String' (CXXTemporary 0x562fedfa3d28)
|       |           `-CXXMemberCallExpr 0x562fedfa3cb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562fedfa3c28 <col:26> '<bound member function type>' ->find 0x562fedf99f48
|       |             | `-CXXThisExpr 0x562fedfa3c18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562fedfa3cf0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa3c58 <col:31> 'const char *' lvalue ParmVar 0x562fedf7bb18 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562fedfa3d08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa3c78 <col:40> 'int' lvalue ParmVar 0x562fedf7bb98 'flags' 'int'
|       |             `-DeclRefExpr 0x562fedfa3c98 <col:47> 'Args::Slot *' lvalue Var 0x562fedfa3b20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562fedfa3e48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562fedfa3e30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562fedfa3e10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562fedfa3de0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |       `-ImplicitCastExpr 0x562fedfa3dc8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562fedfa3da8 <col:20> 'String' lvalue Var 0x562fedfa3bb0 'str' 'String'
|       `-CompoundStmt 0x562fedfa4680 <col:61, line:753:9>
|         |-DeclStmt 0x562fedfa4220 <line:751:13, col:63>
|         | `-VarDecl 0x562fedfa3e98 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562fedfa41f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562fedfa4160 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562fedfa41a8 <col:47> 'T' lvalue ParmVar 0x562fedf7bcb8 'variable' 'T &'
|         |     `-UnaryOperator 0x562fedfa41d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562fedfa41c8 <col:58> 'Args *' this
|         `-CallExpr 0x562fedfa4650 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x562fedfa4248 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|           | `-CXXThisExpr 0x562fedfa4238 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562fedfa4610 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562fedfa4278 <col:23> 'T *' lvalue Var 0x562fedfa3e98 's' 'T *'
|           | `-CallExpr 0x562fedfa45d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562fedfa4460 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562fedfa44a8 <col:56> 'P' lvalue ParmVar 0x562fedf7bc10 'parser' 'P'
|           |   |-DeclRefExpr 0x562fedfa44c8 <col:64> 'String' lvalue Var 0x562fedfa3bb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562fedfa4578 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562fedfa4508 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|           |   | `-DeclRefExpr 0x562fedfa44e8 <col:70> 'T *' lvalue Var 0x562fedfa3e98 's' 'T *'
|           |   `-UnaryOperator 0x562fedfa45b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562fedfa45a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x562fedfa4630 <col:81> 'Args::Slot *' lvalue Var 0x562fedfa3b20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf7c4f8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562fedf7bf10 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562fedf7bf88 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x562fedf7c008 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562fedf7c458 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562fedf7c0d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf7c150 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf7c1c8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf7c268 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x562fedf7c308 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x562fedfa7808 <col:98, line:762:5>
|     |-DeclStmt 0x562fedfa4770 <line:758:9, col:26>
|     | `-VarDecl 0x562fedfa4708 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562fedfa4990 <line:759:9, col:55>
|     | `-VarDecl 0x562fedfa4798 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562fedfa4978 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562fedfa4948 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562fedfa4930 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562fedfa4910 <col:22, col:54> 'String' (CXXTemporary 0x562fedfa4910)
|     |           `-CXXMemberCallExpr 0x562fedfa48a0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562fedfa4810 <col:22> '<bound member function type>' ->find 0x562fedf99f48
|     |             | `-CXXThisExpr 0x562fedfa4800 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562fedfa48d8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562fedfa4840 <col:27> 'const char *' lvalue ParmVar 0x562fedf7c0d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562fedfa48f0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562fedfa4860 <col:36> 'int' lvalue ParmVar 0x562fedf7c150 'flags' 'int'
|     |             `-DeclRefExpr 0x562fedfa4880 <col:43> 'Args::Slot *' lvalue Var 0x562fedfa4708 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562fedfa4db0 <line:760:9, col:59>
|     | `-VarDecl 0x562fedfa49e8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562fedfa4d80 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562fedfa4cf0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562fedfa4d38 <col:43> 'T' lvalue ParmVar 0x562fedf7c268 'variable' 'T &'
|     |     `-UnaryOperator 0x562fedfa4d68 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562fedfa4d58 <col:54> 'Args *' this
|     `-CallExpr 0x562fedfa77d8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x562fedfa4dd8 <col:9> '<bound member function type>' ->postparse 0x562fedf9a158
|       | `-CXXThisExpr 0x562fedfa4dc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562fedfa7798 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562fedfa4e08 <col:19> 'T *' lvalue Var 0x562fedfa49e8 's' 'T *'
|       | `-ParenExpr 0x562fedfa7778 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x562fedfa7748 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562fedfa7730 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562fedfa7718 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562fedfa76f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562fedfa76c8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |     |       `-ImplicitCastExpr 0x562fedfa76b0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562fedfa4e28 <col:25> 'String' lvalue Var 0x562fedfa4798 'str' 'String'
|       |     |-CallExpr 0x562fedfa5180 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562fedfa5010 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x562fedfa5058 <col:59> 'P' lvalue ParmVar 0x562fedf7c1c8 'parser' 'P'
|       |     | |-DeclRefExpr 0x562fedfa5078 <col:67> 'String' lvalue Var 0x562fedfa4798 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562fedfa5128 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562fedfa50b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|       |     | | `-DeclRefExpr 0x562fedfa5098 <col:73> 'T *' lvalue Var 0x562fedfa49e8 's' 'T *'
|       |     | `-UnaryOperator 0x562fedfa5168 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562fedfa5158 <col:77> 'Args *' this
|       |     `-ParenExpr 0x562fedfa7690 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x562fedfa52d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x562fedfa52a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562fedfa5250 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562fedfa51e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|       |         | | `-DeclRefExpr 0x562fedfa51c0 <col:87> 'T *' lvalue Var 0x562fedfa49e8 's' 'T *'
|       |         | `-DeclRefExpr 0x562fedfa5280 <col:91> 'const V' lvalue ParmVar 0x562fedf7c308 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562fedfa52c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x562fedfa77b8 <col:106> 'Args::Slot *' lvalue Var 0x562fedfa4708 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf7cb68 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x562fedf7c578 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf7c5f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562fedf7c678 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562fedf7cac8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562fedf7c740 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf7c7c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf7c838 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf7c8d8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x562fedf7c978 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x562fedfa87e8 <col:60, line:773:5>
|     |-DeclStmt 0x562fedfa78b0 <line:767:9, col:26>
|     | `-VarDecl 0x562fedfa7848 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562fedfa87b0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x562fedfa87d0 <line:768:13, col:58>
|       | `-VarDecl 0x562fedfa78d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562fedfa7ab8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562fedfa7a88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562fedfa7a70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562fedfa7a50 <col:26, col:58> 'String' (CXXTemporary 0x562fedfa7a50)
|       |           `-CXXMemberCallExpr 0x562fedfa79e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562fedfa7950 <col:26> '<bound member function type>' ->find 0x562fedf99f48
|       |             | `-CXXThisExpr 0x562fedfa7940 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562fedfa7a18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa7980 <col:31> 'const char *' lvalue ParmVar 0x562fedf7c740 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562fedfa7a30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa79a0 <col:40> 'int' lvalue ParmVar 0x562fedf7c7c0 'flags' 'int'
|       |             `-DeclRefExpr 0x562fedfa79c0 <col:47> 'Args::Slot *' lvalue Var 0x562fedfa7848 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562fedfa7b70 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562fedfa7b58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562fedfa7b38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562fedfa7b08 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |       `-ImplicitCastExpr 0x562fedfa7af0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562fedfa7ad0 <col:20> 'String' lvalue Var 0x562fedfa78d8 'str' 'String'
|       `-CompoundStmt 0x562fedfa8788 <col:61, line:772:9>
|         |-DeclStmt 0x562fedfa7eb0 <line:769:13, col:66>
|         | `-VarDecl 0x562fedfa7bc8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x562fedfa7e80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562fedfa7df0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562fedfa7e38 <col:49> 'T1' lvalue ParmVar 0x562fedf7c8d8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x562fedfa7e68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562fedfa7e58 <col:61> 'Args *' this
|         |-DeclStmt 0x562fedfa8220 <line:770:13, col:66>
|         | `-VarDecl 0x562fedfa7f38 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x562fedfa81f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562fedfa8160 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562fedfa81a8 <col:49> 'T2' lvalue ParmVar 0x562fedf7c978 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x562fedfa81d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562fedfa81c8 <col:61> 'Args *' this
|         `-CallExpr 0x562fedfa8758 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x562fedfa8248 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|           | `-CXXThisExpr 0x562fedfa8238 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562fedfa8718 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x562fedfa82b8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x562fedfa8278 <col:23> 'T1 *' lvalue Var 0x562fedfa7bc8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x562fedfa8298 <col:29> 'T2 *' lvalue Var 0x562fedfa7f38 's2' 'T2 *'
|           | `-CallExpr 0x562fedfa86d0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562fedfa84a0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562fedfa84e8 <col:63> 'P' lvalue ParmVar 0x562fedf7c838 'parser' 'P'
|           |   |-DeclRefExpr 0x562fedfa8508 <col:71> 'String' lvalue Var 0x562fedfa78d8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562fedfa85b8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562fedfa8548 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|           |   | `-DeclRefExpr 0x562fedfa8528 <col:77> 'T1 *' lvalue Var 0x562fedfa7bc8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x562fedfa8678 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562fedfa8608 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|           |   | `-DeclRefExpr 0x562fedfa85e8 <col:82> 'T2 *' lvalue Var 0x562fedfa7f38 's2' 'T2 *'
|           |   `-UnaryOperator 0x562fedfa86b8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562fedfa86a8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x562fedfa8738 <col:94> 'Args::Slot *' lvalue Var 0x562fedfa7848 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf85908 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x562fedf7cbe8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf85868 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562fedf85650 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf856d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf85748 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562fedfa8d00 <col:67, line:780:5>
|     |-DeclStmt 0x562fedfa8880 <line:777:9, col:26>
|     | `-VarDecl 0x562fedfa8818 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562fedfa8cc8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x562fedfa8ce8 <line:778:13, col:58>
|       | `-VarDecl 0x562fedfa88a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562fedfa8a88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562fedfa8a58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562fedfa8a40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562fedfa8a20 <col:26, col:58> 'String' (CXXTemporary 0x562fedfa8a20)
|       |           `-CXXMemberCallExpr 0x562fedfa89b0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562fedfa8920 <col:26> '<bound member function type>' ->find 0x562fedf99f48
|       |             | `-CXXThisExpr 0x562fedfa8910 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562fedfa89e8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa8950 <col:31> 'const char *' lvalue ParmVar 0x562fedf85650 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562fedfa8a00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562fedfa8970 <col:40> 'int' lvalue ParmVar 0x562fedf856d0 'flags' 'int'
|       |             `-DeclRefExpr 0x562fedfa8990 <col:47> 'Args::Slot *' lvalue Var 0x562fedfa8818 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562fedfa8b40 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562fedfa8b28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562fedfa8b08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562fedfa8ad8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|       |       `-ImplicitCastExpr 0x562fedfa8ac0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562fedfa8aa0 <col:20> 'String' lvalue Var 0x562fedfa88a8 'str' 'String'
|       `-CallExpr 0x562fedfa8c98 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x562fedfa8b68 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|         | `-CXXThisExpr 0x562fedfa8b58 <col:13> 'Args *' implicit this
|         |-CallExpr 0x562fedfa8c48 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x562fedfa8bb8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x562fedfa8b98 <col:23> 'P' lvalue ParmVar 0x562fedf85748 'parser' 'P'
|         | |-DeclRefExpr 0x562fedfa8c00 <col:36> 'String' lvalue Var 0x562fedfa88a8 'str' 'String'
|         | `-UnaryOperator 0x562fedfa8c30 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x562fedfa8c20 <col:42> 'Args *' this
|         `-DeclRefExpr 0x562fedfa8c78 <col:49> 'Args::Slot *' lvalue Var 0x562fedfa8818 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562fedf85ca8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562fedf85978 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562fedf85c08 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562fedf85a30 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf85ab0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf85b28 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x562fedfa9670 <col:71, line:792:5>
|     |-DeclStmt 0x562fedfa8d98 <line:784:9, col:26>
|     | `-VarDecl 0x562fedfa8d30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562fedfa8e68 <line:785:9, col:29>
|     | `-VarDecl 0x562fedfa8dc8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562fedfa8e50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562fedfa8e30 <col:28> 'int' 1
|     |-WhileStmt 0x562fedfa9520 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x562fedfa9540 <line:786:16, col:61>
|     | | `-VarDecl 0x562fedfa8e90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562fedfa9070 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562fedfa9040 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562fedfa9028 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562fedfa9008 <col:29, col:61> 'String' (CXXTemporary 0x562fedfa9008)
|     | |           `-CXXMemberCallExpr 0x562fedfa8f98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562fedfa8f08 <col:29> '<bound member function type>' ->find 0x562fedf99f48
|     | |             | `-CXXThisExpr 0x562fedfa8ef8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562fedfa8fd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfa8f38 <col:34> 'const char *' lvalue ParmVar 0x562fedf85a30 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562fedfa8fe8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfa8f58 <col:43> 'int' lvalue ParmVar 0x562fedf85ab0 'flags' 'int'
|     | |             `-DeclRefExpr 0x562fedfa8f78 <col:50> 'Args::Slot *' lvalue Var 0x562fedfa8d30 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562fedfa9128 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562fedfa9110 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562fedfa90f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562fedfa90c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|     | |       `-ImplicitCastExpr 0x562fedfa90a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562fedfa9088 <col:23> 'String' lvalue Var 0x562fedfa8e90 'str' 'String'
|     | `-CompoundStmt 0x562fedfa94f8 <col:64, line:790:9>
|     |   |-CallExpr 0x562fedfa9280 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x562fedfa9150 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|     |   | | `-CXXThisExpr 0x562fedfa9140 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562fedfa9230 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562fedfa91a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562fedfa9180 <col:23> 'P' lvalue ParmVar 0x562fedf85b28 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562fedfa91e8 <col:36> 'String' lvalue Var 0x562fedfa8e90 'str' 'String'
|     |   | | `-UnaryOperator 0x562fedfa9218 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562fedfa9208 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x562fedfa9260 <col:49> 'Args::Slot *' lvalue Var 0x562fedfa8d30 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562fedfa9418 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562fedfa92b0 <col:13> 'int' lvalue Var 0x562fedfa8dc8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562fedfa9400 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562fedfa93e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562fedfa9348 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562fedfa9328 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562fedfa9310 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562fedfa92d0 <col:28> 'int' lvalue Var 0x562fedfa8dc8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562fedfa92f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562fedfa93c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562fedfa9398 <col:49> 'bool' lvalue ->_read_status 0x562fede7d650
|     |   |         `-ImplicitCastExpr 0x562fedfa9378 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562fedfa9368 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562fedfa94c8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562fedfa9438 <col:13> 'int' lvalue ParmVar 0x562fedf85ab0 'flags' 'int'
|     |     `-UnaryOperator 0x562fedfa94b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562fedfa9498 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fedfa9478 <col:23> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562fedfa9650 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562fedfa9588 <col:9> 'bool' lvalue ->_read_status 0x562fede7d650
|       | `-ImplicitCastExpr 0x562fedfa9568 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562fedfa9558 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562fedfa9630 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562fedfa9610 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562fedfa95f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562fedfa95b8 <col:25> 'int' lvalue Var 0x562fedfa8dc8 'read_status' 'int'
|           `-IntegerLiteral 0x562fedfa95d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562fedf86188 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562fedf85d18 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf85d98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf860e8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562fedf85e58 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf85ed8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf85f50 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf85ff8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x562fedfaa600 <col:84, line:805:5>
|     |-DeclStmt 0x562fedfa9718 <line:796:9, col:26>
|     | `-VarDecl 0x562fedfa96b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562fedfa97e8 <line:797:9, col:29>
|     | `-VarDecl 0x562fedfa9748 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562fedfa97d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562fedfa97b0 <col:28> 'int' 1
|     |-DeclStmt 0x562fedfa9b20 <line:798:9, col:71>
|     | `-VarDecl 0x562fedfa9838 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562fedfa9af0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562fedfa9a60 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x562fedfa9aa8 <col:55> 'T' lvalue ParmVar 0x562fedf85ff8 'variable' 'T &'
|     |     `-UnaryOperator 0x562fedfa9ad8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562fedfa9ac8 <col:66> 'Args *' this
|     |-WhileStmt 0x562fedfaa4b0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x562fedfaa4d0 <line:799:16, col:61>
|     | | `-VarDecl 0x562fedfa9b48 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562fedfa9d28 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562fedfa9cf8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562fedfa9ce0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562fedfa9cc0 <col:29, col:61> 'String' (CXXTemporary 0x562fedfa9cc0)
|     | |           `-CXXMemberCallExpr 0x562fedfa9c50 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562fedfa9bc0 <col:29> '<bound member function type>' ->find 0x562fedf99f48
|     | |             | `-CXXThisExpr 0x562fedfa9bb0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562fedfa9c88 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfa9bf0 <col:34> 'const char *' lvalue ParmVar 0x562fedf85e58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562fedfa9ca0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfa9c10 <col:43> 'int' lvalue ParmVar 0x562fedf85ed8 'flags' 'int'
|     | |             `-DeclRefExpr 0x562fedfa9c30 <col:50> 'Args::Slot *' lvalue Var 0x562fedfa96b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562fedfa9de0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562fedfa9dc8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562fedfa9da8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562fedfa9d78 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|     | |       `-ImplicitCastExpr 0x562fedfa9d60 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562fedfa9d40 <col:23> 'String' lvalue Var 0x562fedfa9b48 'str' 'String'
|     | `-CompoundStmt 0x562fedfaa488 <col:64, line:803:9>
|     |   |-CallExpr 0x562fedfaa210 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x562fedfa9e08 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|     |   | | `-CXXThisExpr 0x562fedfa9df8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x562fedfaa1d0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x562fedfa9e38 <col:23> 'T *' lvalue Var 0x562fedfa9838 's' 'T *'
|     |   | | `-CallExpr 0x562fedfaa190 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x562fedfaa020 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x562fedfaa068 <col:56> 'P' lvalue ParmVar 0x562fedf85f50 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x562fedfaa088 <col:64> 'String' lvalue Var 0x562fedfa9b48 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x562fedfaa138 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x562fedfaa0c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|     |   | |   | `-DeclRefExpr 0x562fedfaa0a8 <col:70> 'T *' lvalue Var 0x562fedfa9838 's' 'T *'
|     |   | |   `-UnaryOperator 0x562fedfaa178 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x562fedfaa168 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x562fedfaa1f0 <col:81> 'Args::Slot *' lvalue Var 0x562fedfa96b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562fedfaa3a8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562fedfaa240 <col:13> 'int' lvalue Var 0x562fedfa9748 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562fedfaa390 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562fedfaa370 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562fedfaa2d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562fedfaa2b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562fedfaa2a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562fedfaa260 <col:28> 'int' lvalue Var 0x562fedfa9748 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562fedfaa280 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562fedfaa358 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562fedfaa328 <col:49> 'bool' lvalue ->_read_status 0x562fede7d650
|     |   |         `-ImplicitCastExpr 0x562fedfaa308 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562fedfaa2f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562fedfaa458 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562fedfaa3c8 <col:13> 'int' lvalue ParmVar 0x562fedf85ed8 'flags' 'int'
|     |     `-UnaryOperator 0x562fedfaa440 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562fedfaa428 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fedfaa408 <col:23> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562fedfaa5e0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562fedfaa518 <col:9> 'bool' lvalue ->_read_status 0x562fede7d650
|       | `-ImplicitCastExpr 0x562fedfaa4f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562fedfaa4e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562fedfaa5c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562fedfaa5a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562fedfaa588 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562fedfaa548 <col:25> 'int' lvalue Var 0x562fedfa9748 'read_status' 'int'
|           `-IntegerLiteral 0x562fedfaa568 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562fedf86768 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x562fedf86200 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562fedf86278 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562fedf866c8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562fedf86338 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562fedf863b8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x562fedf86430 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x562fedf86580 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x562fedfab408 <col:87, line:821:5>
|     |-DeclStmt 0x562fedfaa6b0 <line:809:9, col:26>
|     | `-VarDecl 0x562fedfaa648 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562fedfaa780 <line:810:9, col:29>
|     | `-VarDecl 0x562fedfaa6e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562fedfaa768 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562fedfaa748 <col:28> 'int' 1
|     |-DeclStmt 0x562fedfaa9c8 <line:811:9, col:38>
|     | `-VarDecl 0x562fedfaa8b0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x562fedfaa9a0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562fedfaa928 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562fedfaa980 <col:29> 'Vector<T>' lvalue ParmVar 0x562fedf86580 'variable' 'Vector<T> &'
|     |-WhileStmt 0x562fedfab2b8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x562fedfab2d8 <line:812:16, col:61>
|     | | `-VarDecl 0x562fedfaa9f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562fedfaabd0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562fedfaaba0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562fedfaab88 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562fedfaab68 <col:29, col:61> 'String' (CXXTemporary 0x562fedfaab68)
|     | |           `-CXXMemberCallExpr 0x562fedfaaaf8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562fedfaaa68 <col:29> '<bound member function type>' ->find 0x562fedf99f48
|     | |             | `-CXXThisExpr 0x562fedfaaa58 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562fedfaab30 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfaaa98 <col:34> 'const char *' lvalue ParmVar 0x562fedf86338 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562fedfaab48 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562fedfaaab8 <col:43> 'int' lvalue ParmVar 0x562fedf863b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x562fedfaaad8 <col:50> 'Args::Slot *' lvalue Var 0x562fedfaa648 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562fedfaac88 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562fedfaac70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562fedfaac50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562fedfaac20 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562fedccaa48
|     | |       `-ImplicitCastExpr 0x562fedfaac08 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562fedfaabe8 <col:23> 'String' lvalue Var 0x562fedfaa9f0 'str' 'String'
|     | `-CompoundStmt 0x562fedfab280 <col:64, line:819:9>
|     |   |-DeclStmt 0x562fedfaad48 <line:813:13, col:23>
|     |   | `-VarDecl 0x562fedfaacb0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x562fedfaad28 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x562fedfaaec8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x562fedfaad70 <col:13> '<bound member function type>' ->postparse 0x562fedf9a158
|     |   | | `-CXXThisExpr 0x562fedfaad60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562fedfaae70 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562fedfaadc0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562fedfaada0 <col:23> 'P' lvalue ParmVar 0x562fedf86430 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562fedfaae08 <col:36> 'String' lvalue Var 0x562fedfaa9f0 'str' 'String'
|     |   | | |-DeclRefExpr 0x562fedfaae28 <col:41> 'T' lvalue Var 0x562fedfaacb0 'sx' 'T'
|     |   | | `-UnaryOperator 0x562fedfaae58 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562fedfaae48 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x562fedfaaea8 <col:53> 'Args::Slot *' lvalue Var 0x562fedfaa648 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x562fedfab020 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x562fedfaaf58 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x562fedfaaf28 <col:17> 'bool' lvalue ->_read_status 0x562fede7d650
|     |   | |   `-ImplicitCastExpr 0x562fedfaaf08 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x562fedfaaef8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x562fedfaaff8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x562fedfaaf90 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x562fedfaaf70 <col:17> 'Vector<T> *' lvalue Var 0x562fedfaa8b0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x562fedfaafd8 <col:30> 'T' lvalue Var 0x562fedfaacb0 'sx' 'T'
|     |   |-BinaryOperator 0x562fedfab1a0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562fedfab038 <col:13> 'int' lvalue Var 0x562fedfaa6e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562fedfab188 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562fedfab168 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562fedfab0d0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562fedfab0b0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562fedfab098 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562fedfab058 <col:28> 'int' lvalue Var 0x562fedfaa6e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562fedfab078 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562fedfab150 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562fedfab120 <col:49> 'bool' lvalue ->_read_status 0x562fede7d650
|     |   |         `-ImplicitCastExpr 0x562fedfab100 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562fedfab0f0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562fedfab250 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562fedfab1c0 <col:13> 'int' lvalue ParmVar 0x562fedf863b8 'flags' 'int'
|     |     `-UnaryOperator 0x562fedfab238 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562fedfab220 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fedfab200 <col:23> 'const int' lvalue Var 0x562fedf6e128 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562fedfab3e8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562fedfab320 <col:9> 'bool' lvalue ->_read_status 0x562fede7d650
|       | `-ImplicitCastExpr 0x562fedfab300 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562fedfab2f0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562fedfab3c8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562fedfab3a8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562fedfab390 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562fedfab350 <col:25> 'int' lvalue Var 0x562fedfaa6e0 'read_status' 'int'
|           `-IntegerLiteral 0x562fedfab370 <col:40> 'int' 1
|-AccessSpecDecl 0x562fedf867e0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x562fedf86808 prev 0x562fede82e88 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x562fedf86900 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x562fedf869f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x562fedfab440 <col:16, line:828:9>
| |-CXXDestructorDecl 0x562fedf86ae0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x562fedfab450 <col:25, line:830:9>
| |-CXXMethodDecl 0x562fedf86be0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x562fedf86c90 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x562fedf86d38 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562fedf86d38
| | `-ParmVarDecl 0x562fedf86e48 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x562fedf87608 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562fedf87608
|   `-ParmVarDecl 0x562fedf87718 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x562fedf86eb8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x562fedf87018 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x562fedf87210 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x562fedf870c0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x562fedf87138 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x562fedfab630 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x562fedf874c8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x562fedfab4a0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x562fedfab460 <col:20> 'void *' lvalue ParmVar 0x562fedf870c0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x562fedf87530 '_slot' 'char *'
| | | `-CXXNewExpr 0x562fedfab528 <col:32, col:45> 'char *' array Function 0x562fedaed278 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x562fedfab510 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x562fedfab4e0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x562fedf87138 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x562fedf87590 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x562fedfab5f0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x562fedfab5b0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x562fedf87138 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x562fedfab6b0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x562fedf87310 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x562fedf86ae0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x562fedfab738 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x562fedfab718 <line:840:13, col:22> 'void' array Function 0x562fedaed5d8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x562fedfab700 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x562fedfab6d0 <col:22> 'char *' lvalue ->_slot 0x562fedf87530
| |         `-CXXThisExpr 0x562fedfab6c0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x562fedf87410 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x562fedf86be0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x562fedfab928 <col:22, line:844:9>
| |   `-CallExpr 0x562fedfab890 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x562fedfab878 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x562fedfab858 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x562fedbf9498 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x562fedfab8c8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x562fedfab7a8 <col:20> 'void *' lvalue ->_ptr 0x562fedf874c8
| |     |   `-CXXThisExpr 0x562fedfab798 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x562fedfab8f8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x562fedfab8e0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x562fedfab7e8 <col:26> 'char *' lvalue ->_slot 0x562fedf87530
| |     |     `-CXXThisExpr 0x562fedfab7d8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x562fedfab910 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x562fedfab828 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x562fedf87590
| |         `-CXXThisExpr 0x562fedfab818 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x562fedf874c8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x562fedf87530 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x562fedf87590 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x562fedf87788 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562fedf87788
| | `-ParmVarDecl 0x562fedf87898 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x562fedf87938 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562fedf87938
|   `-ParmVarDecl 0x562fedf87a48 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x562fedf87be8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x562fedf87ab8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x562fedf87b58 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x562fedf87e80 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x562fedf88078 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x562fedf87f48 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x562fedf881f8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x562fedfab960 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x562fedfab940 <col:20> 'T *' lvalue ParmVar 0x562fedf87f48 'ptr' 'T *'
|   | `-CompoundStmt 0x562fedfab9b0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x562fedf88148 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x562fedf86be0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x562fedfabb60 <col:22, line:857:9>
|   |   `-CallExpr 0x562fedfabb30 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x562fedfab9c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x562fedcb1bc8 0x562fedc5bef8
|   |     |-CXXOperatorCallExpr 0x562fedfabac0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x562fedfaba50 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562fedebeb78 0x562fedebe798 0x562fedebe3c8 0x562fedebdfe8 0x562fedebdc08 0x562fedebd838
|   |     | `-MemberExpr 0x562fedfaba20 <col:29> 'T *' lvalue ->_ptr 0x562fedf881f8
|   |     |   `-CXXThisExpr 0x562fedfaba10 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x562fedfabb00 <col:35> 'T' lvalue ->_slot 0x562fedf88258
|   |       `-CXXThisExpr 0x562fedfabaf0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x562fedf881f8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x562fedf88258 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x562fedf882c0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x562fedf883c0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x562fedf88410 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedf883a0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x562fedf88380 <col:31> 'int' 48
|-FieldDecl 0x562fedf88438 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x562fedf88498 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x562fedf884f8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x562fedf88630 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x562fedf997f0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x562fedf99850 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x562fedf99900 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x562fedf99b28 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x562fedf99a30 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x562fedf99c78 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x562fedf99be8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x562fedf99f48 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x562fedf99d38 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x562fedf99db8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x562fedf99e60 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x562fedf9a158 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x562fedf9a010 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x562fedf9a088 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x562fedf9a228 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x562fedf9a378 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x562fedf9a2e0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x562fedf9a708 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x562fedf9a438 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x562fedf9a4b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x562fedf9a560 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x562fedf9a618 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x562fedf9a930 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x562fedf9a7e0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x562fedf9a858 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x562fedf9ac48 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x562fedf9a9e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x562fedf9aba8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x562fedf9aab8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedcba8f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562fedcbaa08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x562fedcbaa98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x562fedcbab68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x562fedcbac50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedcbae68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562fedcbad10 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbb018 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562fedcbaf20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562fedcbb160 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562fedcbb0d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562fedcbb2a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562fedcbb218 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbb3f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562fedcbb360 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbb4b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x562fedcbb600 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x562fedcbb570 <col:28> col:31 'int'
|-CXXMethodDecl 0x562fedcbb6c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x562fedcbb810 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x562fedcbb780 <col:28> col:31 'int'
|-CXXMethodDecl 0x562fedcbb988 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x562fedcbb8c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbbad0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x562fedcbba40 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbbb98 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x562fedcbbd58 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562fedcbbc48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562fedcbbcc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbbfa8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562fedcbbe18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedcbbe90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562fedcbc058 <col:86> "" ""
|-CXXMethodDecl 0x562fedcbc2c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x562fedcbc138 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x562fedcbc1b0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbc478 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x562fedcbc388 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x562fedcbc628 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x562fedcbc530 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x562fedcbc8f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562fedcbc6e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x562fedcbc758 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562fedcbc7d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbcbd8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562fedcbc9c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x562fedcbca38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedcbcab0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562fedcbcc90 <col:115> "" ""
|-AccessSpecDecl 0x562fedcbcd00 <line:84:3, col:10> col:3 private
|-FieldDecl 0x562fedcbcd38 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedcbe250 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562fedcbe250
| `-ParmVarDecl 0x562fedcbe358 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x562fedcbe3f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562fedcbe3f8
| `-ParmVarDecl 0x562fedcbe508 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x562fedcf3b38 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562fedee5eb0 <col:7>
|-CXXConstructorDecl 0x562fedcf3c10 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562fedcf3c10
| `-ParmVarDecl 0x562fedcf3d28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x562fedcf3d98 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562fedcf3d98
| `-ParmVarDecl 0x562fedcf3ea8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x562fedeeb2c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562feded4a18 prev 0x562fedec96e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562feded4b10 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x562feded4c00 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x562feded4d28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x562feded4ea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x562feded5028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x562feded51a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x562fedee6018 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562fedee6888 <col:11>
|-CXXDestructorDecl 0x562fedee60f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562fedee6228 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562fedee6228
| `-ParmVarDecl 0x562fedee6338 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x562fedee63d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562fedee63d8
| `-ParmVarDecl 0x562fedee64e8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x562fedeebcb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x562fedeebdc8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x562fedeec048 <col:11>
|   `-ReturnStmt 0x562fedeec038 <col:11>
|     `-UnaryOperator 0x562fedeec020 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562fedeec010 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x562fedeebe38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562fedeebe38
  `-ParmVarDecl 0x562fedeebf48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562feded5210 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562feded5328 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x562feded53c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x562feded5430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x562feded5498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x562feded5500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x562feded5560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x562feded5620 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x562feded5680 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x562feded56e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x562fedee5f28 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x562feded53c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x562fedee6898 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x562fedee68f0 <col:12>
|-CXXConstructorDecl 0x562fedee6558 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562fedee6558
| `-ParmVarDecl 0x562fedee6668 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x562fedee6708 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562fedee6708
| `-ParmVarDecl 0x562fedee6818 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x562fedeeb3a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedec2df0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562fedec2f08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x562fedec2f98 <col:16, col:22> col:16 public
|-EnumDecl 0x562fedec2fc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x562fedec30c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x562fedec31a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedec30a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x562fedec3080 <col:21> 'int' 28
| `-EnumConstantDecl 0x562fedec3150 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x562fedec31b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedec3130 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x562fedec3110 <col:22> 'int' 64
|-CXXMethodDecl 0x562fedec34f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562fedec31e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedec3260 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x562fedec32d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedec3350 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec35b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562fedec37b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x562fedec3630 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x562fedec36a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec3868 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562fedec39c8 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x562fedec38d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec3a70 <col:72> warn_unused_result ""
|-TypedefDecl 0x562fedec3dd0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x562fedec3d60 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x562fedec3d00 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x562fedec3cc0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x562fed99a4e0 'void'
|       |-PointerType 0x562fedc43190 'unsigned char *'
|       | `-BuiltinType 0x562fed99a5e0 'unsigned char'
|       |-TypedefType 0x562feda3f320 'size_t' sugar
|       | |-Typedef 0x562feda0abe0 'size_t'
|       | `-BuiltinType 0x562fed99a640 'unsigned long'
|       `-PointerType 0x562fed99ace0 'void *'
|         `-BuiltinType 0x562fed99a4e0 'void'
|-CXXMethodDecl 0x562fedec4248 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x562fedec3e40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x562fedec3eb8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedec3f50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x562fedec3fd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x562fededeec0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x562fededeea8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x562fededee70 <col:58> 'int' 0
| |-ParmVarDecl 0x562fedec4050 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x562fededeee8 <col:76> 'int' 0
| |-ParmVarDecl 0x562fedec40d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x562fededef08 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x562fedec4318 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x562fedec4398 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562fedec4458 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x562fedec44f8 <col:20>
| `-OptimizeNoneAttr 0x562fedec4550 <col:30>
|-CXXMethodDecl 0x562fedec45c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x562fedec4668 <col:20>
| `-OptimizeNoneAttr 0x562fedec46c0 <col:30>
|-CXXMethodDecl 0x562fedec4738 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x562fedec47d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x562fedec4888 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x562fedec4928 <col:20>
| |-OptimizeNoneAttr 0x562fedec4980 <col:30>
| `-WarnUnusedResultAttr 0x562fedec49a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x562fedec4a00 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x562fedec4aa0 <col:20>
| `-OptimizeNoneAttr 0x562fedec4af8 <col:30>
|-CXXMethodDecl 0x562fedec4b48 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x562fedec4be8 <col:20>
| `-OptimizeNoneAttr 0x562fedec4c40 <col:30>
|-CXXMethodDecl 0x562fedec4c88 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x562fedec4d28 <col:20>
| `-OptimizeNoneAttr 0x562fedec4d80 <col:30>
|-CXXMethodDecl 0x562fedec4dc8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec4e88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec4f50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562fedec5018 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562fedec50d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec51f8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x562fededefd0 <col:54, line:99:5>
|   `-ReturnStmt 0x562fededefc0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x562fededefa8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x562fededef78 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562feded5a18
|         `-CXXThisExpr 0x562fededef68 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x562fedec5398 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x562fedec52a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x562fededf080 <col:67, line:103:5>
|   `-BinaryOperator 0x562fededf060 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562fededeff8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562feded5a18
|     | `-CXXThisExpr 0x562fededefe8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562fededf048 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x562fededf028 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x562fedec52a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x562fedec5490 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x562fededf100 <col:33, line:107:5>
|   `-ReturnStmt 0x562fededf0f0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x562fededf0d8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x562fededf0a8 <col:16> 'void *' lvalue ->_destructor_argument 0x562feded5a80
|         `-CXXThisExpr 0x562fededf098 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562fedec5550 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x562fededf730 <col:25, line:113:5>
|   |-ParenExpr 0x562fededf478 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x562fededf448 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x562fededf1b8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562fededf190 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x562fededf158 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x562fededf128 <col:24> '<bound member function type>' ->shared 0x562fedec45c8
|   |   |       `-ImplicitCastExpr 0x562fededf178 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x562fededf118 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562fededf218 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fededf1f8 <col:42> 'int' 0
|   |   `-CallExpr 0x562fededf3a8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x562fededf390 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fededf370 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fededf3e8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fededf288 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x562fededf400 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fededf2b0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fededf418 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fededf2e8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x562fededf430 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fededf358 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fededf340 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fededf308 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x562fededf678 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x562fededf4a8 <col:2> 'unsigned char *' lvalue ->_head 0x562feded5820
|   | | `-CXXThisExpr 0x562fededf498 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x562fededf660 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x562fededf640 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x562fededf4e8 <col:10> 'unsigned char *' lvalue ->_data 0x562feded5888
|   |     | `-CXXThisExpr 0x562fededf4d8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x562fededf628 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x562fededf608 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x562fededf528 <col:18> 'unsigned char *' lvalue ->_tail 0x562feded58f0
|   |         | `-CXXThisExpr 0x562fededf518 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x562fededf5f0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x562fededf5d0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x562fededf568 <col:26> 'unsigned char *' lvalue ->_end 0x562feded5958
|   |             | `-CXXThisExpr 0x562fededf558 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x562fededf5b8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x562fededf598 <col:33> 'int' 0
|   `-BinaryOperator 0x562fededf710 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562fededf6a8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562feded5a18
|     | `-CXXThisExpr 0x562fededf698 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562fededf6f8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x562fededf6d8 <col:16> 'int' 0
|-CXXMethodDecl 0x562fedec5690 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562fedec5600 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec5738 <col:20>
| |-OptimizeNoneAttr 0x562fedec5790 <col:30>
| `-WarnUnusedResultAttr 0x562fedec57b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562fedec5888 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562fedec57f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec5930 <col:20>
| |-OptimizeNoneAttr 0x562fedec5988 <col:30>
| `-WarnUnusedResultAttr 0x562fedec59b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x562fedec5ae8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562fedec59f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec5b90 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x562fedec5c90 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x562fedec5c00 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec5d38 <col:20>
| `-OptimizeNoneAttr 0x562fedec5d90 <col:30>
|-CXXMethodDecl 0x562fedec5e58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562fedec5dc8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec5f00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x562fedec6000 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562fedec5f70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562fedec60a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562fedec61a8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x562fedec6118 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec6250 <col:20>
| `-OptimizeNoneAttr 0x562fedec62a8 <col:30>
|-CXXMethodDecl 0x562fedec6438 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x562fedec62e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x562fedec6360 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x562fededef28 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x562fedec64e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x562fedec66e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562fedec6560 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x562fedec65d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedec68f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562fedec67a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562fedec6820 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedec6b08 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x562fedec69b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x562fedec6a38 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x562fededef38 <col:39> 'int' 0
|-CXXMethodDecl 0x562fedec6bd8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x562fedec6ca0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562fedec6d68 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x562fedec6e28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec6ef0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x562fedec7038 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x562fedec6fa8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x562fedec7208 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562fedec70f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x562fedec7170 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedec72d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x562fedec7398 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x562fedec7438 <col:20>
| `-OptimizeNoneAttr 0x562fedec7490 <col:30>
|-CXXMethodDecl 0x562fedec74e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562fedec7580 <col:20>
| `-OptimizeNoneAttr 0x562fedec75d8 <col:30>
|-CXXMethodDecl 0x562fedec7628 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x562fedec76e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec77b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x562fedec7850 <col:20>
| `-OptimizeNoneAttr 0x562fedec78a8 <col:30>
|-CXXMethodDecl 0x562fedec79f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562fedec78e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x562fedec7960 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedec7b48 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x562fedec7ab8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedec7c20 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x562fedec7ce0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x562fedec7d80 <col:20>
| `-OptimizeNoneAttr 0x562fedec7dd8 <col:30>
|-CXXMethodDecl 0x562fedec7e28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562fedec7ec8 <col:20>
| `-OptimizeNoneAttr 0x562fedec7f20 <col:30>
|-CXXMethodDecl 0x562fedec7f70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x562fedec8038 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x562fedec80d8 <col:20>
| `-OptimizeNoneAttr 0x562fedec8130 <col:30>
|-CXXMethodDecl 0x562fedec8178 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x562fedec8298 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x562fedec8408 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x562fedec8348 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x562fedec84f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x562fedec8598 <col:20>
| `-OptimizeNoneAttr 0x562fedec85f0 <col:30>
|-CXXMethodDecl 0x562fedec8640 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x562fedec8700 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562fedec8938 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x562fedec87b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x562fedec8828 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec89e8 <col:20>
| `-OptimizeNoneAttr 0x562fedec8a40 <col:30>
|-CXXMethodDecl 0x562fedec8ae8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x562fedec8b88 <col:20>
| `-OptimizeNoneAttr 0x562fedec8be0 <col:30>
|-CXXMethodDecl 0x562fedec8c30 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x562fedec8cd0 <col:20>
| `-OptimizeNoneAttr 0x562fedec8d28 <col:30>
|-CXXMethodDecl 0x562fedec8d70 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x562fedec8e10 <col:20>
| `-OptimizeNoneAttr 0x562fedec8e68 <col:30>
|-CXXMethodDecl 0x562fedec8f68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x562fedec8ea0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x562fedec9010 <col:20>
| `-OptimizeNoneAttr 0x562fedec9068 <col:30>
|-CXXMethodDecl 0x562fedec9228 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x562fedec90a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x562fedec9118 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedec92d8 <col:20>
| `-OptimizeNoneAttr 0x562fedec9330 <col:30>
|-CXXMethodDecl 0x562fedec93d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x562fedec94f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x562fedec9618 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x562fedec96b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x562fedec96e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x562fedec9808 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x562fedec98a8 <col:20>
| `-OptimizeNoneAttr 0x562fedec9900 <col:30>
|-CXXMethodDecl 0x562fedec99a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x562fedec9a48 <col:20>
| `-OptimizeNoneAttr 0x562fedec9aa0 <col:30>
|-AccessSpecDecl 0x562fedec9ac8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x562fedec9af0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x562fedec9bf0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x562fedec9c40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedec9bd0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x562fedec9bb0 <col:14> 'int' 48
|-CXXMethodDecl 0x562fedec9ca8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x562fedec9d48 <col:20>
| `-OptimizeNoneAttr 0x562fedec9da0 <col:30>
|-CXXMethodDecl 0x562fedec9e18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x562fedec9eb8 <col:20>
| `-OptimizeNoneAttr 0x562fedec9f10 <col:30>
|-CXXMethodDecl 0x562fedec9fd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x562fedec9f48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x562fedeca178 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x562fedeca318 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x562fedeca228 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x562fedeca3c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x562fedeca4c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca870 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca4a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedeca480 <col:9> 'int' 0
| |-EnumConstantDecl 0x562fedeca550 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca888 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca530 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x562fedeca510 <col:14> 'int' 1
| |-EnumConstantDecl 0x562fedeca5e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca8a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca5c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x562fedeca5a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x562fedeca670 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca8b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca650 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x562fedeca630 <col:14> 'int' 3
| |-EnumConstantDecl 0x562fedeca700 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca8d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca6e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x562fedeca6c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x562fedeca790 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562fedeca8e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedeca770 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x562fedeca750 <col:13> 'int' 5
| `-EnumConstantDecl 0x562fedeca820 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x562fedeca900 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedeca800 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x562fedeca7e0 <col:14> 'int' 6
|-CXXMethodDecl 0x562fedeca968 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x562fedecaa08 <col:20>
| `-OptimizeNoneAttr 0x562fedecaa60 <col:30>
|-CXXMethodDecl 0x562fedecab58 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x562fedecaa98 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x562fedecac00 <col:20>
| `-OptimizeNoneAttr 0x562fedecac58 <col:30>
|-CXXMethodDecl 0x562fedecacc8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x562fedecadf0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x562fedecaf68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x562fedecaea0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x562fedecb030 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x562fedecb0f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x562fedecb238 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x562fedecb1a8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x562fedecb2e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x562fedecb3e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562fedecb5e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedecb3c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedecb3a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x562fedecb470 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562fedecb5f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedecb450 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x562fedecb430 <col:45> 'int' 4
| |-EnumConstantDecl 0x562fedecb500 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562fedecb610 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedecb4e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedecb4c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x562fedecb590 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x562fedecb628 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedecb570 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x562fedecb550 <col:47> 'int' 16
|-CXXMethodDecl 0x562fedecb688 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x562fedecb7f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x562fedecb738 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x562fedecb8a0 <col:20>
| `-OptimizeNoneAttr 0x562fedecb8f8 <col:30>
|-CXXMethodDecl 0x562fedecb948 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x562fededf850 <col:18, col:36>
|   `-ReturnStmt 0x562fededf840 <col:20, col:33>
|     `-ImplicitCastExpr 0x562fededf828 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x562fededf808 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x562fededf7d8 <col:27> '<bound member function type>' ->xanno 0x562fedec99a8
|           `-CXXThisExpr 0x562fededf7c8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x562fedecba40 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x562fededf960 <col:30, col:48>
|   `-ReturnStmt 0x562fededf950 <col:32, col:45>
|     `-ImplicitCastExpr 0x562fededf938 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x562fededf918 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x562fededf8e8 <col:39> '<bound member function type>' ->xanno 0x562fedec9808
|           `-CXXThisExpr 0x562fededf8d8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x562fedecbb28 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x562fededfaf8 <col:24, col:50>
|   `-ReturnStmt 0x562fededfae8 <col:26, col:47>
|     `-UnaryOperator 0x562fededfad0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562fededfab0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x562fededfa98 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562fededfa48 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x562feded4d28
|         |   `-CXXMemberCallExpr 0x562fededfa28 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x562fededf9f8 <col:34> '<bound member function type>' ->xanno 0x562fedec99a8
|         |       `-CXXThisExpr 0x562fededf9e8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x562fededfa78 <col:46> 'int' 0
|-CXXMethodDecl 0x562fedecbc30 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x562fededfcc8 <col:36, col:62>
|   `-ReturnStmt 0x562fededfcb8 <col:38, col:59>
|     `-UnaryOperator 0x562fededfca0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562fededfc80 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562fededfc68 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562fededfbe0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x562feded4d28
|         |   `-CXXMemberCallExpr 0x562fededfbc0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562fededfb90 <col:46> '<bound member function type>' ->xanno 0x562fedec9808
|         |       `-CXXThisExpr 0x562fededfb80 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562fededfc10 <col:58> 'int' 0
|-CXXMethodDecl 0x562fedecbd48 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x562fededfe60 <col:26, col:53>
|   `-ReturnStmt 0x562fededfe50 <col:28, col:50>
|     `-UnaryOperator 0x562fededfe38 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562fededfe18 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x562fededfe00 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562fededfdb0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x562feded5028
|         |   `-CXXMemberCallExpr 0x562fededfd90 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x562fededfd60 <col:36> '<bound member function type>' ->xanno 0x562fedec99a8
|         |       `-CXXThisExpr 0x562fededfd50 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x562fededfde0 <col:49> 'int' 0
|-CXXMethodDecl 0x562fedecbe68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x562fedee0038 <col:38, col:65>
|   `-ReturnStmt 0x562fedee0028 <col:40, col:62>
|     `-UnaryOperator 0x562fedee0010 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562fededfff0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x562fededffd8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562fededff48 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x562feded5028
|         |   `-CXXMemberCallExpr 0x562fededff28 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562fededfef8 <col:48> '<bound member function type>' ->xanno 0x562fedec9808
|         |       `-CXXThisExpr 0x562fededfee8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562fededff78 <col:61> 'int' 0
|-CXXMethodDecl 0x562fedecc018 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x562fedecbf20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x562fedee0708 <col:34, line:463:5>
|   |-ParenExpr 0x562fedee0550 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x562fedee0520 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee0188 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee0158 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee00a8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee0090 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee0050 <col:23> 'int' lvalue ParmVar 0x562fedecbf20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee0070 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee0138 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee0108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee00c8 <col:33> 'int' lvalue ParmVar 0x562fedecbf20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562fedee0120 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562fedee00e8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562fedee01e8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee01c8 <col:56> 'int' 0
|   |   `-CallExpr 0x562fedee0480 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562fedee0468 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee0448 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee04c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee02d8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562fedee04d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee0308 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee04f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee0340 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x562fedee0508 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee0430 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee0418 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee03d8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x562fedee06f8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x562fedee06e0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x562fedee06c0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562fedee0690 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562fedee0640 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x562feded4d28
|         |   `-CXXMemberCallExpr 0x562fedee0620 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562fedee05f0 <col:9> '<bound member function type>' ->xanno 0x562fedec9808
|         |       `-CXXThisExpr 0x562fedee05e0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x562fedee06a8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x562fedee0670 <col:21> 'int' lvalue ParmVar 0x562fedecbf20 'i' 'int'
|-CXXMethodDecl 0x562fedecc268 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x562fedecc0d8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x562fedecc150 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x562fedee0d98 <col:40, line:472:5>
|   |-ParenExpr 0x562fedee0bb0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x562fedee0b80 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee0860 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee0830 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee0780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee0768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee0728 <col:23> 'int' lvalue ParmVar 0x562fedecc0d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee0748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee0810 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee07e0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee07a0 <col:33> 'int' lvalue ParmVar 0x562fedecc0d8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562fedee07f8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562fedee07c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562fedee08c0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee08a0 <col:56> 'int' 0
|   |   `-CallExpr 0x562fedee0ae0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562fedee0ac8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee0aa8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee0b20 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee0930 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562fedee0b38 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee0960 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee0b50 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee0998 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x562fedee0b68 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee0a90 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee0a78 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee0a38 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x562fedee0d78 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x562fedee0d20 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x562fedee0cf0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562fedee0ca0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x562feded4d28
|     | |   `-CXXMemberCallExpr 0x562fedee0c80 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x562fedee0c50 <col:2> '<bound member function type>' ->xanno 0x562fedec99a8
|     | |       `-CXXThisExpr 0x562fedee0c40 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x562fedee0d08 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fedee0cd0 <col:14> 'int' lvalue ParmVar 0x562fedecc0d8 'i' 'int'
|     `-ImplicitCastExpr 0x562fedee0d60 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x562fedee0d40 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x562fedecc150 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x562fedecc428 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x562fedecc330 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562fedee1518 <col:36, line:485:5>
|   |-ParenExpr 0x562fedee1280 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee1250 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee0f30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee0f00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee0e10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee0df8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee0db8 <col:23> 'int' lvalue ParmVar 0x562fedecc330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee0dd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee0ee0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee0ec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee0e30 <col:33> 'int' lvalue ParmVar 0x562fedecc330 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee0ea8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee0e90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee0e50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee0e70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562fedee0f90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee0f70 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee11b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee1198 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee1178 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee11f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee1000 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562fedee1208 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee1038 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee1220 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee1070 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x562fedee1238 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee1160 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee1148 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee1108 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x562fedee1508 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x562fedee14f0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x562fedee14d8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee14a8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x562fedee1448 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee1418 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee1390 <col:61, col:70> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee1370 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee1340 <col:61> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee1330 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee1430 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee13c0 <col:74> 'int' lvalue ParmVar 0x562fedecc330 'i' 'int'
|-CXXMethodDecl 0x562fedecc678 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x562fedecc4e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562fedecc560 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x562fedee1c68 <col:42, line:500:5>
|   |-ParenExpr 0x562fedee1a00 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee19d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee16b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee1680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee1590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee1578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee1538 <col:23> 'int' lvalue ParmVar 0x562fedecc4e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee1558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee1660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee1648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee15b0 <col:33> 'int' lvalue ParmVar 0x562fedecc4e8 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee1628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee1610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee15d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee15f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562fedee1710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee16f0 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee1930 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee1918 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee18f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee1970 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee1780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562fedee1988 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee17b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee19a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee17f0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x562fedee19b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee18e0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee18c8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee1888 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x562fedee1c48 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x562fedee1bf8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562fedee1bc8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x562fedee1b70 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562fedee1b40 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562fedee1af0 <col:48, col:57> 'char [48]' lvalue ->c 0x562feded4c00
|     |     |   `-CXXMemberCallExpr 0x562fedee1ad0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562fedee1aa0 <col:48> '<bound member function type>' ->xanno 0x562fedec99a8
|     |     |       `-CXXThisExpr 0x562fedee1a90 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562fedee1b58 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562fedee1b20 <col:61> 'int' lvalue ParmVar 0x562fedecc4e8 'i' 'int'
|     `-ImplicitCastExpr 0x562fedee1c30 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x562fedee1c10 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x562fedecc560 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x562fedecc838 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x562fedecc740 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562fedee23c8 <col:35, line:513:5>
|   |-ParenExpr 0x562fedee20d8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee20a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee1e00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee1dd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee1ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee1cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee1c88 <col:23> 'int' lvalue ParmVar 0x562fedecc740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee1ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee1db0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee1d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee1d00 <col:33> 'int' lvalue ParmVar 0x562fedecc740 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee1d78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee1d60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee1d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee1d40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562fedee1e60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee1e40 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee2008 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee1ff0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee1fd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee2048 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee1ed0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562fedee2060 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee1f08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee2078 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee1f40 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x562fedee2090 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee1fb8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee1fa0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee1f60 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x562fedee23b8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x562fedee23a0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x562fedee2388 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee2358 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x562fedee22d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee22a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee2250 <col:60, col:69> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee2230 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee2200 <col:60> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee21f0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee22b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee2280 <col:73> 'int' lvalue ParmVar 0x562fedecc740 'i' 'int'
|-CXXMethodDecl 0x562fedecca88 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x562fedecc8f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562fedecc970 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x562fedee2ae8 <col:41, line:528:5>
|   |-ParenExpr 0x562fedee2870 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee2840 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee2560 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee2530 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee2440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee2428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee23e8 <col:23> 'int' lvalue ParmVar 0x562fedecc8f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee2408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee2510 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee24f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee2460 <col:33> 'int' lvalue ParmVar 0x562fedecc8f8 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee24d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee24c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee2480 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee24a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562fedee25c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee25a0 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee27a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee2788 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee2768 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee27e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee2630 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562fedee27f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee2668 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee2810 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee26a0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x562fedee2828 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee2750 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee2738 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee26f8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x562fedee2ac8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x562fedee2a78 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562fedee2a48 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x562fedee29f0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562fedee29b0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562fedee2960 <col:47, col:56> 'char [48]' lvalue ->c 0x562feded4c00
|     |     |   `-CXXMemberCallExpr 0x562fedee2940 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562fedee2910 <col:47> '<bound member function type>' ->xanno 0x562fedec99a8
|     |     |       `-CXXThisExpr 0x562fedee2900 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562fedee29c8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562fedee2990 <col:60> 'int' lvalue ParmVar 0x562fedecc8f8 'i' 'int'
|     `-ImplicitCastExpr 0x562fedee2ab0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x562fedee2a90 <col:65> 'int16_t':'short' lvalue ParmVar 0x562fedecc970 'x' 'int16_t':'short'
|-CXXMethodDecl 0x562fedeccc48 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x562fedeccb50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562fedee31b8 <col:36, line:541:5>
|   |-ParenExpr 0x562fedee2f58 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee2f28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee2c80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee2c50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee2b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee2b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee2b08 <col:23> 'int' lvalue ParmVar 0x562fedeccb50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee2b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee2c30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee2c18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee2b80 <col:33> 'int' lvalue ParmVar 0x562fedeccb50 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee2bf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee2be0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee2ba0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee2bc0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562fedee2ce0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee2cc0 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee2e88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee2e70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee2e50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee2ec8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee2d50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562fedee2ee0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee2d88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee2ef8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee2dc0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x562fedee2f10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee2e38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee2e20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee2de0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x562fedee31a8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x562fedee3190 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x562fedee3178 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee3148 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x562fedee30f0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee30c0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee3070 <col:61, col:70> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee3050 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee3020 <col:61> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee3010 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee30d8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee30a0 <col:74> 'int' lvalue ParmVar 0x562fedeccb50 'i' 'int'
|-CXXMethodDecl 0x562fedecce18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x562fedeccd08 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x562fedeccd80 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562fedeccec8 <col:20>
| `-OptimizeNoneAttr 0x562fedeccf20 <col:30>
|-CXXMethodDecl 0x562fedecd058 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x562fedeccf60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562fedee3888 <col:35, line:562:5>
|   |-ParenExpr 0x562fedee3628 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee35f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee3350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee3320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee3230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee3218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee31d8 <col:23> 'int' lvalue ParmVar 0x562fedeccf60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee31f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee3300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee32e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee3250 <col:33> 'int' lvalue ParmVar 0x562fedeccf60 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee32c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee32b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee3270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee3290 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562fedee33b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee3390 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee3558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee3540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee3520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee3598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee3420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562fedee35b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee3458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee35c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee3490 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x562fedee35e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee3508 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee34f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee34b0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x562fedee3878 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x562fedee3860 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x562fedee3848 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee3818 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x562fedee37c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee3790 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee3740 <col:60, col:69> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee3720 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee36f0 <col:60> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee36e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee37a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee3770 <col:73> 'int' lvalue ParmVar 0x562fedeccf60 'i' 'int'
|-CXXMethodDecl 0x562fedecd268 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x562fedecd118 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562fedecd190 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x562fedee3f68 <col:41, line:577:5>
|   |-ParenExpr 0x562fedee3cf8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee3cc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee3a20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee39f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee3900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee38e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee38a8 <col:23> 'int' lvalue ParmVar 0x562fedecd118 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee38c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee39d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee39b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee3920 <col:33> 'int' lvalue ParmVar 0x562fedecd118 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee3998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee3980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee3940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee3960 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562fedee3a80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee3a60 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee3c28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee3c10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee3bf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee3c68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee3af0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562fedee3c80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee3b28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee3c98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee3b60 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x562fedee3cb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee3bd8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee3bc0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee3b80 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x562fedee3f48 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x562fedee3ef8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562fedee3ec8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x562fedee3e68 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562fedee3e38 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562fedee3de8 <col:47, col:56> 'char [48]' lvalue ->c 0x562feded4c00
|     |     |   `-CXXMemberCallExpr 0x562fedee3dc8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562fedee3d98 <col:47> '<bound member function type>' ->xanno 0x562fedec99a8
|     |     |       `-CXXThisExpr 0x562fedee3d88 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562fedee3e50 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562fedee3e18 <col:60> 'int' lvalue ParmVar 0x562fedecd118 'i' 'int'
|     `-ImplicitCastExpr 0x562fedee3f30 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x562fedee3f10 <col:65> 'int32_t':'int' lvalue ParmVar 0x562fedecd190 'x' 'int32_t':'int'
|-CXXMethodDecl 0x562fedecd428 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x562fedecd330 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562fedee4698 <col:36, line:591:5>
|   |-ParenExpr 0x562fedee43d8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee43a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee4100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee40d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee3fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee3fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee3f88 <col:23> 'int' lvalue ParmVar 0x562fedecd330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee3fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee40b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee4098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee4000 <col:33> 'int' lvalue ParmVar 0x562fedecd330 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee4078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee4060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee4020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee4040 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562fedee4160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee4140 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee4308 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee42f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee42d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee4348 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee41d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562fedee4360 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee4208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee4378 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee4240 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x562fedee4390 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee42b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee42a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee4260 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x562fedee4688 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x562fedee4670 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x562fedee4658 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee4628 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x562fedee45a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee4570 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee4520 <col:61, col:70> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee4500 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee44d0 <col:61> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee44c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee4588 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee4550 <col:74> 'int' lvalue ParmVar 0x562fedecd330 'i' 'int'
|-CXXMethodDecl 0x562fedecd678 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x562fedecd4e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562fedecd560 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x562fedee4d78 <col:42, line:606:5>
|   |-ParenExpr 0x562fedee4b08 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x562fedee4ad8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee4830 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee4800 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee4710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee46f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee46b8 <col:23> 'int' lvalue ParmVar 0x562fedecd4e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee46d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee47e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562fedee47c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee4730 <col:33> 'int' lvalue ParmVar 0x562fedecd4e8 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee47a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee4790 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee4750 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562fedee4770 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562fedee4890 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee4870 <col:60> 'int' 0
|   |   `-CallExpr 0x562fedee4a38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562fedee4a20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee4a00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee4a78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee4900 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562fedee4a90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee4938 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee4aa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee4970 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x562fedee4ac0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee49e8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee49d0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee4990 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x562fedee4d58 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x562fedee4d08 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562fedee4cd8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x562fedee4c78 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562fedee4c48 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562fedee4bf8 <col:48, col:57> 'char [48]' lvalue ->c 0x562feded4c00
|     |     |   `-CXXMemberCallExpr 0x562fedee4bd8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562fedee4ba8 <col:48> '<bound member function type>' ->xanno 0x562fedec99a8
|     |     |       `-CXXThisExpr 0x562fedee4b98 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562fedee4c60 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562fedee4c28 <col:61> 'int' lvalue ParmVar 0x562fedecd4e8 'i' 'int'
|     `-ImplicitCastExpr 0x562fedee4d40 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x562fedee4d20 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x562fedecd560 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x562fedecd810 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x562fedecd740 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x562fedee55e8 <col:33, line:620:5>
|   |-ParenExpr 0x562fedee5360 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x562fedee5330 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee4f80 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee4f50 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee4df0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee4dd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee4d98 <col:23> 'int' lvalue ParmVar 0x562fedecd740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee4db8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee4f30 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562fedee4f18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee4e10 <col:33> 'int' lvalue ParmVar 0x562fedecd740 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee4ef8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee4ee0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee4e30 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562fedee4eb8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562fedee4ea0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562fedee4e68 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562fedee4fe0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee4fc0 <col:79> 'int' 0
|   |   `-CallExpr 0x562fedee5290 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562fedee5278 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee5258 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee52d0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee50c8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562fedee52e8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee5110 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee5300 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee5148 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x562fedee5318 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee5240 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee5228 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee51e8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x562fedee55d8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x562fedee55c0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x562fedee55a8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562fedee5578 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x562fedee54f0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x562fedee54c0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562fedee5470 <col:67, col:76> 'char const[48]' lvalue ->c 0x562feded4c00
|             |   `-CXXMemberCallExpr 0x562fedee5450 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562fedee5420 <col:67> '<bound member function type>' ->xanno 0x562fedec9808
|             |       `-CXXThisExpr 0x562fedee5410 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562fedee54d8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562fedee54a0 <col:80> 'int' lvalue ParmVar 0x562fedecd740 'i' 'int'
|-CXXMethodDecl 0x562fedecda28 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x562fedecd8d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562fedecd950 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x562fedee5e10 <col:45, line:635:5>
|   |-ParenExpr 0x562fedee5b58 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x562fedee5b28 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562fedee57f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562fedee57c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562fedee5660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562fedee5648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562fedee5608 <col:23> 'int' lvalue ParmVar 0x562fedecd8d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562fedee5628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562fedee57a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562fedee5788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562fedee5680 <col:33> 'int' lvalue ParmVar 0x562fedecd8d0 'i' 'int'
|   |   |     `-BinaryOperator 0x562fedee5768 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562fedee5750 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562fedee56a0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562fedec9bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562fedee5728 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562fedee5710 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562fedee56d8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562fedee5850 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562fedee5830 <col:79> 'int' 0
|   |   `-CallExpr 0x562fedee5a88 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562fedee5a70 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562fedee5a50 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562feda36080 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562fedee5ac8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee58c0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562fedee5ae0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562fedee5908 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562fedee5af8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562fedee5940 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x562fedee5b10 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562fedee5a38 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562fedee5a20 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562fedee59d8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x562fedee5df0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x562fedee5d58 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562fedee5d28 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x562fedee5cc8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562fedee5c98 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562fedee5c48 <col:54, col:63> 'char [48]' lvalue ->c 0x562feded4c00
|     |     |   `-CXXMemberCallExpr 0x562fedee5c28 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562fedee5bf8 <col:54> '<bound member function type>' ->xanno 0x562fedec99a8
|     |     |       `-CXXThisExpr 0x562fedee5be8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562fedee5cb0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562fedee5c78 <col:67> 'int' lvalue ParmVar 0x562fedecd8d0 'i' 'int'
|     `-CXXConstCastExpr 0x562fedee5dc0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x562fedee5da8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x562fedee5d70 <col:91> 'const void *' lvalue ParmVar 0x562fedecd950 'x' 'const void *'
|-CXXMethodDecl 0x562fedecdaf8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x562fedee5e98 <col:34, line:640:5>
|   `-ReturnStmt 0x562fedee5e88 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x562fedee5e70 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x562fedee5e40 <col:16> 'Packet *' lvalue ->_data_packet 0x562feded57b8
|         `-CXXThisExpr 0x562fedee5e30 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562fedecdc38 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x562fedecdba8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562fededef58 <col:46> 'bool' true
|-CXXMethodDecl 0x562fedecddb8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x562fedecdcf0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x562fedecde60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x562fedece610 <line:660:22> "" ""
| |-EnumConstantDecl 0x562fedecdf60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece680 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedecdf40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x562fedecdf20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562fedec30c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562fedecdff0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece698 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedecdfd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x562fedecdfb0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562fedec3150 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562fedece080 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece6b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece060 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedece040 <col:21> 'int' 0
| |-EnumConstantDecl 0x562fedece110 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece6c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece0f0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x562fedece0d0 <col:19> 'int' 16
| |-EnumConstantDecl 0x562fedece1a0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece6e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece180 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x562fedece160 <col:21> 'int' 16
| |-EnumConstantDecl 0x562fedece230 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece6f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece210 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562fedece1f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x562fedece2c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece710 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece2a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x562fedece280 <col:19> 'int' EnumConstant 0x562fedece110 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562fedece350 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece728 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece330 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x562fedece310 <col:19> 'int' EnumConstant 0x562fedece230 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562fedece420 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece740 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece400 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x562fedece3e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562fedece3a0 <col:23> 'int' EnumConstant 0x562fedece350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562fedece3c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x562fedece4f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562fedece758 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedece4d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x562fedece4b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562fedece470 <col:23> 'int' EnumConstant 0x562fedece350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562fedece490 <col:40> 'int' 4
| `-EnumConstantDecl 0x562fedece5c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x562fedece770 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562fedece5a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x562fedece580 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x562fedece540 <col:23> 'int' EnumConstant 0x562fedece350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x562fedece560 <col:40> 'int' 8
|-CXXMethodDecl 0x562fedece7b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x562fedece850 <col:68> "" ""
|-CXXMethodDecl 0x562fedece8e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x562fedece988 <col:45> "" ""
|-CXXMethodDecl 0x562fedecea20 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562fedeceac0 <col:57> "" ""
|-CXXMethodDecl 0x562fedeceb58 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x562fedecebf8 <col:45> "" ""
|-CXXMethodDecl 0x562fedecec90 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562fedeced30 <col:57> "" ""
|-CXXMethodDecl 0x562fedecedc0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x562fedecee60 <col:51> "" ""
|-CXXMethodDecl 0x562fedeceef0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562fedecef90 <col:63> "" ""
|-CXXMethodDecl 0x562fedecf020 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x562fedecf0c0 <col:53> "" ""
|-CXXMethodDecl 0x562fedecf150 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562fedecf1f0 <col:65> "" ""
|-CXXMethodDecl 0x562fedecf308 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562fedecf278 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x562fedecf3b0 <col:61> "" ""
|-CXXMethodDecl 0x562fedecf548 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562fedecf438 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x562fedecf4b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562fedecf5f8 <col:67> "" ""
|-CXXMethodDecl 0x562fedecf710 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562fedecf680 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562fedecf7b8 <col:63> "" ""
|-CXXMethodDecl 0x562fedecf950 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562fedecf840 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562fedecf8b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562fedecfa00 <col:69> "" ""
|-CXXMethodDecl 0x562fedecfb18 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562fedecfa88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562fedecfbc0 <col:63> "" ""
|-CXXMethodDecl 0x562feded27d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562feded26c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562feded2740 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562feded2888 <col:69> "" ""
|-CXXMethodDecl 0x562feded29a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x562feded2910 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x562feded2a48 <col:62> "" ""
|-CXXMethodDecl 0x562feded2be0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562feded2ad0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562feded2b48 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x562feded2c90 <col:68> "" ""
|-CXXMethodDecl 0x562feded2da8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x562feded2d18 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562feded2e50 <col:63> "" ""
|-CXXMethodDecl 0x562feded2fe8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x562feded2ed8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562feded2f50 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x562feded3098 <col:69> "" ""
|-CXXMethodDecl 0x562feded3128 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562feded31c8 <col:64> "" ""
|-CXXMethodDecl 0x562feded3258 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x562feded32f8 <col:52> "" ""
|-CXXMethodDecl 0x562feded3388 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562feded3428 <col:67> "" ""
|-CXXMethodDecl 0x562feded34b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x562feded3558 <col:55> "" ""
|-CXXMethodDecl 0x562feded3670 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562feded35e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562feded3718 <col:58> "" ""
|-CXXMethodDecl 0x562feded38b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562feded37a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x562feded3818 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562feded3960 <col:62> "" ""
|-CXXMethodDecl 0x562feded3a78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x562feded39e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562feded3b20 <col:58> "" ""
|-CXXMethodDecl 0x562feded3cb8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x562feded3ba8 <col:33> col:36 'int'
| |-ParmVarDecl 0x562feded3c20 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x562feded3d68 <col:62> "" ""
|-CXXMethodDecl 0x562feded3e80 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562feded3df0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x562feded3f28 <col:60> "" ""
|-CXXMethodDecl 0x562feded40c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562feded3fb0 <col:34> col:37 'int'
| |-ParmVarDecl 0x562feded4028 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562feded4170 <col:64> "" ""
|-CXXMethodDecl 0x562feded4288 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x562feded41f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562feded4330 <col:58> "" ""
|-CXXMethodDecl 0x562feded44c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562feded43b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x562feded4430 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x562feded4578 <col:62> "" ""
|-CXXMethodDecl 0x562feded4690 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562feded4600 <col:33> col:36 'int'
| `-DeprecatedAttr 0x562feded4738 <col:59> "" ""
|-CXXMethodDecl 0x562feded48d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562feded47c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x562feded4838 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562feded4980 <col:63> "" ""
|-AccessSpecDecl 0x562feded49f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x562feded4a18 prev 0x562fedec96e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562feded4b10 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x562feded4c00 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x562feded4d28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x562feded4ea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x562feded5028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x562feded51a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x562fedee6018 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562fedee6888 <col:11>
| |-CXXDestructorDecl 0x562fedee60f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x562fedee6228 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562fedee6228
| | `-ParmVarDecl 0x562fedee6338 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x562fedee63d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562fedee63d8
| | `-ParmVarDecl 0x562fedee64e8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x562fedeebcb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562fedeebdc8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x562fedeec048 <col:11>
| |   `-ReturnStmt 0x562fedeec038 <col:11>
| |     `-UnaryOperator 0x562fedeec020 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562fedeec010 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x562fedeebe38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562fedeebe38
|   `-ParmVarDecl 0x562fedeebf48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x562feded5210 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562feded5328 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x562feded53c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x562feded5430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x562feded5498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x562feded5500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x562feded5560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x562feded5620 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x562feded5680 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x562feded56e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x562fedee5f28 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x562feded53c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x562fedee6898 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x562fedee68f0 <col:12>
| |-CXXConstructorDecl 0x562fedee6558 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562fedee6558
| | `-ParmVarDecl 0x562fedee6668 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x562fedee6708 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562fedee6708
| | `-ParmVarDecl 0x562fedee6818 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x562fedeeb3a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x562feded5758 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x562feded57b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x562feded5820 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x562feded5888 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x562feded58f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x562feded5958 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x562feded59b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x562feded5a18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x562feded5a80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x562feded5b08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x562feded5758 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x562fedee5ec0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562feded59b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x562fedee6900 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x562fedee6960 <col:21, line:755:5>
|-CXXConstructorDecl 0x562feded5ca8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x562feded5be8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x562feded5da0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x562feded5f88 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x562feded5e90 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x562feded6258 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x562feded6040 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562feded60b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562feded6130 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562feded6478 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x562feded6328 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x562feded63a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x562fededea98 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x562feded6538 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x562feded65b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x562feded6628 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x562fededebf0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562fededeb60 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fededed38 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562fededeca8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x562fededee30 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedee9410 prev 0x562fedec2d40 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x562fedee9548 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x562fedee95d8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x562fedee9680 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x562fedee9720 <col:20>
| `-OptimizeNoneAttr 0x562fedee9778 <col:30>
|-CXXMethodDecl 0x562fedee97c8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x562fedee9868 <col:20>
| `-OptimizeNoneAttr 0x562fedee98c0 <col:30>
|-CXXMethodDecl 0x562fedee9910 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562fedee99d8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562fedee9aa0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562fedee9bb8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x562fedee9c80 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x562fedee9d20 <col:20>
| `-OptimizeNoneAttr 0x562fedee9d78 <col:30>
|-CXXMethodDecl 0x562fedee9de8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x562fedee9e88 <col:20>
| `-OptimizeNoneAttr 0x562fedee9ee0 <col:30>
|-CXXMethodDecl 0x562fedee9f88 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x562fedeea028 <col:20>
| `-OptimizeNoneAttr 0x562fedeea080 <col:30>
|-CXXMethodDecl 0x562fedeea0d0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562fedeea1e8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x562fedeea308 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x562fedeea428 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x562fedeea4f0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x562fedeea590 <col:62> "" ""
|-AccessSpecDecl 0x562fedeea600 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x562fedeea660 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x562fedeeb258 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x562fedeeb480 <col:29, col:31>
|-CXXMethodDecl 0x562fedeea728 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x562fedeea868 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x562fedeea7d8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x562fedeea960 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x562fedeeb490 <col:23, col:25>
|-CXXMethodDecl 0x562fedeeab18 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x562fedeeaa50 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x562fedeeade8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562fedeeabd0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562fedeeac48 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562fedeeacc0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562fedeeaf78 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x562fedeeaeb0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x562fedeeb070 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x562fedeeb0d8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x562fedeeb0d8
  `-ParmVarDecl 0x562fedeeb1e8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedfb5cc0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562fedfb5dd8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x562fedfb5e68 <col:16, col:22> col:16 public
|-EnumDecl 0x562fedfb5e90 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x562fedfb5f90 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562fedfb61e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfb5f70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562fedfb5f50 <col:21> 'int' 0
| |-EnumConstantDecl 0x562fedfb6020 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562fedfb61f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfb6000 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x562fedfb5fe0 <col:24> 'int' 22
| |-EnumConstantDecl 0x562fedfb60b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562fedfb6210 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfb6090 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x562fedfb6070 <col:24> 'int' 34
| |-EnumConstantDecl 0x562fedfb6140 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562fedfb6228 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562fedfb6120 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x562fedfb6100 <col:25> 'int' 95
| `-EnumConstantDecl 0x562fedfb6190 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x562fedfb7ba0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562fedfb7fd8 <col:7>
|-CXXConstructorDecl 0x562fedfb7ca8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x562fedfb7ca8
| `-ParmVarDecl 0x562fedfb7db8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x562fedfb7e58 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562fedfb7f68 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x562fee0137f0 <col:7>
`-CXXDestructorDecl 0x562fedfba118 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562fedfb6258 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x562fedfb63b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x562fedfb6448 <col:32, col:38> col:32 public
|-TypedefDecl 0x562fedfb6480 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x562fedaef5d0 'uint32_t' sugar
|   |-Typedef 0x562feda034c8 'uint32_t'
|   `-TypedefType 0x562fed9dc5a0 '__uint32_t' sugar
|     |-Typedef 0x562fed9dc198 '__uint32_t'
|     `-BuiltinType 0x562fed99a620 'unsigned int'
|-CXXConstructorDecl 0x562fedfb65c8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x562fedfb64f0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x562fedfb7aa8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x562fedfb7fe8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562fedfb7360 'base' 'int'
| | `-ImplicitCastExpr 0x562fedfb7b48 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562fedfb7b08 <col:16> 'int' lvalue ParmVar 0x562fedfb64f0 'b' 'int'
| `-CompoundStmt 0x562fedfb8058 <col:19, line:1046:5>
|-CXXMethodDecl 0x562fedfb6ac0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x562fedfb6690 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x562fedfb6710 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x562fedfb6788 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x562fedfb6808 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x562fedfb68c8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x562fedfb6948 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x562fedfb6f18 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x562fedfb6b90 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x562fedfb6e78 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x562fedfb6c38 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x562fedfb6cd8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x562fedfb6d50 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562fedfb7ac8 <col:82> 'const ArgContext' lvalue Var 0x562fedfabb88 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562fedfb8f88 <col:94, line:1067:5>
| |   |-DeclStmt 0x562fedfb81e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x562fedfb8078 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x562fedfb81a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x562fedfb8408 <line:1055:9, col:91>
| |   | `-VarDecl 0x562fedfb8218 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x562fedfb83e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x562fedfb83c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x562fedfb8370 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x562fedfb8350 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x562fedfb82f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x562fedfb82a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x562fedfb82d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x562fedfb8338 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x562fedfb8318 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x562fedfb83a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x562fedfb8568 <line:1056:9, col:27>
| |   | `-VarDecl 0x562fedfb8500 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x562fedfb89b0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x562fedfb88e0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x562fedfb8860 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562fedeb99f8 0x562fedd02fd8 0x562fedd02cb0 0x562fedcf4490 0x562fedcf4140 0x562fedcf3a30 0x562fedcc63a0 0x562fedc52860
| |   | | |-CallExpr 0x562fedfb87a0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x562fedfb8590 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x562fedfb8640 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562fedfb8610 <col:19, col:23> '<bound member function type>' .begin 0x562fedce3698
| |   | | | |   `-DeclRefExpr 0x562fedfb85f0 <col:19> 'const String' lvalue ParmVar 0x562fedfb6c38 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x562fedfb86b0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562fedfb8680 <col:32, col:36> '<bound member function type>' .end 0x562fedce38b0
| |   | | | |   `-DeclRefExpr 0x562fedfb8660 <col:32> 'const String' lvalue ParmVar 0x562fedfb6c38 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x562fedfb86d0 <col:43> 'const bool' lvalue Var 0x562fedfb8078 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x562fedfb8738 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x562fedfb8718 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x562fedfb8760 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x562fedfb8500 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x562fedfb8780 <col:73> 'const int' lvalue Var 0x562fedfb8218 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x562fedfb8840 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x562fedfb8810 <col:16, col:20> '<bound member function type>' .end 0x562fedce38b0
| |   | |     `-DeclRefExpr 0x562fedfb87f0 <col:16> 'const String' lvalue ParmVar 0x562fedfb6c38 'str' 'const String &'
| |   | `-BinaryOperator 0x562fedfb8990 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x562fedfb8928 <col:13> 'int' lvalue ->status 0x562fedfb73c8
| |   |   | `-CXXThisExpr 0x562fedfb8918 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x562fedfb8978 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x562fedfb8958 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb6020 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x562fedfb8c00 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x562fedfb8ae8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x562fedfb8ad0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x562fedfb8ab8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x562fedfb89d8 <col:13> 'int' lvalue ->status 0x562fedfb73c8
| |   | | |     `-CXXThisExpr 0x562fedfb89c8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x562fedfb8a98 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x562fedfb8a68 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x562fedfb8a18 <col:23> 'int' lvalue ->status 0x562fedfb73c8
| |   | |   |   `-CXXThisExpr 0x562fedfb8a08 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x562fedfb8a80 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x562fedfb8a48 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x562fedfb8be0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x562fedfb8b80 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x562fedfb8b28 <col:13, col:18> '<bound member function type>' .error 0x562fede7cc60
| |   |   | | `-DeclRefExpr 0x562fedfb8b08 <col:13> 'const ArgContext' lvalue ParmVar 0x562fedfb6d50 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x562fedfb8ba8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x562fedfb8b58 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x562fedfb8bd0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x562fedfb8bc0 <col:20> 'bool' false
| |   |-DeclStmt 0x562fedfb8dd8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x562fedfb8d80 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x562fedfb8d10 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x562fedfb8f38 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x562fedfb8df0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x562fedc86828
| |   | |-DeclRefExpr 0x562fedfb8e38 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x562fedfb8500 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x562fedfb8f08 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x562fedfb8e80 <col:64> 'V' lvalue ParmVar 0x562fedfb6cd8 'result' 'V &'
| |   `-ReturnStmt 0x562fedfb8f78 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x562fedfb8f68 <col:16> 'bool' true
| `-CXXMethodDecl 0x562fee016f78 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x562fee016d50 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x562fee016e28 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x562fee016e90 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x562fee01dd60 <col:94, line:1067:5>
|     |-DeclStmt 0x562fee017788 <line:1054:9, col:64>
|     | `-VarDecl 0x562fee0175a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x562fee017718 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x562fee0176e8 <col:36, col:55> 'const bool' lvalue Var 0x562fedc76798 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x562fee01c9b8 <line:1055:9, col:91>
|     | `-VarDecl 0x562fee01c7f0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x562fee01c938 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x562fee01c920 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x562fee01c900 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x562fee01c8e0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x562fee01c8c0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x562fee01c888 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x562fee01c868 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x562fedfb82d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x562fee01c8a8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x562fedfb8318 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x562fedfb83a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x562fee01cb50 <line:1056:9, col:27>
|     | `-VarDecl 0x562fee01cae8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x562fee01cfd8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x562fee01cf80 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x562fee01ce38 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x562fee01ce08 <col:13> '<bound member function type>' ->parse 0x562fedfb6ac0
|     | | | | `-CXXThisExpr 0x562fee01cdf8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x562fee01cc98 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x562fee01cc68 <col:19, col:23> '<bound member function type>' .begin 0x562fedce3698
|     | | | |   `-DeclRefExpr 0x562fee01cc48 <col:19> 'const String' lvalue ParmVar 0x562fee016d50 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x562fee01cd08 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x562fee01ccd8 <col:32, col:36> '<bound member function type>' .end 0x562fedce38b0
|     | | | |   `-DeclRefExpr 0x562fee01ccb8 <col:32> 'const String' lvalue ParmVar 0x562fee016d50 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x562fee01cea8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x562fee01ce88 <col:43> 'const bool' lvalue Var 0x562fee0175a8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x562fee01cd90 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x562fee01cd78 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x562fee01cd58 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x562fee01cec0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x562fee01cdb8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x562fee01cae8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x562fee01cef8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x562fee01ced8 <col:73> 'const int' lvalue Var 0x562fee01c7f0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x562fee01cf60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x562fee01cf30 <col:16, col:20> '<bound member function type>' .end 0x562fedce38b0
|     | |     `-DeclRefExpr 0x562fee01cf10 <col:16> 'const String' lvalue ParmVar 0x562fee016d50 'str' 'const String &'
|     | `-BinaryOperator 0x562fee01cfb8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x562fedfb8928 <col:13> 'int' lvalue ->status 0x562fedfb73c8
|     |   | `-CXXThisExpr 0x562fedfb8918 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x562fee01cfa0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x562fedfb8958 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb6020 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x562fee01d150 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x562fee01d070 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x562fee01d058 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x562fee01d040 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x562fedfb89d8 <col:13> 'int' lvalue ->status 0x562fedfb73c8
|     | | |     `-CXXThisExpr 0x562fedfb89c8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x562fee01d020 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x562fee01cff0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x562fedfb8a18 <col:23> 'int' lvalue ->status 0x562fedfb73c8
|     | |   |   `-CXXThisExpr 0x562fedfb8a08 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x562fee01d008 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x562fedfb8a48 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x562fee01d130 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x562fee01d0e0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x562fee01d0b0 <col:13, col:18> '<bound member function type>' .error 0x562fede7cc60
|     |   | | `-DeclRefExpr 0x562fee01d090 <col:13> 'const ArgContext' lvalue ParmVar 0x562fee016e90 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x562fee01d108 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x562fedfb8b58 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x562fee01d120 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x562fedfb8bc0 <col:20> 'bool' false
|     |-DeclStmt 0x562fee01d698 <line:1064:9, col:64>
|     | `-TypedefDecl 0x562fee01d640 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x562fee01d5f0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x562fee01d5d0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x562fee01d560 'type'
|     |       `-ElaboratedType 0x562fee01d510 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x562fee01d4f0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x562fedc768f0 'unsigned_type'
|     |           `-BuiltinType 0x562fed99a620 'unsigned int'
|     |-CallExpr 0x562fee01dcf0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x562fee01dcd8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fee01dc58 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x562fee01db38 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x562fedc86828 'extract_integer')
|     | |-ImplicitCastExpr 0x562fee01dd38 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x562fee01dd20 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x562fee01d6f8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x562fee01cae8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x562fee01d7c8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x562fee01d778 <col:64> 'int':'int' lvalue ParmVar 0x562fee016e28 'result' 'int &'
|     `-ReturnStmt 0x562fee01dd50 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x562fedfb8f68 <col:16> 'bool' true
|-FunctionTemplateDecl 0x562fedfb72d8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x562fedfb6f88 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x562fedfb7238 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x562fedfb7038 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x562fedfb70d8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x562fedfb7150 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562fedfb7ae8 <col:71> 'const ArgContext' lvalue Var 0x562fedfabb88 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562fedfb9738 <col:83, line:1083:5>
| |   |-DeclStmt 0x562fedfb9050 <line:1071:9, col:12>
| |   | `-VarDecl 0x562fedfb8fe8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x562fedfb9710 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x562fedfb9318 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x562fedfb91a0 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x562fedfb9168 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x562fedfb90b0 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x562fedfb9108 <col:31> 'const String' lvalue ParmVar 0x562fedfb7038 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x562fedfb9128 <col:36> 'V' lvalue Var 0x562fedfb8fe8 'x' 'V'
| |     | |   `-DeclRefExpr 0x562fedfb9148 <col:39> 'const ArgContext' lvalue ParmVar 0x562fedfb7150 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x562fedfb92f8 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x562fedfb92d8 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x562fedfb92c0 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x562fedfb92a8 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x562fedfb91c8 <col:17> 'int' lvalue ->status 0x562fedfb73c8
| |     |     |     `-CXXThisExpr 0x562fedfb91b8 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x562fedfb9288 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x562fedfb9258 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x562fedfb9208 <col:27> 'int' lvalue ->status 0x562fedfb73c8
| |     |       |   `-CXXThisExpr 0x562fedfb91f8 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x562fedfb9270 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x562fedfb9238 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x562fedfb9348 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x562fedfb9338 <col:20> 'bool' false
| |     `-IfStmt 0x562fedfb96e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x562fedfb93e8 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x562fedfb93b8 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x562fedfb9368 <col:18> 'int' lvalue ->status 0x562fedfb73c8
| |       | |   `-CXXThisExpr 0x562fedfb9358 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x562fedfb93d0 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x562fedfb9398 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x562fedfb9628 <col:42, line:1079:9>
| |       | |-CallExpr 0x562fedfb95d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x562fedfb9418 <line:1076:13> '<bound member function type>' ->range_error 0x562fedfb79d8
| |       | | | `-CXXThisExpr 0x562fedfb9408 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x562fedfb9448 <col:25> 'const ArgContext' lvalue ParmVar 0x562fedfb7150 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x562fedfb9530 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x562fedfb95a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x562fedfb9588 <col:43> 'V' lvalue Var 0x562fedfb8fe8 'x' 'V'
| |       | `-ReturnStmt 0x562fedfb9618 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x562fedfb9608 <col:20> 'bool' false
| |       `-CompoundStmt 0x562fedfb96c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x562fedfb9688 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x562fedfb9648 <col:13> 'V' lvalue ParmVar 0x562fedfb70d8 'result' 'V &'
| |         | `-DeclRefExpr 0x562fedfb9668 <col:22> 'V' lvalue Var 0x562fedfb8fe8 'x' 'V'
| |         `-ReturnStmt 0x562fedfb96b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x562fedfb96a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x562fee016938 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x562fee016710 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x562fee0167e8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x562fee016850 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x562fee017588 <col:83, line:1083:5>
|     |-DeclStmt 0x562fee016bc0 <line:1071:9, col:12>
|     | `-VarDecl 0x562fee016b58 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x562fee017560 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x562fee0171f0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x562fee017118 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x562fee0170e0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x562fee017098 <col:14> '<bound member function type>' ->parse_saturating 0x562fee016f78
|       | |   | `-CXXThisExpr 0x562fee017088 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x562fee016c30 <col:31> 'const String' lvalue ParmVar 0x562fee016710 'str' 'const String &'
|       | |   |-DeclRefExpr 0x562fee016c50 <col:36> 'int':'int' lvalue Var 0x562fee016b58 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x562fee016c70 <col:39> 'const ArgContext' lvalue ParmVar 0x562fee016850 'args' 'const ArgContext &'
|       | `-ParenExpr 0x562fee0171d0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x562fee0171b0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x562fee017198 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x562fee017180 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x562fedfb91c8 <col:17> 'int' lvalue ->status 0x562fedfb73c8
|       |     |     `-CXXThisExpr 0x562fedfb91b8 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x562fee017160 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x562fee017130 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x562fedfb9208 <col:27> 'int' lvalue ->status 0x562fedfb73c8
|       |       |   `-CXXThisExpr 0x562fedfb91f8 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x562fee017148 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x562fedfb9238 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x562fee017210 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x562fedfb9338 <col:20> 'bool' false
|       `-IfStmt 0x562fee017538 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x562fee017250 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x562fee017220 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x562fedfb9368 <col:18> 'int' lvalue ->status 0x562fedfb73c8
|         | |   `-CXXThisExpr 0x562fedfb9358 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x562fee017238 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x562fedfb9398 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562fedfb60b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x562fee017470 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x562fee0173e0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x562fedfb9418 <line:1076:13> '<bound member function type>' ->range_error 0x562fedfb79d8
|         | | | `-CXXThisExpr 0x562fedfb9408 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x562fee017270 <col:25> 'const ArgContext' lvalue ParmVar 0x562fee016850 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x562fee017448 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x562fee017418 <col:31, col:50> 'const bool' lvalue Var 0x562fedc76798 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x562fee0173b8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x562fee0173a0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x562fee017388 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x562fee017368 <col:43> 'int':'int' lvalue Var 0x562fee016b58 'x' 'int':'int'
|         | `-ReturnStmt 0x562fee017460 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x562fedfb9608 <col:20> 'bool' false
|         `-CompoundStmt 0x562fee017518 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x562fee0174e8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x562fee017490 <col:13> 'int':'int' lvalue ParmVar 0x562fee0167e8 'result' 'int &'
|           | `-ImplicitCastExpr 0x562fee0174d0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x562fee0174b0 <col:22> 'int':'int' lvalue Var 0x562fee016b58 'x' 'int':'int'
|           `-ReturnStmt 0x562fee017508 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x562fedfb96a8 <col:20> 'bool' true
|-FieldDecl 0x562fedfb7360 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x562fedfb73c8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x562fedfb7418 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x562fedfb76d0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x562fedfb7458 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x562fedfb74d8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x562fedfb7550 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x562fedfb75d0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x562fedfb79d8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x562fedfb77a0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x562fedfb7818 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x562fedfb78b0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x562fedfb9f98 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x562fedfb9f98
| `-ParmVarDecl 0x562fedfba0a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x562fedfba228 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562fedfba338 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x562fee013800 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562fee0137d0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x562fee0137a0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562fee013770 <col:7> 'IntArg' lvalue ParmVar 0x562fedfba338 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562fedfb7360 'base' 'int'
| | `-ImplicitCastExpr 0x562fee0138f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562fee0138c8 <col:7> 'int' xvalue .base 0x562fedfb7360
| |     `-CXXStaticCastExpr 0x562fee013898 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562fee013868 <col:7> 'IntArg' lvalue ParmVar 0x562fedfba338 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562fedfb73c8 'status' 'int'
| | `-ImplicitCastExpr 0x562fee0139c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562fee013998 <col:7> 'int' xvalue .status 0x562fedfb73c8
| |     `-CXXStaticCastExpr 0x562fee013968 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562fee013938 <col:7> 'IntArg' lvalue ParmVar 0x562fedfba338 '' 'IntArg &&'
| `-CompoundStmt 0x562fee013a20 <col:7>
`-CXXDestructorDecl 0x562fee012960 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562fedfbe860 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x562fedfbeab8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x562fee012888 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x562fee012e00 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x562fee012de0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x562fee012e70 <col:19>
|-CXXConstructorDecl 0x562fee012a68 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x562fee012a68
| `-ParmVarDecl 0x562fee012b78 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x562fee012c18 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562fee012d28 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x562fee013a30 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562fee013750 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x562fee013720 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x562fee0136f0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x562fee012d28 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x562fee013aa0 <col:19>
`-CXXDestructorDecl 0x562fee012eb0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
