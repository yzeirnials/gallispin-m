
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca2bd98 prev 0x55860ca23538 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860ca2be90 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55860ca2bf20 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55860ca2bf98 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55860ca2c058 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55860ca2c120 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55860ca2c298 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55860ca2c1d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55860ca2c340 <col:24>
| `-OptimizeNoneAttr 0x55860ca2c398 <col:34>
|-CXXMethodDecl 0x55860ca2c3e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55860ca2c698 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55860ca2c490 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55860ca2c508 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55860ca2c588 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55860ca2c750 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55860ca2c788 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55860ca2c7f0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55860ca2c878 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55860ca2cb98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55860ca2c930 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55860ca2c9a8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55860ca2ca20 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55860ca2caa0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55860ca2ccb0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55860ca34628 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55860ca34628
| `-ParmVarDecl 0x55860ca34738 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55860ca347d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55860ca347d8
| `-ParmVarDecl 0x55860ca348e8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55860cb058e0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca1edb0 prev 0x55860ca1eb30 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860ca1eea8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55860ca1ef38 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55860ca1ef98 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55860ca1f088 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55860ca1f188 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55860ca1f358 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55860ca1f208 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55860ca1f280 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55860ca1f4e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55860ca1f420 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55860ca1f590 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55860ca1f6c8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55860ca1f600 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55860ca1f868 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55860ca1f7a8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55860ca1fa08 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55860ca1f948 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55860ca1fab0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55860ca1fbb0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55860ca1fc90 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca1fb90 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55860ca1fb70 <col:26> 'int' 1
| `-EnumConstantDecl 0x55860ca1fc40 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55860ca1fca8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ca1fc20 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55860ca1fc00 <col:44> 'int' 2
|-CXXMethodDecl 0x55860ca1fdf0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55860ca1fcd8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55860ca1fd58 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55860ca1ff48 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55860ca1feb8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55860ca20188 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55860ca20008 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55860ca20080 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55860ca20238 <col:20>
| `-OptimizeNoneAttr 0x55860ca20290 <col:30>
|-CXXMethodDecl 0x55860ca20398 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55860ca202d0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55860ca20440 <col:20>
| `-OptimizeNoneAttr 0x55860ca20498 <col:30>
|-CXXMethodDecl 0x55860ca204e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55860ca205b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55860ca206c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55860ca20750 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55860ca207d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55860ca20860 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55860ca208e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55860ca20978 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55860ca20a38 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55860ca20ac0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55860ca20b48 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55860ca20bd0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55860ca20c58 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55860ca20ce0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55860ca20d70 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55860ca20e30 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55860ca20ec0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55860ca21010 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55860ca20f78 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55860ca211a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55860ca210d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55860ca21450 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55860ca21258 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55860ca212d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55860ca21358 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55860ca21508 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55860ca21610 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860ca218a0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca215f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55860ca215d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55860ca216a0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860ca218b8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca21680 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55860ca21660 <col:32> 'int' 20
| |-EnumConstantDecl 0x55860ca21730 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860ca218d0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca21710 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55860ca216f0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55860ca217c0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860ca218e8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca217a0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55860ca21780 <col:35> 'int' 100
| `-EnumConstantDecl 0x55860ca21850 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55860ca21900 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ca21830 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55860ca21810 <col:32> 'int' 2000
|-CXXMethodDecl 0x55860ca21940 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55860ca21d80 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860ca21bf0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55860ca21c68 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca21e50 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55860ca21fd0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55860ca21f00 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca221d8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860ca22088 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55860ca22100 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca222d8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55860ca22378 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55860ca22440 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca224d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55860ca22700 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca224b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55860ca22490 <col:36> 'int' EnumConstant 0x55860ca22440 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca22520 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca22570 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca225c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca22610 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860ca22660 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55860ca226b0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55860ca227e8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55860ca22728 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55860ca228b0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55860ca22970 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55860ca22a30 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55860ca22af0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55860ca22c08 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55860ca22cd0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55860ca22e50 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55860ca22d80 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55860ca22f78 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55860ca23178 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55860ca23028 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55860ca230a8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55860ca30ac8 <col:54, line:127:5>
|   |-ParenExpr 0x55860ca30978 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55860ca30948 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca30638 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55860ca30610 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55860ca305f8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55860ca305e0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55860ca305b0 <col:31> 'Router *' lvalue ->_router 0x55860ca2e490
|   |   |         `-CXXThisExpr 0x55860ca305a0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55860ca30698 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca30678 <col:48> 'int' 0
|   |   `-CallExpr 0x55860ca308a8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55860ca30890 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca30870 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca308e8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca30708 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55860ca30900 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca30728 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55860ca30918 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca30760 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55860ca30930 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca30858 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca30840 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca307f8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55860ca30a10 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55860ca309a8 <col:9> 'Router *' lvalue ->_router 0x55860ca2e490
|   | | `-CXXThisExpr 0x55860ca30998 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55860ca309f8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860ca309d8 <col:19> 'Router *' lvalue ParmVar 0x55860ca23028 'r' 'Router *'
|   `-BinaryOperator 0x55860ca30aa8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55860ca30a40 <col:9> 'int' lvalue ->_eindex 0x55860ca2e4f8
|     | `-CXXThisExpr 0x55860ca30a30 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55860ca30a90 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca30a70 <col:19> 'int' lvalue ParmVar 0x55860ca230a8 'eindex' 'int'
|-CXXMethodDecl 0x55860ca23300 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55860ca23238 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55860ca233d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55860ca23498 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55860ca23538 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55860ca23788 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55860ca23600 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55860ca23680 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55860ca23838 <col:20>
| `-OptimizeNoneAttr 0x55860ca23890 <col:30>
|-CXXMethodDecl 0x55860ca23998 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55860ca238d0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55860ca23a40 <col:20>
| `-OptimizeNoneAttr 0x55860ca23a98 <col:30>
|-CXXMethodDecl 0x55860ca23b68 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55860ca23ad8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55860ca23c10 <col:20>
| `-OptimizeNoneAttr 0x55860ca23c68 <col:30>
|-CXXMethodDecl 0x55860ca23df8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55860ca23ca0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55860ca23d20 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55860ca23f88 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55860ca23ec0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55860ca240d8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55860ca24048 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55860ca24228 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55860ca24198 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55860ca24378 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55860ca242e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55860ca24638 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55860ca24430 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55860ca244b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55860ca24558 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55860ca24710 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55860ca247d0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55860ca24aa0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860ca24950 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55860ca249c8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca24bc8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55860ca24da0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55860ca24c80 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55860ca24d00 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55860ca24f88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55860ca24e68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55860ca24ee8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55860ca252f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55860ca25048 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860ca250c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860ca25140 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860ca300b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca30090 <col:106> 'int' 0
| `-ParmVarDecl 0x55860ca251b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca300e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca300c8 <col:126> 'int' 0
|-CXXMethodDecl 0x55860ca25698 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860ca253c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860ca25460 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860ca254e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55860ca25558 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca30120 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca30100 <col:114> 'int' 0
|-CXXMethodDecl 0x55860ca25a28 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860ca25770 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55860ca257e8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860ca25868 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55860ca30138 <col:96> 'int' 0
| `-ParmVarDecl 0x55860ca258e0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca30178 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca30158 <col:116> 'int' 0
|-CXXMethodDecl 0x55860ca25da8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55860ca25af8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55860ca25b70 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca25bf0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860ca301b0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca30190 <col:109> 'int' 0
| `-ParmVarDecl 0x55860ca25c68 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca301e8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca301c8 <col:129> 'int' 0
|-CXXMethodDecl 0x55860ca26128 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860ca25e78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55860ca25ef0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca25f70 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55860ca25fe8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca30220 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca30200 <col:117> 'int' 0
|-CXXMethodDecl 0x55860ca264b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860ca26200 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca26278 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca262f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55860ca30238 <col:99> 'int' 0
| `-ParmVarDecl 0x55860ca26370 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860ca30278 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860ca30258 <col:119> 'int' 0
|-CXXMethodDecl 0x55860ca268d8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55860ca26588 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55860ca26608 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55860ca26680 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca26700 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860ca302b0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca30290 <col:108> 'int' 0
| `-ParmVarDecl 0x55860ca26780 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55860ca302e8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55860ca302c8 <col:141> 'int' 0
|-CXXMethodDecl 0x55860ca26cf8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55860ca269b0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55860ca26a30 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55860ca26aa8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca26b28 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55860ca26ba8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55860ca30300 <col:121> 'int' 0
|-CXXMethodDecl 0x55860ca27128 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55860ca26dd8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55860ca26e58 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55860ca26ed0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca26f50 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55860ca30320 <col:98> 'int' 0
| `-ParmVarDecl 0x55860ca26fd0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55860ca30340 <col:123> 'int' 0
|-CXXMethodDecl 0x55860ca273f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55860ca27200 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860ca27280 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55860ca27300 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55860ca30360 <col:80> 'int' 0
|-EnumDecl 0x55860ca274a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55860ca275b0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860ca27840 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca27590 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55860ca27570 <col:42> 'int' 1
| |-EnumConstantDecl 0x55860ca27640 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860ca27858 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca27620 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55860ca27600 <col:40> 'int' 2
| |-EnumConstantDecl 0x55860ca276d0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860ca27870 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca276b0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55860ca27690 <col:44> 'int' 4
| |-EnumConstantDecl 0x55860ca27760 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860ca27888 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca27740 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55860ca27720 <col:36> 'int' 7
| `-EnumConstantDecl 0x55860ca277f0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55860ca278a0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ca277d0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55860ca277b0 <col:34> 'int' 6
|-CXXMethodDecl 0x55860ca27b58 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55860ca278c8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55860ca27968 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55860ca279e8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55860ca27a60 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55860ca30418 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55860ca30400 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55860ca303e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55860ca303c8 <col:98, col:105> 'String' (CXXTemporary 0x55860ca303c8)
|           `-CXXTemporaryObjectExpr 0x55860ca30390 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55860ca27df8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55860ca27c28 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55860ca27ca0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55860ca27d18 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55860ca304c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55860ca304b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55860ca30498 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55860ca30478 <col:94, col:101> 'String' (CXXTemporary 0x55860ca30478)
| |         `-CXXTemporaryObjectExpr 0x55860ca30440 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55860ca30cb0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55860ca30c28 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55860ca30bf8 <col:9> '<bound member function type>' ->add_task_handlers 0x55860ca27b58
|     | `-CXXThisExpr 0x55860ca30be8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55860ca30c68 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860ca30b68 <col:27> 'Task *' lvalue ParmVar 0x55860ca27c28 'task' 'Task *'
|     |-ImplicitCastExpr 0x55860ca30c80 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860ca30b88 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55860ca27ca0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55860ca30c98 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55860ca30ba8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55860ca277f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55860ca30bc8 <col:62> 'const String' lvalue ParmVar 0x55860ca27d18 'prefix' 'const String &'
|-CXXMethodDecl 0x55860ca28008 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55860ca27ec0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55860ca27f38 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55860ca30578 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55860ca30560 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55860ca30548 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55860ca30528 <col:70, col:77> 'String' (CXXTemporary 0x55860ca30528)
| |         `-CXXTemporaryObjectExpr 0x55860ca304f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55860ca30e88 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55860ca30e00 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55860ca30dd0 <col:9> '<bound member function type>' ->add_task_handlers 0x55860ca27b58
|     | `-CXXThisExpr 0x55860ca30dc0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55860ca30e40 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860ca30d40 <col:27> 'Task *' lvalue ParmVar 0x55860ca27ec0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55860ca30e58 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55860ca30d60 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55860ca30e70 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55860ca30d80 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55860ca277f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55860ca30da0 <col:57> 'const String' lvalue ParmVar 0x55860ca27f38 'prefix' 'const String &'
|-CXXMethodDecl 0x55860ca282e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55860ca280d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca28150 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca281c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55860ca28598 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55860ca283b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca28438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca284b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55860ca28888 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55860ca28668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca286e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca28760 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55860ca28b38 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55860ca28958 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca289d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca28a58 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55860ca28de8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55860ca28c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca28c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca28d08 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55860ca29098 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55860ca28eb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca28f38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca28fb0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55860ca29348 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55860ca29168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca291e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca29268 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55860ca29658 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55860ca29470 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca294f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca29570 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55860ca29938 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55860ca29728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca297a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca29850 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55860ca29c18 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55860ca29a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca29a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca29b30 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55860ca29e80 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55860ca29ce8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55860ca29d68 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55860ca29de0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55860ca2a128 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55860ca29f50 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55860ca29fd0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55860ca2a048 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55860ca2a3d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55860ca2a1f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca2a278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca2a2f8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55860ca2a688 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55860ca2a4a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca2a528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca2a5a0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55860ca2a938 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55860ca2a758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca2a7d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca2a850 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55860ca2ac08 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55860ca2aa08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca2aa88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860ca2ab28 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55860ca2af38 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55860ca2acd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860ca2ad58 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55860ca2add0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55860ca2ae48 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860ca30590 <col:93> 'bool' false
|-CXXMethodDecl 0x55860ca2b120 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860ca2b008 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55860ca2b088 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55860ca2b2f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860ca2b1e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55860ca2b260 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55860ca2b5d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55860ca2b3b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55860ca2b430 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55860ca2b4b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55860ca2b528 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca2b8c8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55860ca2b6a8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55860ca2b720 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55860ca2b7a0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55860ca2b818 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca2bb00 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55860ca2b9a0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55860ca2ba20 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55860ca2bce8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55860ca2bbc8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55860ca2bc48 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55860ca2bd98 prev 0x55860ca23538 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860ca2be90 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55860ca2bf20 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55860ca2bf98 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55860ca2c058 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55860ca2c120 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55860ca2c298 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55860ca2c1d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55860ca2c340 <col:24>
| | `-OptimizeNoneAttr 0x55860ca2c398 <col:34>
| |-CXXMethodDecl 0x55860ca2c3e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55860ca2c698 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55860ca2c490 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55860ca2c508 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55860ca2c588 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55860ca2c750 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55860ca2c788 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55860ca2c7f0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55860ca2c878 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55860ca2cb98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55860ca2c930 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55860ca2c9a8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55860ca2ca20 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55860ca2caa0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55860ca2ccb0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55860ca34628 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55860ca34628
| | `-ParmVarDecl 0x55860ca34738 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55860ca347d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55860ca347d8
| | `-ParmVarDecl 0x55860ca348e8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55860cb058e0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55860ca2cd28 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55860ca2cdc8 <col:38> "" ""
|-CXXMethodDecl 0x55860ca2ce58 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55860ca2cef8 <col:44> "" ""
|-AccessSpecDecl 0x55860ca2cf68 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55860ca2cf90 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55860ca2d090 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55860ca2d0e0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ca2d070 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55860ca2d050 <col:27> 'int' 4
|-FieldDecl 0x55860ca2d198 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55860ca2d348 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55860ca2d400 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55860ca2e490 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55860ca2e4f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55860ca2e648 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55860ca2e588 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55860ca2e7f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55860ca2e708 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55860ca2e9d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55860ca2e8b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55860ca2e938 <col:25> col:28 'int'
|-CXXMethodDecl 0x55860ca2ec80 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca2eaa0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55860ca2eb20 <col:28> col:31 'int'
| `-ParmVarDecl 0x55860ca2eb98 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55860ca2ed38 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55860ca2ee00 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55860ca2ee50 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55860ca2eea0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55860ca2f080 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55860ca2ef30 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55860ca2efa8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca2f328 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55860ca2f148 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55860ca2f1c8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55860ca2f240 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca2f548 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55860ca2f3f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55860ca2f478 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55860ca2f880 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55860ca2f608 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55860ca2f688 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55860ca2f700 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55860ca2f780 <col:57> col:60 'int'
|-CXXMethodDecl 0x55860ca2fa68 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860ca2f950 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55860ca2f9d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55860ca2fbb8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55860ca2fb28 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55860ca2ff38 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55860ca2fc78 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55860ca2fcf8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55860ca2fd70 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55860ca2fdf0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55860ca30050 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class B8B10
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _flag
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca37798 <../elements/radio/b8b10.hh:17:1, line:32:1> line:17:7 class B8B10 definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55860ca378f8 <col:1, col:7> col:7 implicit referenced class B8B10
|-AccessSpecDecl 0x55860ca37988 <line:18:1, col:7> col:1 public
|-CXXConstructorDecl 0x55860ca37a10 <line:19:3, col:9> col:3 B8B10 'void ()'
|-CXXDestructorDecl 0x55860ca37b00 <line:20:3, col:10> col:3 ~B8B10 'void ()' noexcept-unevaluated 0x55860ca37b00
| `-Overrides: [ 0x55860ca1f088 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55860ca37c30 <line:22:3, col:52> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55860ca204e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55860ca38750 <col:34, col:52>
|   `-ReturnStmt 0x55860ca38740 <col:36, col:43>
|     `-ImplicitCastExpr 0x55860ca38728 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55860ca38708 <col:43> 'const char [6]' lvalue "B8B10"
|-CXXMethodDecl 0x55860ca37cf8 <line:23:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55860ca205b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55860ca387b0 <col:34, col:54>
|   `-ReturnStmt 0x55860ca387a0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55860ca38788 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55860ca38768 <col:43> 'const char []' lvalue Var 0x55860ca20860 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55860ca37fd0 <line:24:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55860ca21d80 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55860ca37e80 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55860ca37ef8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca38128 <line:25:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55860ca21fd0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55860ca38090 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca38270 <line:27:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55860ca1f6c8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55860ca381e0 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55860ca38318 <line:29:1, col:8> col:1 private
|-FieldDecl 0x55860ca38358 <line:30:3, col:7> col:7 _flag 'int'
|-CXXConstructorDecl 0x55860ca383d8 <line:17:7> col:7 implicit B8B10 'void (const B8B10 &)' inline default_delete noexcept-unevaluated 0x55860ca383d8
| `-ParmVarDecl 0x55860ca384e8 <col:7> col:7 'const B8B10 &'
`-CXXMethodDecl 0x55860ca38588 <col:7> col:7 implicit operator= 'B8B10 &(const B8B10 &)' inline default_delete noexcept-unevaluated 0x55860ca38588
  `-ParmVarDecl 0x55860ca38698 <col:7> col:7 'const B8B10 &'

Layout: <CGRecordLayout
  LLVMType:%class.B8B10 = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.B8B10 = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca387c8 prev 0x55860ca1ebc0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860ca388c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55860ca38950 <col:22, col:28> col:22 public
|-EnumDecl 0x55860ca38978 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55860ca38a98 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38a78 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55860ca38a60 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55860ca38a40 <col:14> 'int' 999
| |-EnumConstantDecl 0x55860ca38b40 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38b20 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55860ca38b08 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55860ca38ae8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55860ca38bd0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38bb0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55860ca38b90 <col:17> 'int' 0
| |-EnumConstantDecl 0x55860ca38c60 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38c40 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55860ca38c20 <col:13> 'int' 1
| |-EnumConstantDecl 0x55860ca38cf0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38cd0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55860ca38cb0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55860ca38d80 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38d60 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55860ca38d40 <col:13> 'int' 3
| |-EnumConstantDecl 0x55860ca38e10 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38df0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55860ca38dd0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55860ca38ea0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38e80 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55860ca38e60 <col:14> 'int' 5
| |-EnumConstantDecl 0x55860ca38f30 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55860ca38f10 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55860ca38ef0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55860ca38fc0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55860ca38fa0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55860ca38f80 <col:13> 'int' 7
|-VarDecl 0x55860ca39030 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55860ca390b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55860ca39140 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55860ca391c8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55860ca39250 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55860ca392d8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55860ca39360 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55860ca393e8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55860ca39470 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55860ca394f8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55860ca39580 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55860ca39680 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55860ca406f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55860ca40e88 <line:128:13> 'int' 0
| `-CompoundStmt 0x55860ca40ef8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55860ca39770 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55860ca40f08 <col:29, line:132:5>
|-CXXMethodDecl 0x55860ca39928 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55860ca39860 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca399f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55860ca39ad8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55860ca40f60 <col:44, line:161:5>
|   `-ReturnStmt 0x55860ca40f50 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55860ca40f38 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca40f18 <col:9> 'ErrorHandler *' lvalue Var 0x55860ca40758 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca39c48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55860ca39b88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860ca39d10 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55860ca40fc0 <col:43, line:173:5>
|   `-ReturnStmt 0x55860ca40fb0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55860ca40f98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca40f78 <col:9> 'ErrorHandler *' lvalue Var 0x55860ca407d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55860ca39dc8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55860ca39e48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55860ca39f58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55860ca39ec8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a0a8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55860ca3a018 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a200 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55860ca3a168 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a358 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55860ca3a2c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a4b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55860ca3a418 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a6c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55860ca3a568 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3a5e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3a898 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55860ca3a780 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3a800 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3aab8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55860ca3a958 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3a9d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3ac98 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55860ca3ab78 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3abf8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3ae78 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55860ca3ad58 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3add8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3b000 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55860ca3af38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55860ca3b1d0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55860ca3b0b8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55860ca3b130 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55860ca41218 <col:57, line:234:5>
|   `-ReturnStmt 0x55860ca41208 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55860ca411f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55860ca41198 <col:9, col:41> 'int'
|         |-MemberExpr 0x55860ca41168 <col:9> '<bound member function type>' ->xmessage 0x55860ca3b000
|         | `-CXXThisExpr 0x55860ca41158 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55860ca411d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55860ca411c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55860ca41138 <col:18, col:40> 'String' (CXXTemporary 0x55860ca41138)
|               `-CallExpr 0x55860ca41100 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55860ca410e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55860ca41060 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55860ca3d258 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55860ca41080 <col:31> 'const String' lvalue ParmVar 0x55860ca3b130 'str' 'const String &'
|                 `-DeclRefExpr 0x55860ca410a0 <col:36> 'const String' lvalue ParmVar 0x55860ca3b0b8 'anno' 'const String &'
|-CXXMethodDecl 0x55860ca3b510 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55860ca3b290 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55860ca3b310 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55860ca3b3e0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55860ca414a8 <col:68, line:243:5>
|   `-ReturnStmt 0x55860ca41498 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55860ca41480 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55860ca41420 <col:9, col:41> 'int'
|         |-MemberExpr 0x55860ca413f0 <col:9> '<bound member function type>' ->xmessage 0x55860ca3b1d0
|         | `-CXXThisExpr 0x55860ca413e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55860ca412b8 <col:18> 'const String' lvalue ParmVar 0x55860ca3b290 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55860ca41468 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55860ca41450 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55860ca413c0 <col:24, col:40> 'String' (CXXTemporary 0x55860ca413c0)
|               `-CXXMemberCallExpr 0x55860ca41358 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55860ca412e8 <col:24> '<bound member function type>' ->vformat 0x55860ca3c6f0
|                 | `-CXXThisExpr 0x55860ca412d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55860ca41388 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55860ca41318 <col:32> 'const char *' lvalue ParmVar 0x55860ca3b310 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55860ca413a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55860ca41338 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55860ca3b3e0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55860ca3b7b0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55860ca3b5d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55860ca3b650 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55860ca3b6c8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55860ca417e8 <col:23, line:254:5>
|   `-ReturnStmt 0x55860ca417d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55860ca417c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55860ca41760 <col:9, col:71> 'int'
|         |-MemberExpr 0x55860ca41730 <col:9> '<bound member function type>' ->xmessage 0x55860ca3b1d0
|         | `-CXXThisExpr 0x55860ca41720 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55860ca417a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55860ca41790 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55860ca416e0 <col:18, col:65> 'String' (CXXTemporary 0x55860ca416e0)
|         |     `-CallExpr 0x55860ca41678 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55860ca41660 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55860ca41548 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55860ca3d258 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55860ca41568 <col:31> 'const String' lvalue ParmVar 0x55860ca3b650 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55860ca416c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55860ca416a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55860ca41640 <col:37, col:64> 'String' (CXXTemporary 0x55860ca41640)
|         |             `-CallExpr 0x55860ca41610 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55860ca415f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55860ca41588 <col:37> 'String (const String &)' lvalue CXXMethod 0x55860ca3d8a8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55860ca415a8 <col:56> 'const String' lvalue ParmVar 0x55860ca3b5d8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55860ca41700 <col:68> 'const String' lvalue ParmVar 0x55860ca3b6c8 'str' 'const String &'
|-CXXMethodDecl 0x55860ca3bb30 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55860ca3b878 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55860ca3b8f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55860ca3b970 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55860ca3b9e8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55860ca41aa0 <col:34, line:267:5>
|   `-ReturnStmt 0x55860ca41a90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55860ca41a78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55860ca41a10 <col:9, col:51> 'int'
|         |-MemberExpr 0x55860ca419e0 <col:9> '<bound member function type>' ->xmessage 0x55860ca3b7b0
|         | `-CXXThisExpr 0x55860ca419d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55860ca41888 <col:18> 'const String' lvalue ParmVar 0x55860ca3b878 'landmark' 'const String &'
|         |-DeclRefExpr 0x55860ca418a8 <col:28> 'const String' lvalue ParmVar 0x55860ca3b8f0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55860ca41a60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55860ca41a48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55860ca419b0 <col:34, col:50> 'String' (CXXTemporary 0x55860ca419b0)
|               `-CXXMemberCallExpr 0x55860ca41948 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55860ca418d8 <col:34> '<bound member function type>' ->vformat 0x55860ca3c6f0
|                 | `-CXXThisExpr 0x55860ca418c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55860ca41978 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55860ca41908 <col:42> 'const char *' lvalue ParmVar 0x55860ca3b970 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55860ca41990 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55860ca41928 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55860ca3b9e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55860ca3bc40 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55860ca41b20 <col:25, line:288:5>
|   `-ReturnStmt 0x55860ca41b10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55860ca41af8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55860ca41ac8 <col:9> 'const int' lvalue ->_nerrors 0x55860ca406f8
|         `-CXXThisExpr 0x55860ca41ab8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55860ca3be50 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55860ca3bcf8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55860ca3bd78 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3c138 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55860ca3bf18 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55860ca3bf98 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55860ca3c010 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55860ca3c2d0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55860ca3c208 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3c518 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55860ca3c390 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55860ca3c408 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55860ca41d80 <col:58, line:357:5>
|   `-ReturnStmt 0x55860ca41d70 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55860ca41d58 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55860ca41d28 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55860ca41d10 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55860ca41cf0 <col:9, col:29> 'String' (CXXTemporary 0x55860ca41cf0)
|             `-CallExpr 0x55860ca41c80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55860ca41c68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55860ca41be8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55860ca3c138 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55860ca41b88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55860ca41cb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55860ca41ba8 <col:21> 'const char *' lvalue ParmVar 0x55860ca3c390 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55860ca41cd0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55860ca41bc8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55860ca3c408 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55860ca3c6f0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55860ca3c5e0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55860ca3c658 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55860ca3c848 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55860ca3c7b8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55860ca3c9c8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55860ca3c900 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55860ca3cc60 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55860ca3ca80 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55860ca3cb00 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55860ca3cb78 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55860ca3cdc0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55860ca3cd30 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55860ca41e98 <col:37, line:441:5>
|   `-IfStmt 0x55860ca41e80 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55860ca41e08 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55860ca41dd8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55860ca41d98 <col:6> 'int' lvalue ParmVar 0x55860ca3cd30 'level' 'int'
|     | `-ImplicitCastExpr 0x55860ca41df0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55860ca41db8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55860ca38d80 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55860ca41e68 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55860ca41e38 <col:8> 'int' lvalue ->_nerrors 0x55860ca406f8
|         `-CXXThisExpr 0x55860ca41e28 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55860ca3ce88 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55860ca41f30 <col:26, line:448:5>
|   `-BinaryOperator 0x55860ca41f10 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55860ca41ec0 <col:2> 'int' lvalue ->_nerrors 0x55860ca406f8
|     | `-CXXThisExpr 0x55860ca41eb0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55860ca41ef0 <col:13> 'int' 0
|-CXXMethodDecl 0x55860ca3d050 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55860ca3cf40 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55860ca3cfb8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55860ca3d258 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55860ca3d110 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55860ca3d188 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55860ca3d508 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55860ca3d318 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55860ca3d398 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55860ca3d418 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55860ca3d5c0 <col:59> 0 0
|-CXXMethodDecl 0x55860ca3d758 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55860ca3d638 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55860ca3d6b8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55860ca425a0 <col:70, line:534:5>
|   |-DeclStmt 0x55860ca420a0 <line:528:2, col:20>
|   | |-VarDecl 0x55860ca41f58 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55860ca41fc0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55860ca41ff8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55860ca42060 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55860ca42170 <line:529:2, col:23>
|   | `-VarDecl 0x55860ca420d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55860ca42158 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55860ca42138 <col:18> 'const char *' lvalue ParmVar 0x55860ca3d638 'begin' 'const char *'
|   |-DoStmt 0x55860ca42538 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55860ca42468 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55860ca42450 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55860ca42430 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55860ca42188 <col:6> 'const char *' lvalue Var 0x55860ca420d0 'x' 'const char *'
|   | |     `-CallExpr 0x55860ca42380 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55860ca42368 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55860ca42320 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55860ca40bd0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55860ca423e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55860ca423d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55860ca42240 <col:20, col:27> 'String' (CXXTemporary 0x55860ca42240)
|   | |       |     `-CXXTemporaryObjectExpr 0x55860ca42208 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55860ca42400 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55860ca42260 <col:30> 'const char *' lvalue Var 0x55860ca420d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55860ca42418 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55860ca42280 <col:33> 'const char *' lvalue ParmVar 0x55860ca3d6b8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55860ca422c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55860ca422a0 <col:39> 'String' lvalue Var 0x55860ca41f58 'name' 'String'
|   | |       |-UnaryOperator 0x55860ca422f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55860ca422d8 <col:46> 'String' lvalue Var 0x55860ca41ff8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55860ca42310 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55860ca42520 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55860ca42508 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55860ca424e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55860ca424b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|   |         `-ImplicitCastExpr 0x55860ca424a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55860ca42480 <col:11> 'String' lvalue Var 0x55860ca41f58 'name' 'String'
|   `-ReturnStmt 0x55860ca42590 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55860ca42578 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca42558 <col:9> 'const char *' lvalue Var 0x55860ca420d0 'x' 'const char *'
|-CXXMethodDecl 0x55860ca3d8a8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55860ca3d818 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55860ca42ba8 <col:55, line:550:5>
|   `-IfStmt 0x55860ca42b80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55860ca427e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55860ca427c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860ca427b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860ca42790 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860ca42760 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|     | |       `-DeclRefExpr 0x55860ca42600 <col:6> 'const String' lvalue ParmVar 0x55860ca3d818 'x' 'const String &'
|     | `-BinaryOperator 0x55860ca42740 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55860ca42710 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55860ca426c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55860ca426a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55860ca42660 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55860c805fc0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55860ca42620 <col:11> 'const String' lvalue ParmVar 0x55860ca3d818 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55860ca42640 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55860ca42728 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55860ca426f8 <col:19> 'char' 123
|     |-ReturnStmt 0x55860ca42850 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55860ca42820 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55860ca42800 <col:13> 'const String' lvalue ParmVar 0x55860ca3d818 'x' 'const String &'
|     `-IfStmt 0x55860ca42b58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55860ca428e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860ca428d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860ca428b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860ca42880 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |       `-DeclRefExpr 0x55860ca42860 <col:11> 'const String' lvalue ParmVar 0x55860ca3d818 'x' 'const String &'
|       |-ReturnStmt 0x55860ca42a70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55860ca42a58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55860ca42a28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55860ca42a10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55860ca429f0 <col:13, col:29> 'String' (CXXTemporary 0x55860ca429f0)
|       |         `-CallExpr 0x55860ca429a0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55860ca42988 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55860ca42900 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55860ca3d050 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55860ca429d0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55860ca42920 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55860ca42940 <col:28> 'const String' lvalue ParmVar 0x55860ca3d818 'x' 'const String &'
|       `-ReturnStmt 0x55860ca42b48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55860ca42b30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55860ca42b00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55860ca42ae8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55860ca42ac8 <col:13, col:20> 'String' (CXXTemporary 0x55860ca42ac8)
|                 `-CXXTemporaryObjectExpr 0x55860ca42a90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55860ca3daa8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55860ca3d960 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55860ca3d9d8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860ca40e78 <col:71> 'bool' false
|-CXXRecordDecl 0x55860ca3db58 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55860ca3de58 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55860ca3ddf0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55860ca3dd90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55860ca3dd50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55860c7e9020 'String'
|       | `-CXXRecord 0x55860c7e8f90 'String'
|       |-BuiltinType 0x55860c4bd580 'int'
|       `-DecayedType 0x55860ca3b3b0 '__va_list_tag *' sugar
|         |-TypedefType 0x55860ca3b380 'va_list' sugar
|         | |-Typedef 0x55860c6db0e0 'va_list'
|         | `-TypedefType 0x55860c6db090 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55860c612cb8 '__gnuc_va_list'
|         |   `-TypedefType 0x55860c612c20 '__builtin_va_list' sugar
|         |     |-Typedef 0x55860c4fed38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55860c4fece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55860c4be2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55860c4be238 '__va_list_tag'
|         `-PointerType 0x55860c6e0980 '__va_list_tag *'
|           `-RecordType 0x55860c4be2d0 '__va_list_tag'
|             `-CXXRecord 0x55860c4be238 '__va_list_tag'
|-EnumDecl 0x55860ca3deb0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55860ca3dfb0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca401a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3df90 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55860ca3df70 <col:16> 'int' 1
| |-EnumConstantDecl 0x55860ca3e040 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca401b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e020 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55860ca3e000 <col:21> 'int' 2
| |-EnumConstantDecl 0x55860ca3e0d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca401d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e0b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55860ca3e090 <col:22> 'int' 4
| |-EnumConstantDecl 0x55860ca3e160 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca401e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e140 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55860ca3e120 <col:17> 'int' 8
| |-EnumConstantDecl 0x55860ca3e1f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca40200 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e1d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55860ca3e1b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55860ca3e280 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca40218 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e260 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55860ca3e240 <col:19> 'int' 32
| |-EnumConstantDecl 0x55860ca3e310 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca40230 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e2f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55860ca3e2d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55860ca3e3a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca40248 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e380 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55860ca3e360 <col:14> 'int' 128
| |-EnumConstantDecl 0x55860ca3e430 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55860ca40260 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860ca3e410 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55860ca3e3f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55860ca40150 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55860ca40278 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ca40130 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55860ca3e480 <col:12> 'int' 1024
|-CXXMethodDecl 0x55860ca40488 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55860ca402a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55860ca40340 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55860ca40610 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55860ca40548 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55860ca406b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55860ca406f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55860ca40758 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55860ca407d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55860ca40bd0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55860ca40848 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55860ca408c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55860ca40948 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55860ca409c0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55860ca40a38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55860ca40ab0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55860ca40cf8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55860ca40cf8
| `-ParmVarDecl 0x55860ca40e08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55860ca42f08 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55860ca42f08
  `-ParmVarDecl 0x55860ca43018 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c7f1a20 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55860c7f1b38 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55860c7f1bd8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55860c7f1c38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55860c7f1c98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55860c7f1d48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c7f2050 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860c7f2168 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55860c7f2210 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55860c7f2278 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55860c7f2308 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55860c7f83a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860c7f87d8 <col:12>
|-CXXConstructorDecl 0x55860c7f84a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860c7f85b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860c7f2210 'data' 'const char *'
| | `-ImplicitCastExpr 0x55860c7fad60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55860c7fad30 <col:12> 'const char *const' lvalue .data 0x55860c7f2210
| |     `-DeclRefExpr 0x55860c7fad10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860c7f2278 'length' 'int'
| | `-ImplicitCastExpr 0x55860c7fadf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55860c7fadc0 <col:12> 'const int' lvalue .length 0x55860c7f2278
| |     `-DeclRefExpr 0x55860c7fada0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860c7f2308 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55860c7fae80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55860c7fae50 <col:12> 'String::memo_t *const' lvalue .memo 0x55860c7f2308
| |     `-DeclRefExpr 0x55860c7fae30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55860c7faed8 <col:12>
|-CXXConstructorDecl 0x55860c7f8658 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860c7f8658
| `-ParmVarDecl 0x55860c7f8768 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55860c7fdcc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55860c8096d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860c8097e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55860c809d00 <col:12>
|   |-BinaryOperator 0x55860c809b18 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55860c809ad0 <col:12> 'const char *' lvalue ->data 0x55860c7f2210
|   | | `-CXXThisExpr 0x55860c809ac0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860c809b00 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55860c809a90 <col:12> 'const char *const' lvalue .data 0x55860c7f2210
|   |     `-DeclRefExpr 0x55860c809a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55860c809be0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55860c809b98 <col:12> 'int' lvalue ->length 0x55860c7f2278
|   | | `-CXXThisExpr 0x55860c809b88 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860c809bc8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55860c809b58 <col:12> 'const int' lvalue .length 0x55860c7f2278
|   |     `-DeclRefExpr 0x55860c809b38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55860c809ca8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55860c809c60 <col:12> 'String::memo_t *' lvalue ->memo 0x55860c7f2308
|   | | `-CXXThisExpr 0x55860c809c50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860c809c90 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55860c809c20 <col:12> 'String::memo_t *const' lvalue .memo 0x55860c7f2308
|   |     `-DeclRefExpr 0x55860c809c00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55860c809cf0 <col:12>
|     `-UnaryOperator 0x55860c809cd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860c809cc8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55860c809858 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860c809858
  `-ParmVarDecl 0x55860c809968 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c7e8f90 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860c7e90a8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55860c7e9138 <col:16, col:22> col:16 public
|-TypedefDecl 0x55860c7e9178 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55860c4bdfd0 'const char *'
|   `-QualType 0x55860c4bd521 'const char' const
|     `-BuiltinType 0x55860c4bd520 'char'
|-TypedefDecl 0x55860c7e9200 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55860c7e91d0 'String::const_iterator' sugar
|   |-Typedef 0x55860c7e9178 'const_iterator'
|   `-PointerType 0x55860c4bdfd0 'const char *'
|     `-QualType 0x55860c4bd521 'const char' const
|       `-BuiltinType 0x55860c4bd520 'char'
|-TypedefDecl 0x55860c7e9370 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55860c7e92e0 'int (String::*)() const'
|   |-RecordType 0x55860c7e9020 'String'
|   | `-CXXRecord 0x55860c7e8f90 'String'
|   `-ParenType 0x55860c7e9280 'int () const' sugar
|     `-FunctionProtoType 0x55860c7bde20 'int () const' const cdecl
|       `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860c7e93d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55860c612a00 'int64_t' sugar
|   |-Typedef 0x55860c526390 'int64_t'
|   `-TypedefType 0x55860c4ff630 '__int64_t' sugar
|     |-Typedef 0x55860c4ff208 '__int64_t'
|     `-BuiltinType 0x55860c4bd5a0 'long'
|-TypedefDecl 0x55860c7e9440 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55860c612920 'uint64_t' sugar
|   |-Typedef 0x55860c526530 'uint64_t'
|   `-TypedefType 0x55860c4ff6c0 '__uint64_t' sugar
|     |-Typedef 0x55860c4ff278 '__uint64_t'
|     `-BuiltinType 0x55860c4bd640 'unsigned long'
|-TypedefDecl 0x55860c7e94d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55860c7e94a0 'String::intmax_t' sugar
|   |-Typedef 0x55860c7e93d8 'intmax_t'
|   `-TypedefType 0x55860c612a00 'int64_t' sugar
|     |-Typedef 0x55860c526390 'int64_t'
|     `-TypedefType 0x55860c4ff630 '__int64_t' sugar
|       |-Typedef 0x55860c4ff208 '__int64_t'
|       `-BuiltinType 0x55860c4bd5a0 'long'
|-TypedefDecl 0x55860c7e9560 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55860c7e9530 'String::uintmax_t' sugar
|   |-Typedef 0x55860c7e9440 'uintmax_t'
|   `-TypedefType 0x55860c612920 'uint64_t' sugar
|     |-Typedef 0x55860c526530 'uint64_t'
|     `-TypedefType 0x55860c4ff6c0 '__uint64_t' sugar
|       |-Typedef 0x55860c4ff278 '__uint64_t'
|       `-BuiltinType 0x55860c4bd640 'unsigned long'
|-CXXConstructorDecl 0x55860c7e9620 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55860c7e97c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55860c7e9708 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55860c7e9978 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55860c7e98b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55860c7e9ad0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55860c7e9a40 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55860c7e9ce8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55860c7e9b98 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55860c7e9c18 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55860c7e9f08 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55860c7e9db8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55860c7e9e38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55860c7ea128 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55860c7e9fd8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55860c7ea058 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55860c7ea348 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55860c7ea1f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55860c7ea278 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55860c7ea4d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55860c7ea410 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55860c7ea658 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55860c7ea598 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55860c7ea7e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55860c7ea720 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55860c7ea940 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55860c7ea8b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55860c7eaa98 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55860c7eaa08 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55860c7eabf0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55860c7eab60 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55860c7ead78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55860c7eacb8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55860c7eaf08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55860c7eae40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55860c7eb098 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55860c7eafd0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55860c7eb228 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55860c7eb160 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55860c7eb320 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55860c7eb448 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55860c7eb5c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55860c7eb500 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55860c7eb718 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55860c7eb688 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55860c7eb7d0 <col:63> "" ""
|-CXXMethodDecl 0x55860c7eb918 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55860c7eb858 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55860c7ebb28 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55860c7eb9d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55860c7eba58 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55860c7ebd48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55860c7ebbf0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55860c7ebc70 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55860c7ec028 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55860c7ebe08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55860c7ebe88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55860c7f7e70 <col:55> 'int' 10
| `-ParmVarDecl 0x55860c7ebf00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860c7f7e90 <col:76> 'bool' true
|-CXXMethodDecl 0x55860c7ec308 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55860c7ec0f0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55860c7ec170 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55860c7f7ea0 <col:56> 'int' 10
| `-ParmVarDecl 0x55860c7ec1e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860c7f7ec0 <col:77> 'bool' true
|-CXXMethodDecl 0x55860c7ec410 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55860c7ec4d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55860c7ec5a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55860c7ec640 <col:20>
| `-OptimizeNoneAttr 0x55860c7ec698 <col:30>
|-CXXConversionDecl 0x55860c7ec788 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55860c7ec858 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55860c7ec918 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55860c7eca08 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55860c7ecac8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55860c7ecc48 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55860c7ecb80 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55860c7ecd98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55860c7ecd08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55860c7ece88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55860c7ecf48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55860c7ed198 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55860c7ed000 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55860c7ed080 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55860c7ed3f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55860c7ed260 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55860c7ed2e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55860c7ed4c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c7ed6d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55860c7ed580 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55860c7ed600 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55860c7ed8f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55860c7ed7a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55860c7ed820 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55860c7eda88 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55860c7ed9c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55860c7edb78 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55860c7edce8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55860c7edc28 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860c7edef8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55860c7edda8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55860c7ede28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55860c7ee110 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55860c7edfb8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55860c7ee030 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55860c7ee2a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55860c7ee1d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860c7ee4c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55860c7ee360 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55860c7ee3e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55860c7ee610 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55860c7ee580 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55860c7ee7e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55860c7ee6d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55860c7ee750 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55860c7ee938 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55860c7ee8a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55860c7eeb50 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55860c7ee9f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55860c7eea70 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55860c7f7ed0 <col:39> 'int' 0
|-CXXMethodDecl 0x55860c7eed70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55860c7eec10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55860c7eec90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55860c7f7ef0 <col:48> 'int' 0
|-CXXMethodDecl 0x55860c7eef50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55860c7eee30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55860c7eeeb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55860c7f7f10 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55860c7ef020 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55860c7ef0e0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55860c7ef1a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55860c7ef260 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55860c7ef320 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55860c7ef4c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55860c7ef3d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55860c7ef648 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55860c7ef580 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55860c7ef820 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55860c7ef708 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55860c7ef998 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55860c7ef8d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55860c7efae0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55860c7efa50 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860c7efc30 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55860c7efba0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55860c7efe08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55860c7efcf0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55860c7efd70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55860c7effe8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55860c7efed0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55860c7eff50 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55860c7f0138 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55860c7f00a8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55860c7f0348 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55860c7f01f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55860c7f0278 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55860c7f04a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55860c7f0410 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55860c7f0600 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55860c7f0568 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55860c7f06a8 <col:57> "" ""
|-CXXMethodDecl 0x55860c7f07b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55860c7f0728 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55860c7f0908 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55860c7f0878 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55860c7f0a88 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55860c7f09c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55860c7f0b50 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55860c7f0c10 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55860c7f0cd0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55860c7f0d70 <col:49> "" ""
|-CXXMethodDecl 0x55860c7f0e00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55860c7f0ec0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55860c7f0fb0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55860c7f1078 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55860c7f1138 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55860c7f11f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55860c7f12f0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55860c7f13b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55860c7f1480 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55860c7f1658 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55860c7f1538 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55860c7f15b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55860c7f1880 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55860c7f1720 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55860c7f17a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55860c7f1990 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55860c7f19f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55860c7f1a20 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55860c7f1b38 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55860c7f1bd8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55860c7f1c38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55860c7f1c98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55860c7f1d48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55860c7f1db0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55860c7f1fe8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55860c7f2038 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c7f1fc8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55860c7f1ed8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55860c7f1e80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55860c7f1ec0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55860c7f1ea0 <col:32> 'int' 8
|-CXXRecordDecl 0x55860c7f2050 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860c7f2168 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55860c7f2210 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55860c7f2278 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55860c7f2308 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55860c7f83a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55860c7f87d8 <col:12>
| |-CXXConstructorDecl 0x55860c7f84a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860c7f85b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860c7f2210 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55860c7fad60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55860c7fad30 <col:12> 'const char *const' lvalue .data 0x55860c7f2210
| | |     `-DeclRefExpr 0x55860c7fad10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860c7f2278 'length' 'int'
| | | `-ImplicitCastExpr 0x55860c7fadf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55860c7fadc0 <col:12> 'const int' lvalue .length 0x55860c7f2278
| | |     `-DeclRefExpr 0x55860c7fada0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860c7f2308 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55860c7fae80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55860c7fae50 <col:12> 'String::memo_t *const' lvalue .memo 0x55860c7f2308
| | |     `-DeclRefExpr 0x55860c7fae30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c7f85b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55860c7faed8 <col:12>
| |-CXXConstructorDecl 0x55860c7f8658 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860c7f8658
| | `-ParmVarDecl 0x55860c7f8768 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55860c7fdcc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55860c8096d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860c8097e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55860c809d00 <col:12>
| |   |-BinaryOperator 0x55860c809b18 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55860c809ad0 <col:12> 'const char *' lvalue ->data 0x55860c7f2210
| |   | | `-CXXThisExpr 0x55860c809ac0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860c809b00 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55860c809a90 <col:12> 'const char *const' lvalue .data 0x55860c7f2210
| |   |     `-DeclRefExpr 0x55860c809a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55860c809be0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55860c809b98 <col:12> 'int' lvalue ->length 0x55860c7f2278
| |   | | `-CXXThisExpr 0x55860c809b88 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860c809bc8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55860c809b58 <col:12> 'const int' lvalue .length 0x55860c7f2278
| |   |     `-DeclRefExpr 0x55860c809b38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55860c809ca8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55860c809c60 <col:12> 'String::memo_t *' lvalue ->memo 0x55860c7f2308
| |   | | `-CXXThisExpr 0x55860c809c50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860c809c90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55860c809c20 <col:12> 'String::memo_t *const' lvalue .memo 0x55860c7f2308
| |   |     `-DeclRefExpr 0x55860c809c00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860c8097e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55860c809cf0 <col:12>
| |     `-UnaryOperator 0x55860c809cd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55860c809cc8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55860c809858 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860c809858
|   `-ParmVarDecl 0x55860c809968 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55860c7f2380 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55860c7f25c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55860c7f23e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55860c7f2468 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55860c7f24e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55860c7f8360 <col:79, line:261:5>
|   |-BinaryOperator 0x55860c7f7fd8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55860c7f7f70 <col:2, col:5> 'const char *' lvalue .data 0x55860c7f2210
|   | | `-MemberExpr 0x55860c7f7f40 <col:2> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|   | |   `-CXXThisExpr 0x55860c7f7f30 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55860c7f7fc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860c7f7fa0 <col:12> 'const char *' lvalue ParmVar 0x55860c7f23e8 'data' 'const char *'
|   |-BinaryOperator 0x55860c7f80a0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55860c7f8038 <col:2, col:5> 'int' lvalue .length 0x55860c7f2278
|   | | `-MemberExpr 0x55860c7f8008 <col:2> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|   | |   `-CXXThisExpr 0x55860c7f7ff8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55860c7f8088 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860c7f8068 <col:14> 'int' lvalue ParmVar 0x55860c7f2468 'length' 'int'
|   `-IfStmt 0x55860c7f8348 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55860c7f81c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55860c7f81a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55860c7f8188 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55860c7f8168 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55860c7f8100 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|     |       | `-MemberExpr 0x55860c7f80d0 <col:7> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|     |       |   `-CXXThisExpr 0x55860c7f80c0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55860c7f8150 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860c7f8130 <col:17> 'String::memo_t *' lvalue ParmVar 0x55860c7f24e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55860c7f8320 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55860c7f8308 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55860c7f8210 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55860c7e0ff8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55860c7f8278 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860c7f1bd8
|         `-ImplicitCastExpr 0x55860c7f8260 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55860c7f8240 <col:27> 'String::memo_t *' lvalue ParmVar 0x55860c7f24e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55860c7f2878 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55860c7f2698 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55860c7f2718 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55860c7f2790 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55860c7f2380 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55860c7f87e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55860c7f8978 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55860c7f88e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55860c7f8850 <col:2> '<bound member function type>' ->assign_memo 0x55860c7f25c8
|     | `-ImplicitCastExpr 0x55860c7f8918 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55860c7f8840 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55860c7f8930 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860c7f8880 <col:14> 'const char *' lvalue ParmVar 0x55860c7f2698 'data' 'const char *'
|     |-ImplicitCastExpr 0x55860c7f8948 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55860c7f88a0 <col:20> 'int' lvalue ParmVar 0x55860c7f2718 'length' 'int'
|     `-ImplicitCastExpr 0x55860c7f8960 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55860c7f88c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55860c7f2790 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55860c7f2a08 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55860c7f2948 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55860c7f8bd0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55860c7f8b50 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55860c7f89a0 <col:2> '<bound member function type>' ->assign_memo 0x55860c7f25c8
|     | `-CXXThisExpr 0x55860c7f8990 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55860c7f8b88 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55860c7f8a20 <col:14, col:19> 'const char *' lvalue .data 0x55860c7f2210
|     |   `-MemberExpr 0x55860c7f89f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55860c7f2380
|     |     `-DeclRefExpr 0x55860c7f89d0 <col:14> 'const String' lvalue ParmVar 0x55860c7f2948 'x' 'const String &'
|     |-ImplicitCastExpr 0x55860c7f8ba0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55860c7f8aa0 <col:25, col:30> 'int' lvalue .length 0x55860c7f2278
|     |   `-MemberExpr 0x55860c7f8a70 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55860c7f2380
|     |     `-DeclRefExpr 0x55860c7f8a50 <col:25> 'const String' lvalue ParmVar 0x55860c7f2948 'x' 'const String &'
|     `-ImplicitCastExpr 0x55860c7f8bb8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55860c7f8b20 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|         `-MemberExpr 0x55860c7f8af0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55860c7f2380
|           `-DeclRefExpr 0x55860c7f8ad0 <col:38> 'const String' lvalue ParmVar 0x55860c7f2948 'x' 'const String &'
|-CXXMethodDecl 0x55860c7f2ad0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55860c7f9590 <col:31, line:278:5>
|   `-IfStmt 0x55860c7f9578 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55860c7f8c70 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55860c7f8c58 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55860c7f8c28 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|     |     `-MemberExpr 0x55860c7f8bf8 <col:6> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|     |       `-CXXThisExpr 0x55860c7f8be8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55860c7f9550 <col:15, line:277:2>
|       |-ParenExpr 0x55860c7f9120 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55860c7f90f0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55860c7f8d80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55860c7f8d68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55860c7f8d50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55860c7f8d10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860c7f1bd8
|       |   |       `-ImplicitCastExpr 0x55860c7f8cf8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55860c7f8cc8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|       |   |           `-MemberExpr 0x55860c7f8c98 <col:27> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|       |   |             `-CXXThisExpr 0x55860c7f8c88 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55860c7f8de0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55860c7f8dc0 <col:54> 'int' 0
|       |   `-CallExpr 0x55860c7f9050 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55860c7f9038 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55860c7f8fb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55860c7f9090 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55860c7f8ec8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55860c7f90a8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55860c7f8ef8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55860c7f90c0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55860c7f8f30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55860c7f90d8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55860c7f8fa0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55860c7f8f88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55860c7f8f50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55860c7f9470 <line:274:6, line:275:22>
|       | |-CallExpr 0x55860c7f9330 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55860c7f9318 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55860c7f9290 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55860c7e2440 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55860c7f9260 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860c7f1bd8
|       | |   `-ImplicitCastExpr 0x55860c7f9248 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55860c7f9218 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|       | |       `-MemberExpr 0x55860c7f91e8 <col:40> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|       | |         `-CXXThisExpr 0x55860c7f91d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55860c7f9430 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55860c7f9418 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55860c7f9358 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55860c7f72b0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55860c7f9458 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55860c7f93b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|       |       `-MemberExpr 0x55860c7f9388 <col:15> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|       |         `-CXXThisExpr 0x55860c7f9378 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55860c7f9530 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55860c7f94c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55860c7f2308
|         | `-MemberExpr 0x55860c7f9498 <col:6> 'String::rep_t' lvalue ->_r 0x55860c7f2380
|         |   `-CXXThisExpr 0x55860c7f9488 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55860c7f9518 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55860c7f94f8 <col:16> 'int' 0
|-CXXMethodDecl 0x55860c7f2d68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55860c7f2b88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55860c7f2c08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55860c7f2c80 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55860c7f2e40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55860c7f3090 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55860c7f2ef8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55860c7f2f78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55860c7f2ff0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55860c7f3278 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55860c7f3160 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55860c7f31e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55860c7f3378 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55860c7f9668 <col:41, line:286:5>
|   `-ReturnStmt 0x55860c7f9658 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55860c7f9628 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55860c7f95f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55860c7f95d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55860c7f95b8 <col:46> 'int' 1
|-CXXMethodDecl 0x55860c7f3618 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55860c7f3430 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55860c7f34b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55860c7f3530 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55860c7f72b0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55860c7f36e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55860c7f7380 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55860c7f7550 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55860c7f7438 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55860c7f74b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55860c7f7610 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55860c7f76d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55860c7f77d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55860c7f7850 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55860c7f78c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55860c7f7930 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55860c7f7a30 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55860c7f7a80 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c7f7a10 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55860c7f79f0 <col:22> 'int' 14
|-CXXMethodDecl 0x55860c7f7c98 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55860c7f7ab0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55860c7f7b30 <col:38> col:41 'int'
| `-ParmVarDecl 0x55860c7f7bb0 <col:43> col:46 'int'
|-FriendDecl 0x55860c7f7da0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55860c7f7e30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860ca87ab0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55860ca87c88 prev 0x55860ca87ab0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55860ca87d18 <col:46, col:52> col:46 public
|-TypedefDecl 0x55860ca87d40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860ca896a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55860ca89650 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55860ca89630 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55860ca87f58 'type'
|     `-SubstTemplateTypeParmType 0x55860ca87f20 'String' sugar
|       |-TemplateTypeParmType 0x55860c7ad840 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7ad7f0 'T'
|       `-RecordType 0x55860c7e9020 'String'
|         `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca89758 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55860ca89720 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55860ca89700 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55860ca896a0 'type'
|     `-ElaboratedType 0x55860ca89650 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55860ca89630 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55860ca87f58 'type'
|         `-SubstTemplateTypeParmType 0x55860ca87f20 'String' sugar
|           |-TemplateTypeParmType 0x55860c7ad840 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55860c7ad7f0 'T'
|           `-RecordType 0x55860c7e9020 'String'
|             `-CXXRecord 0x55860c7e8f90 'String'
|-CXXMethodDecl 0x55860ca898d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55860ca897e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55860ca899c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55860ca89ab8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55860ca89ab8
|-CXXMethodDecl 0x55860ca89d88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55860ca89c90 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55860ca89fc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860ca89e40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860ca89eb8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8a198 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860ca8a088 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860ca8a100 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8a2f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55860ca8a3c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55860ca8a618 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860ca8a488 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55860ca8a500 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8a878 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55860ca8a6e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55860ca8a760 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8aa38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55860ca8a948 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8abf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55860ca8ab00 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8acb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860ca8ad60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55860ca8af98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860ca8ae10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860ca8ae88 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860ca8b238 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55860ca8b140 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55860ca8b300 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55860ca8b350 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55860ca8b3a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860ca219f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55860ca86518 prev 0x55860ca219f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55860ca87a20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55860ca879d0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55860ca879b0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55860ca87860 'type'
|     `-SubstTemplateTypeParmType 0x55860ca876f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55860c7835f0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55860c783598 'F'
|       `-RecordType 0x55860ca87350 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55860ca87270 'typed_array_memory'
|-FieldDecl 0x55860ca8b3f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55860ca8b440 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55860ca8b478 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|   |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55860c7bab08 'T'
|   `-RecordType 0x55860c7e9020 'String'
|     `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8b508 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55860ca8b4d0 'String &'
|   `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-RecordType 0x55860c7e9020 'String'
|       `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8b598 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55860ca8b560 'const String &'
|   `-QualType 0x55860ca865b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-RecordType 0x55860c7e9020 'String'
|         `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8b628 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55860ca8b5f0 'String *'
|   `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-RecordType 0x55860c7e9020 'String'
|       `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8b6b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55860ca8b680 'const String *'
|   `-QualType 0x55860ca865b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-RecordType 0x55860c7e9020 'String'
|         `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8c310 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55860ca8c2c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55860ca8c2a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55860ca8c1d8 'type'
|     `-LValueReferenceType 0x55860ca8c1a0 'const String &'
|       `-QualType 0x55860ca8bf41 'const String' const
|         `-SubstTemplateTypeParmType 0x55860ca8bf40 'String' sugar
|           |-TemplateTypeParmType 0x55860c78d540 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55860c78d4e8 'T'
|           `-RecordType 0x55860c7e9020 'String'
|             `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8c378 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55860ca8b560 'const String &'
|   `-QualType 0x55860ca865b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-RecordType 0x55860c7e9020 'String'
|         `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8c3d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860ca8c438 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55860ca8b5f0 'String *'
|   `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-RecordType 0x55860c7e9020 'String'
|       `-CXXRecord 0x55860c7e8f90 'String'
|-TypedefDecl 0x55860ca8c4a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55860ca8b680 'const String *'
|   `-QualType 0x55860ca865b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55860ca865b0 'String' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-RecordType 0x55860c7e9020 'String'
|         `-CXXRecord 0x55860c7e8f90 'String'
|-EnumDecl 0x55860ca8c4f8 <line:134:5> col:5
| `-EnumConstantDecl 0x55860ca8c5f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55860ca8c5d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55860c7bc1e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55860c7bc1c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55860c7bc1a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55860ca8c678 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55860ca8c908 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860ca8c730 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860ca8c7d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55860ca8cb98 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55860ca8ca80 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55860ca8ce58 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55860ca8cd40 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55860ca8d170 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55860ca8d050 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55860ca8d480 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55860ca8d360 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55860ca8d770 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860ca8d5b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860ca8d630 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860ca8d898 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55860ca8d948 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8d9a0 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8d9e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55860ca8da98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8daf0 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8dbb8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860ca8dc68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8dcc0 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8dd08 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860ca8ddb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8de10 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8de58 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860ca8df08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8df60 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8dfa8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860ca8e058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860ca8e0b0 <col:30> Inherited
|-CXXMethodDecl 0x55860ca8e0d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860ca8e188 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860ca8e238 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55860ca8e3f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860ca8e2e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860ca8e360 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860ca8e548 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55860ca8e4b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860ca8e6f8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55860ca8e600 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860ca8e7b0 <col:20>
| `-OptimizeNoneAttr 0x55860ca8e808 <col:30>
|-CXXMethodDecl 0x55860ca8e928 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55860ca8e830 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860ca8e9e0 <col:20>
| `-OptimizeNoneAttr 0x55860ca8ea38 <col:30>
|-CXXMethodDecl 0x55860ca8eaf0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860ca8ea60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860ca8ec38 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860ca8eba8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860ca8ed68 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55860ca8ee68 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55860ca8ef38 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55860ca8f008 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55860ca8f148 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860ca8f0b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860ca8f290 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860ca8f200 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860ca8f3d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55860ca8f348 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860ca8f490 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55860ca8f590 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55860ca8f500 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860ca8f648 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55860ca8f708 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55860ca8f808 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55860ca8f988 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55860ca8f8c8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55860ca90148 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55860ca8fa40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55860ca900a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55860ca8ffa8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55860ca90228 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860ca90378 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55860ca902e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860ca90430 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55860ca90678 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860ca904f0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55860ca90568 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860ca90808 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55860ca90748 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55860ca90a18 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55860ca908d0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55860ca90948 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55860ca90ad8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55860ca90d38 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55860ca90c40 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55860ca90e08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55860ca90e08

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca9ba38 prev 0x55860c9e4498 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860ca9bb30 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55860ca9bbc0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55860ca9bcc8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55860ca9bbf8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55860ca9d0a0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca9d080 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55860ca9cc18 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55860ca9d130 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860ca9d0f0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55860ca9bbf8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55860ca9cc80 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55860ca9d1b0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca9d170 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55860ca9cce0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55860ca9d1f0 <col:54> 'bool' false
| `-CompoundStmt 0x55860ca9d2f8 <col:61, line:38:5>
|   `-BinaryOperator 0x55860ca9d2d8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55860ca9d270 <col:9> 'const Element *' lvalue ->_context 0x55860ca9cbb8
|     | `-CXXThisExpr 0x55860ca9d260 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55860ca9d2c0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55860ca9d2a0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55860ca9bed8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860ca9bd88 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55860ca9be00 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55860ca9d0d8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca9d0b8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55860ca9cbb8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55860ca9d350 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860ca9d310 <col:20> 'const Element *' lvalue ParmVar 0x55860ca9bd88 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55860ca9cc18 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55860ca9d3d0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860ca9d390 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55860ca9be00 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55860ca9cc80 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55860ca9d450 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55860ca9d410 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55860ca9cce0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55860ca9d490 <col:73> 'bool' false
| `-CompoundStmt 0x55860ca9d508 <col:80, line:46:5>
|-CXXMethodDecl 0x55860ca9c008 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55860ca9d580 <col:36, line:51:5>
|   `-ReturnStmt 0x55860ca9d570 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55860ca9d558 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55860ca9d528 <col:16> 'const Element *const' lvalue ->_context 0x55860ca9cbb8
|         `-CXXThisExpr 0x55860ca9d518 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55860ca9c0f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55860ca9d600 <col:32, line:57:5>
|   `-ReturnStmt 0x55860ca9d5f0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55860ca9d5d8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55860ca9d5a8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55860ca9cc18
|         `-CXXThisExpr 0x55860ca9d598 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55860ca9c1b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55860ca9c340 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860ca9c270 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55860ca9c490 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860ca9c400 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55860ca9c5e0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860ca9c550 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55860ca9c7e8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55860ca9c698 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55860ca9c710 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55860ca9cac8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55860ca9c8a8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55860ca9c928 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55860ca9c9a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55860ca9cb80 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55860ca9cbb8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55860ca9cc18 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55860ca9cc80 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55860ca9cce0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55860ca9cd30 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55860ca9cd30
| `-ParmVarDecl 0x55860ca9ce48 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55860ca9cee8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55860ca9cee8
| `-ParmVarDecl 0x55860ca9cff8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55860cb130e0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860cac19d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55860cac1ba8 prev 0x55860cac19d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55860cac1c38 <col:46, col:52> col:46 public
|-TypedefDecl 0x55860cac1c60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cac3830 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55860cac37e0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55860cac2110 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55860cac2010 'type'
|     `-TemplateSpecializationType 0x55860cac1fa0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55860cac1e80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55860cac1e60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55860cac1e40 <col:24> 'unsigned long' 4
|       `-RecordType 0x55860cac1f80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55860cac1ea0 'char_array'
|-TypedefDecl 0x55860cac38e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55860cac38b0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55860cac3890 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55860cac3830 'type'
|     `-ElaboratedType 0x55860cac37e0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55860cac2110 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55860cac2010 'type'
|         `-TemplateSpecializationType 0x55860cac1fa0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55860cac1e80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55860cac1e60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55860cac1e40 <col:24> 'unsigned long' 4
|           `-RecordType 0x55860cac1f80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55860cac1ea0 'char_array'
|-CXXMethodDecl 0x55860cac3a68 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55860cac3978 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55860cac3b58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55860cac3c38 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55860cac3f08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55860cac3e10 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55860cac4148 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860cac3fc0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860cac4038 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cac4318 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860cac4208 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860cac4280 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cac4478 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55860cac4548 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55860cac4798 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860cac4608 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55860cac4680 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cacd5b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55860cacd430 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55860cacd4a8 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cacd778 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55860cacd688 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cacd938 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55860cacd840 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cacd9f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860cacdaa0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55860cacdcd8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860cacdb50 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860cacdbc8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860cacdf78 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55860cacde80 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55860cace040 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55860cace090 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55860cace0e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860cac03d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55860cac05e8 prev 0x55860cac03d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55860cac1940 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55860cac18f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55860cac18d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55860cac1780 'type'
|     `-SubstTemplateTypeParmType 0x55860cac15a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55860c782e70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c782e18 'T'
|       `-RecordType 0x55860cac10f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55860cac1008 'sized_array_memory'
|-FieldDecl 0x55860cace130 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55860cace180 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55860cace1b8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|   |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55860c7bab08 'T'
|   `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cace248 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55860cace210 'int &'
|   `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cace308 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55860cace2d0 'const int &'
|   `-QualType 0x55860cac0681 'const int' const
|     `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cace398 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55860cace360 'int *'
|   `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cace428 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55860cace3f0 'const int *'
|   `-QualType 0x55860cac0681 'const int' const
|     `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cacf010 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55860cacefc0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55860cacefa0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55860cacef30 'type'
|     `-SubstTemplateTypeParmType 0x55860cacecf0 'int' sugar
|       |-TemplateTypeParmType 0x55860c78dc70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c78dc20 'T'
|       `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cacf078 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55860cace2d0 'const int &'
|   `-QualType 0x55860cac0681 'const int' const
|     `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cacf0d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cacf138 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55860cace360 'int *'
|   `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|     |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860c7bab08 'T'
|     `-BuiltinType 0x55860c4bd580 'int'
|-TypedefDecl 0x55860cacf1a0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55860cace3f0 'const int *'
|   `-QualType 0x55860cac0681 'const int' const
|     `-SubstTemplateTypeParmType 0x55860cac0680 'int' sugar
|       |-TemplateTypeParmType 0x55860c7bab60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860c7bab08 'T'
|       `-BuiltinType 0x55860c4bd580 'int'
|-EnumDecl 0x55860cacf1f8 <line:134:5> col:5
| `-EnumConstantDecl 0x55860cacf2f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55860cacf2d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55860c7bc1e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55860c7bc1c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55860c7bc1a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55860cacf378 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55860cacf5c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860cacf430 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860cacf4d0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55860cacf888 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55860cacf770 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55860cacfb48 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55860cacfa30 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55860cacfe90 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55860cacfd70 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55860cad01a0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55860cad0080 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55860cad0490 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860cad02d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860cad0350 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860cad05b8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55860cad0698 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad06f0 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0738 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55860cad07e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad0840 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0908 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860cad09b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad0a10 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0a58 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860cad0b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad0b60 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0ba8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860cad0c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad0cb0 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0cf8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860cad0da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860cad0e00 <col:30> Inherited
|-CXXMethodDecl 0x55860cad0e28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860cad0ed8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860cad0f88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55860cad1148 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860cad1038 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860cad10b0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860cad1298 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55860cad1208 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860cad1448 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55860cad1350 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860cad1500 <col:20>
| `-OptimizeNoneAttr 0x55860cad1558 <col:30>
|-CXXMethodDecl 0x55860cad1678 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55860cad1580 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860cad1730 <col:20>
| `-OptimizeNoneAttr 0x55860cad1788 <col:30>
|-CXXMethodDecl 0x55860cad1840 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860cad17b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860cad1988 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860cad18f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860cad1ab8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55860cad1be8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55860cad1cb8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55860cad1d88 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55860cad1ec8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860cad1e38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860cad2010 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860cad1f80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860cad2158 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55860cad20c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860cad2210 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55860cad2310 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55860cad2280 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860cad23c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55860cad2488 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55860cad2588 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55860cad2708 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55860cad2648 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55860cad2ec8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55860cad27c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55860cad2e28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55860cad2d28 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55860cad2fa8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860cad30f8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55860cad3068 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860cad31b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55860cad33f8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860cad3270 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55860cad32e8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860cad35b8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55860cad34c8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55860cad3808 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55860cad3680 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55860cad36f8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55860cad38c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55860cad3b28 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55860cad3a30 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55860cad3bf8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860cabe548 prev 0x55860caa2548 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860cabe640 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55860cabe730 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55860cae58c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55860cabe820 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55860cae58d0 <col:25, line:830:9>
|-CXXMethodDecl 0x55860cabe920 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55860cabe9d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55860cabea78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55860cabea78
| `-ParmVarDecl 0x55860cabeb88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55860cabf348 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55860cabf348
  `-ParmVarDecl 0x55860cabf458 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860caa2358 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55860caa24b8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55860caa2548 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55860caa2600 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55860caa2708 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55860caa2638 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860cad51b8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860cad5198 <col:31> 'int' 0
|-CXXConstructorDecl 0x55860caa2a28 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55860caa28a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55860caa2918 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860cad51f0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860cad51d0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55860caa2c00 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860caa2af0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55860caa2b68 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860cad5228 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860cad5208 <col:55> 'int' 0
|-CXXConstructorDecl 0x55860caa2fb8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860caa2da0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55860caa2e18 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55860caa2e90 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860cad5260 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860cad5240 <col:31> 'int' 0
|-CXXConstructorDecl 0x55860caa3178 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55860caa30b8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55860caa3270 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55860caa3458 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55860caa3360 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55860caa3548 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55860cad6f10 <col:24, line:291:5>
|   `-ReturnStmt 0x55860cad6f00 <line:290:9, col:79>
|     `-BinaryOperator 0x55860cad6ee0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55860cad6db8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55860cad6d10 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55860cad6cf0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55860cad52e8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55860cad52d0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55860cad52b8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55860cad5288 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55860cac0370
|       | |   |       `-CXXThisExpr 0x55860cad5278 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55860cad53d8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55860cad53c0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55860cad5388 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55860cad5358 <col:28, col:35> '<bound member function type>' ->size 0x55860ca8e0d8
|       | |           `-ImplicitCastExpr 0x55860cad53a8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55860cad5340 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55860cad5310 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55860cac0370
|       | |                 `-CXXThisExpr 0x55860cad5300 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55860cad6da0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55860cad6d88 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55860cad6d70 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55860cad6d40 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55860cad3d40
|       |         `-CXXThisExpr 0x55860cad6d30 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55860cad6ec0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55860cad6ea8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55860cad6e90 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55860cad6e50 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55860cad6e38 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55860cad6de8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55860cad3df0
|         |     |   `-CXXThisExpr 0x55860cad6dd8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55860cad6e18 <col:73> 'int' 0
|         `-IntegerLiteral 0x55860cad6e70 <col:79> 'int' 0
|-CXXMethodDecl 0x55860caa3608 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55860cad70e8 <col:32, line:296:5>
|   `-ReturnStmt 0x55860cad70d8 <line:295:9, col:49>
|     `-BinaryOperator 0x55860cad70b8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55860cad6f98 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55860cad6f80 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55860cad6f68 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55860cad6f38 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55860cad3d40
|       |       `-CXXThisExpr 0x55860cad6f28 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55860cad7098 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55860cad7080 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55860cad7068 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55860cad7028 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55860cad7010 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55860cad6fc0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55860cad3df0
|         |     |   `-CXXThisExpr 0x55860cad6fb0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55860cad6ff0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55860cad7048 <col:49> 'int' 0
|-CXXMethodDecl 0x55860caa36f8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55860cad72f8 <col:19, line:306:5>
|   |-IfStmt 0x55860cad7218 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55860cad7158 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55860cad7140 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55860cad7110 <col:13> 'Vector<String> *' lvalue ->_conf 0x55860cac0370
|   | |     `-CXXThisExpr 0x55860cad7100 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55860cad71f8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55860cad71c8 <col:13, col:20> '<bound member function type>' ->clear 0x55860ca90ad8
|   |     `-ImplicitCastExpr 0x55860cad71b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55860cad7180 <col:13> 'Vector<String> *' lvalue ->_conf 0x55860cac0370
|   |         `-CXXThisExpr 0x55860cad7170 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55860cad72a0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55860cad7270 <col:9, col:16> '<bound member function type>' .clear 0x55860cad38c8
|   |   `-MemberExpr 0x55860cad7240 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55860cad3ce0
|   |     `-CXXThisExpr 0x55860cad7230 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55860cad72e8 <line:305:9, col:17>
|     `-UnaryOperator 0x55860cad72d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cad72c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860caa3978 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55860caa3880 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55860caa3af8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55860caa3a30 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55860caa3e78 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55860caa3ba0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55860caa3dd8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55860caa3c48 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55860caa3cc0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55860cad7618 <col:67, line:327:5>
|     |-WhileStmt 0x55860cad75c8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55860cad73e0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55860cad7360 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55860c9dc968 0x55860c825d28 0x55860c825a00 0x55860c8161d0 0x55860c815e80 0x55860c815770 0x55860c7e80e0 0x55860c7755b0
|     | | |-DeclRefExpr 0x55860cad7320 <col:16> 'Iter' lvalue ParmVar 0x55860caa3c48 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55860cad7340 <col:25> 'Iter' lvalue ParmVar 0x55860caa3cc0 'end' 'Iter'
|     | `-CompoundStmt 0x55860cad75a8 <col:30, line:325:9>
|     |   |-CallExpr 0x55860cad7548 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55860cad7428 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55860cad7518 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55860cad74a8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|     |   |   `-DeclRefExpr 0x55860cad7488 <col:24> 'Iter' lvalue ParmVar 0x55860caa3c48 'begin' 'Iter'
|     |   `-UnaryOperator 0x55860cad7590 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55860cad7570 <col:15> 'Iter' lvalue ParmVar 0x55860caa3c48 'begin' 'Iter'
|     `-ReturnStmt 0x55860cad7608 <line:326:9, col:17>
|       `-UnaryOperator 0x55860cad75f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad75e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860caa3f80 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55860caa3ef0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55860caa40c8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55860caa4038 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55860caa4190 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55860cad76f8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55860cad7698 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55860cad7648 <col:9> '<bound member function type>' ->reset_from 0x55860cad4168
|   | | `-CXXThisExpr 0x55860cad7638 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55860cad7678 <col:20> 'int' 0
|   `-ReturnStmt 0x55860cad76e8 <line:352:9, col:17>
|     `-UnaryOperator 0x55860cad76d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cad76c0 <col:17> 'Args *' this
|-VarDecl 0x55860caa4248 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860caa42b0 <col:38> 'int' 1
|-VarDecl 0x55860caa4340 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860caa43a8 <col:39> 'int' 2
|-VarDecl 0x55860caa4438 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860caa44a0 <col:39> 'int' 4
|-VarDecl 0x55860caa4530 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860caa4598 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55860caa4918 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55860caa4610 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860caa4878 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860caa46c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa4768 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55860cad7850 <col:43, line:371:5>
|     `-ReturnStmt 0x55860cad7840 <line:370:9, col:34>
|       `-CallExpr 0x55860cad7808 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad7728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad77a8 <col:21> 'const char *' lvalue ParmVar 0x55860caa46c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad77c8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55860cad77e8 <col:33> 'T' lvalue ParmVar 0x55860caa4768 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa4c48 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55860caa4980 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860caa4ba8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860caa4a30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa4ad8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55860cad79a0 <col:45, line:375:5>
|     `-ReturnStmt 0x55860cad7990 <line:374:9, col:42>
|       `-CallExpr 0x55860cad7958 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad7878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad78f8 <col:21> 'const char *' lvalue ParmVar 0x55860caa4a30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad7918 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int'
|         `-DeclRefExpr 0x55860cad7938 <col:41> 'T' lvalue ParmVar 0x55860caa4ad8 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa4f78 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55860caa4cb0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860caa4ed8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860caa4d60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa4e08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55860cad7af0 <col:45, line:379:5>
|     `-ReturnStmt 0x55860cad7ae0 <line:378:9, col:43>
|       `-CallExpr 0x55860cad7aa8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad79c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad7a48 <col:21> 'const char *' lvalue ParmVar 0x55860caa4d60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad7a68 <col:30> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         `-DeclRefExpr 0x55860cad7a88 <col:42> 'T' lvalue ParmVar 0x55860caa4e08 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa52a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55860caa4fe0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55860caa5208 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55860caa5090 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55860caa5138 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55860cad7cf0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55860cad7ce0 <line:382:9, col:55>
| |     `-CallExpr 0x55860cad7ca8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55860cad7b18 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55860cad7b98 <col:21> 'const char *' lvalue ParmVar 0x55860caa5090 'keyword' 'const char *'
| |       |-BinaryOperator 0x55860cad7c68 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55860cad7c18 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55860cad7bf8 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55860cad7c50 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55860cad7c30 <col:42> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55860cad7c88 <col:54> 'T' lvalue ParmVar 0x55860caa5138 'x' 'T &'
| `-CXXMethodDecl 0x55860cb13568 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55860cb13388 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55860cb13458 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55860caa56a8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55860caa5310 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860caa5608 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55860caa53c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa5440 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860caa54e8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55860cad7e30 <col:54, line:388:5>
|     |-CallExpr 0x55860cad7db8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad7d08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860cad7d48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860cad7d58 <col:30> 'const char *' lvalue ParmVar 0x55860caa53c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad7d78 <col:39> 'int' lvalue ParmVar 0x55860caa5440 'flags' 'int'
|     | `-DeclRefExpr 0x55860cad7d98 <col:46> 'T' lvalue ParmVar 0x55860caa54e8 'x' 'T &'
|     `-ReturnStmt 0x55860cad7e20 <line:387:9, col:17>
|       `-UnaryOperator 0x55860cad7e08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad7df8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caa5b58 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55860caa5718 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860caa5798 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860caa5ab8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55860caa5858 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa58f8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa5998 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad7fa0 <col:74, line:403:5>
|     `-ReturnStmt 0x55860cad7f90 <line:402:9, col:56>
|       `-CallExpr 0x55860cad7f50 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad7e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad7ed0 <col:28> 'const char *' lvalue ParmVar 0x55860caa5858 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad7ef0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55860cad7f10 <col:40> 'T' lvalue ParmVar 0x55860caa58f8 'x' 'T &'
|         `-DeclRefExpr 0x55860cad7f30 <col:43> 'const V' lvalue ParmVar 0x55860caa5998 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860caa5fc8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55860caa5bc8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860caa5c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860caa5f28 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55860caa5d08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa5da8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa5e48 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad8108 <col:76, line:407:5>
|     `-ReturnStmt 0x55860cad80f8 <line:406:9, col:65>
|       `-CallExpr 0x55860cad80b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad7fc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8038 <col:28> 'const char *' lvalue ParmVar 0x55860caa5d08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad8058 <col:37> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         |-DeclRefExpr 0x55860cad8078 <col:49> 'T' lvalue ParmVar 0x55860caa5da8 'x' 'T &'
|         `-DeclRefExpr 0x55860cad8098 <col:52> 'const V' lvalue ParmVar 0x55860caa5e48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860caa6518 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55860caa6038 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860caa60b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860caa6478 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55860caa6178 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa61f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55860caa6298 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa6338 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad8270 <col:85, line:412:5>
|     |-CallExpr 0x55860cad81f0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad8120 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55860cad8160 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55860cad8170 <col:37> 'const char *' lvalue ParmVar 0x55860caa6178 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad8190 <col:46> 'int' lvalue ParmVar 0x55860caa61f8 'flags' 'int'
|     | |-DeclRefExpr 0x55860cad81b0 <col:53> 'T' lvalue ParmVar 0x55860caa6298 'x' 'T &'
|     | `-DeclRefExpr 0x55860cad81d0 <col:56> 'const V' lvalue ParmVar 0x55860caa6338 'default_value' 'const V &'
|     `-ReturnStmt 0x55860cad8260 <line:411:9, col:17>
|       `-UnaryOperator 0x55860cad8248 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad8238 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caa69a8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55860caa6590 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa6608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caa6908 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caa66c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa6740 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa67e8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55860cad83f0 <col:53, line:425:5>
|     `-ReturnStmt 0x55860cad83e0 <line:424:9, col:42>
|       `-CallExpr 0x55860cad83a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad82a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8320 <col:21> 'const char *' lvalue ParmVar 0x55860caa66c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad8340 <col:30> 'int' 0
|         |-DeclRefExpr 0x55860cad8360 <col:33> 'P' lvalue ParmVar 0x55860caa6740 'parser' 'P'
|         `-DeclRefExpr 0x55860cad8380 <col:41> 'T' lvalue ParmVar 0x55860caa67e8 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa6df8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55860caa6a18 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa6a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caa6d58 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caa6b58 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa6bd0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa6c78 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55860cad8568 <col:55, line:429:5>
|     `-ReturnStmt 0x55860cad8558 <line:428:9, col:50>
|       `-CallExpr 0x55860cad8518 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8418 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8498 <col:21> 'const char *' lvalue ParmVar 0x55860caa6b58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad84b8 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int'
|         |-DeclRefExpr 0x55860cad84d8 <col:41> 'P' lvalue ParmVar 0x55860caa6bd0 'parser' 'P'
|         `-DeclRefExpr 0x55860cad84f8 <col:49> 'T' lvalue ParmVar 0x55860caa6c78 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa7248 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55860caa6e68 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa6ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caa71a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caa6fa8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa7020 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa70c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55860cad86e0 <col:55, line:433:5>
|     `-ReturnStmt 0x55860cad86d0 <line:432:9, col:51>
|       `-CallExpr 0x55860cad8690 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8590 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8610 <col:21> 'const char *' lvalue ParmVar 0x55860caa6fa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad8630 <col:30> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         |-DeclRefExpr 0x55860cad8650 <col:42> 'P' lvalue ParmVar 0x55860caa7020 'parser' 'P'
|         `-DeclRefExpr 0x55860cad8670 <col:50> 'T' lvalue ParmVar 0x55860caa70c8 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa7698 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55860caa72b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa7338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caa75f8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caa73f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa7470 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa7518 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55860cad8908 <col:56, line:437:5>
|     `-ReturnStmt 0x55860cad88f8 <line:436:9, col:63>
|       `-CallExpr 0x55860cad88b8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8788 <col:21> 'const char *' lvalue ParmVar 0x55860caa73f8 'keyword' 'const char *'
|         |-BinaryOperator 0x55860cad8858 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55860cad8808 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860cad87e8 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860cad8840 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860cad8820 <col:42> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55860cad8878 <col:54> 'P' lvalue ParmVar 0x55860caa7470 'parser' 'P'
|         `-DeclRefExpr 0x55860cad8898 <col:62> 'T' lvalue ParmVar 0x55860caa7518 'x' 'T &'
|-FunctionTemplateDecl 0x55860caa7bc8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55860caa7708 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa7788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caa7b28 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860caa7848 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa78c8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860caa7940 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa79e8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55860cad8a70 <col:64, line:442:5>
|     |-CallExpr 0x55860cad89f0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad8920 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860cad8960 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860cad8970 <col:30> 'const char *' lvalue ParmVar 0x55860caa7848 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad8990 <col:39> 'int' lvalue ParmVar 0x55860caa78c8 'flags' 'int'
|     | |-DeclRefExpr 0x55860cad89b0 <col:46> 'P' lvalue ParmVar 0x55860caa7940 'parser' 'P'
|     | `-DeclRefExpr 0x55860cad89d0 <col:54> 'T' lvalue ParmVar 0x55860caa79e8 'x' 'T &'
|     `-ReturnStmt 0x55860cad8a60 <line:441:9, col:17>
|       `-UnaryOperator 0x55860cad8a48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad8a38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caa81c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55860caa7c40 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa7cb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860caa7d38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860caa8128 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55860caa7e00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa7e78 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa7f18 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa7fe8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad8c08 <col:84, line:458:5>
|     `-ReturnStmt 0x55860cad8bf8 <line:457:9, col:64>
|       `-CallExpr 0x55860cad8bb0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8aa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8b10 <col:28> 'const char *' lvalue ParmVar 0x55860caa7e00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad8b30 <col:37> 'int' 0
|         |-DeclRefExpr 0x55860cad8b50 <col:40> 'P' lvalue ParmVar 0x55860caa7e78 'parser' 'P'
|         |-DeclRefExpr 0x55860cad8b70 <col:48> 'T' lvalue ParmVar 0x55860caa7f18 'x' 'T &'
|         `-DeclRefExpr 0x55860cad8b90 <col:51> 'const V' lvalue ParmVar 0x55860caa7fe8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860caa8748 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55860caa8240 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa82b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860caa8338 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860caa86a8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55860caa8400 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa8478 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa8518 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa85b8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad8d98 <col:86, line:462:5>
|     `-ReturnStmt 0x55860cad8d88 <line:461:9, col:73>
|       `-CallExpr 0x55860cad8d40 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8c30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8ca0 <col:28> 'const char *' lvalue ParmVar 0x55860caa8400 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad8cc0 <col:37> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         |-DeclRefExpr 0x55860cad8ce0 <col:49> 'P' lvalue ParmVar 0x55860caa8478 'parser' 'P'
|         |-DeclRefExpr 0x55860cad8d00 <col:57> 'T' lvalue ParmVar 0x55860caa8518 'x' 'T &'
|         `-DeclRefExpr 0x55860cad8d20 <col:60> 'const V' lvalue ParmVar 0x55860caa85b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860caa8da8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55860caa87c0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa8838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860caa88b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860caa8d08 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55860caa8980 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa8a00 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55860caa8a78 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa8b18 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55860caa8bb8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860cad8f28 <col:95, line:467:5>
|     |-CallExpr 0x55860cad8ea0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad8db0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55860cad8df0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55860cad8e00 <col:37> 'const char *' lvalue ParmVar 0x55860caa8980 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad8e20 <col:46> 'int' lvalue ParmVar 0x55860caa8a00 'flags' 'int'
|     | |-DeclRefExpr 0x55860cad8e40 <col:53> 'P' lvalue ParmVar 0x55860caa8a78 'parser' 'P'
|     | |-DeclRefExpr 0x55860cad8e60 <col:61> 'T' lvalue ParmVar 0x55860caa8b18 'x' 'T &'
|     | `-DeclRefExpr 0x55860cad8e80 <col:64> 'const V' lvalue ParmVar 0x55860caa8bb8 'default_value' 'const V &'
|     `-ReturnStmt 0x55860cad8f18 <line:466:9, col:17>
|       `-UnaryOperator 0x55860cad8f00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad8ef0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caa9388 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55860caa8e28 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa8ea8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860caa8f28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860caa92e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860caa8ff0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa9068 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa9108 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860caa91a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860cad90d0 <col:63, line:481:5>
|     `-ReturnStmt 0x55860cad90c0 <line:480:9, col:47>
|       `-CallExpr 0x55860cad9078 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad8f58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad8fd8 <col:21> 'const char *' lvalue ParmVar 0x55860caa8ff0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad8ff8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55860cad9018 <col:33> 'P' lvalue ParmVar 0x55860caa9068 'parser' 'P'
|         |-DeclRefExpr 0x55860cad9038 <col:41> 'T1' lvalue ParmVar 0x55860caa9108 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860cad9058 <col:45> 'T2' lvalue ParmVar 0x55860caa91a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860caa9908 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55860caa9400 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa9478 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860caa94f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860caa9868 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860caa95c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caa9638 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860caa96d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860caa9778 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860cad9270 <col:65, line:485:5>
|     `-ReturnStmt 0x55860cad9260 <line:484:9, col:55>
|       `-CallExpr 0x55860cad9218 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad90f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9178 <col:21> 'const char *' lvalue ParmVar 0x55860caa95c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad9198 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int'
|         |-DeclRefExpr 0x55860cad91b8 <col:41> 'P' lvalue ParmVar 0x55860caa9638 'parser' 'P'
|         |-DeclRefExpr 0x55860cad91d8 <col:49> 'T1' lvalue ParmVar 0x55860caa96d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860cad91f8 <col:53> 'T2' lvalue ParmVar 0x55860caa9778 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860caad588 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55860caa9980 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caa99f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860caa9a78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860caad4e8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860caad240 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caad2b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860caad358 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860caad3f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860cad9410 <col:65, line:489:5>
|     `-ReturnStmt 0x55860cad9400 <line:488:9, col:56>
|       `-CallExpr 0x55860cad93b8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9298 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9318 <col:21> 'const char *' lvalue ParmVar 0x55860caad240 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad9338 <col:30> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         |-DeclRefExpr 0x55860cad9358 <col:42> 'P' lvalue ParmVar 0x55860caad2b8 'parser' 'P'
|         |-DeclRefExpr 0x55860cad9378 <col:50> 'T1' lvalue ParmVar 0x55860caad358 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860cad9398 <col:54> 'T2' lvalue ParmVar 0x55860caad3f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860caadb08 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55860caad600 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caad678 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860caad6f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860caada68 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860caad7c0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caad838 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55860caad8d8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860caad978 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860cad9660 <col:66, line:493:5>
|     `-ReturnStmt 0x55860cad9650 <line:492:9, col:68>
|       `-CallExpr 0x55860cad9608 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad94b8 <col:21> 'const char *' lvalue ParmVar 0x55860caad7c0 'keyword' 'const char *'
|         |-BinaryOperator 0x55860cad9588 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55860cad9538 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860cad9518 <col:30> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860cad9570 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860cad9550 <col:42> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55860cad95a8 <col:54> 'P' lvalue ParmVar 0x55860caad838 'parser' 'P'
|         |-DeclRefExpr 0x55860cad95c8 <col:62> 'T1' lvalue ParmVar 0x55860caad8d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860cad95e8 <col:66> 'T2' lvalue ParmVar 0x55860caad978 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860caae168 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55860caadb80 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caadbf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860caadc78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860caae0c8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860caadd40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caaddc0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860caade38 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55860caaded8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860caadf78 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860cad97f0 <col:74, line:498:5>
|     |-CallExpr 0x55860cad9768 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad9678 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860cad96b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860cad96c8 <col:30> 'const char *' lvalue ParmVar 0x55860caadd40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad96e8 <col:39> 'int' lvalue ParmVar 0x55860caaddc0 'flags' 'int'
|     | |-DeclRefExpr 0x55860cad9708 <col:46> 'P' lvalue ParmVar 0x55860caade38 'parser' 'P'
|     | |-DeclRefExpr 0x55860cad9728 <col:54> 'T1' lvalue ParmVar 0x55860caaded8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55860cad9748 <col:58> 'T2' lvalue ParmVar 0x55860caadf78 'x2' 'T2 &'
|     `-ReturnStmt 0x55860cad97e0 <line:497:9, col:17>
|       `-UnaryOperator 0x55860cad97c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad97b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caae4c8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55860caae1e8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860caae428 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860caae2a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caae318 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55860cad9938 <col:52, line:509:5>
|     `-ReturnStmt 0x55860cad9928 <line:508:9, col:44>
|       `-CallExpr 0x55860cad98f0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9890 <col:26> 'const char *' lvalue ParmVar 0x55860caae2a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cad98b0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55860cad98d0 <col:38> 'P' lvalue ParmVar 0x55860caae318 'parser' 'P'
|-FunctionTemplateDecl 0x55860caae7c8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55860caae530 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860caae728 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860caae5e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caae658 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55860cad9a78 <col:54, line:513:5>
|     `-ReturnStmt 0x55860cad9a68 <line:512:9, col:52>
|       `-CallExpr 0x55860cad9a30 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9960 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad99d0 <col:26> 'const char *' lvalue ParmVar 0x55860caae5e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad99f0 <col:35> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int'
|         `-DeclRefExpr 0x55860cad9a10 <col:46> 'P' lvalue ParmVar 0x55860caae658 'parser' 'P'
|-FunctionTemplateDecl 0x55860caaeac8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55860caae830 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860caaea28 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860caae8e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caae958 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55860cad9bb8 <col:54, line:517:5>
|     `-ReturnStmt 0x55860cad9ba8 <line:516:9, col:53>
|       `-CallExpr 0x55860cad9b70 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9aa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9b10 <col:26> 'const char *' lvalue ParmVar 0x55860caae8e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad9b30 <col:35> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int'
|         `-DeclRefExpr 0x55860cad9b50 <col:47> 'P' lvalue ParmVar 0x55860caae958 'parser' 'P'
|-FunctionTemplateDecl 0x55860caaedc8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55860caaeb30 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860caaed28 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860caaebe0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caaec58 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55860cad9da8 <col:55, line:521:5>
|     `-ReturnStmt 0x55860cad9d98 <line:520:9, col:65>
|       `-CallExpr 0x55860cad9d60 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9c50 <col:26> 'const char *' lvalue ParmVar 0x55860caaebe0 'keyword' 'const char *'
|         |-BinaryOperator 0x55860cad9d20 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55860cad9cd0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860cad9cb0 <col:35> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860cad9d08 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860cad9ce8 <col:47> 'const int' lvalue Var 0x55860caa4340 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55860cad9d40 <col:59> 'P' lvalue ParmVar 0x55860caaec58 'parser' 'P'
|-FunctionTemplateDecl 0x55860caaf198 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55860caaee30 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860caaf0f8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55860caaeee0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caaef60 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55860caaefd8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55860cad9ee8 <col:63, line:526:5>
|     |-CallExpr 0x55860cad9e70 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cad9dc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55860cad9e00 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55860cad9e10 <col:35> 'const char *' lvalue ParmVar 0x55860caaeee0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860cad9e30 <col:44> 'int' lvalue ParmVar 0x55860caaef60 'flags' 'int'
|     | `-DeclRefExpr 0x55860cad9e50 <col:51> 'P' lvalue ParmVar 0x55860caaefd8 'parser' 'P'
|     `-ReturnStmt 0x55860cad9ed8 <line:525:9, col:17>
|       `-UnaryOperator 0x55860cad9ec0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cad9eb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860caaf5e8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55860caaf208 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caaf288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caaf548 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caaf348 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caaf3c0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55860caaf468 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55860cada040 <col:58, line:541:5>
|     `-ReturnStmt 0x55860cada030 <line:540:9, col:39>
|       `-CallExpr 0x55860cad9ff8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cad9f18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cad9f98 <col:21> 'const char *' lvalue ParmVar 0x55860caaf348 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cad9fb8 <col:30> 'P' lvalue ParmVar 0x55860caaf3c0 'parser' 'P'
|         `-DeclRefExpr 0x55860cad9fd8 <col:38> 'T' lvalue ParmVar 0x55860caaf468 'x' 'T &'
|-FunctionTemplateDecl 0x55860caafa38 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55860caaf658 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caaf6d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caaf998 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caaf798 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caaf810 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860caaf8b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55860cada178 <col:60, line:545:5>
|     `-ReturnStmt 0x55860cada168 <line:544:9, col:41>
|       `-CallExpr 0x55860cada130 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada068 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada0d0 <col:23> 'const char *' lvalue ParmVar 0x55860caaf798 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cada0f0 <col:32> 'P' lvalue ParmVar 0x55860caaf810 'parser' 'P'
|         `-DeclRefExpr 0x55860cada110 <col:40> 'T' lvalue ParmVar 0x55860caaf8b8 'x' 'T &'
|-FunctionTemplateDecl 0x55860caafe88 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55860caafaa8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caafb28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860caafde8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860caafbe8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860caafc60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860caafd08 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55860cada2b0 <col:60, line:549:5>
|     `-ReturnStmt 0x55860cada2a0 <line:548:9, col:41>
|       `-CallExpr 0x55860cada268 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada1a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada208 <col:23> 'const char *' lvalue ParmVar 0x55860caafbe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cada228 <col:32> 'P' lvalue ParmVar 0x55860caafc60 'parser' 'P'
|         `-DeclRefExpr 0x55860cada248 <col:40> 'T' lvalue ParmVar 0x55860caafd08 'x' 'T &'
|-FunctionTemplateDecl 0x55860cab02d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55860caafef8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860caaff78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab0238 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860cab0038 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab00b0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab0158 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55860cada3e8 <col:61, line:553:5>
|     `-ReturnStmt 0x55860cada3d8 <line:552:9, col:42>
|       `-CallExpr 0x55860cada3a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada2d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada340 <col:24> 'const char *' lvalue ParmVar 0x55860cab0038 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cada360 <col:33> 'P' lvalue ParmVar 0x55860cab00b0 'parser' 'P'
|         `-DeclRefExpr 0x55860cada380 <col:41> 'T' lvalue ParmVar 0x55860cab0158 'x' 'T &'
|-FunctionTemplateDecl 0x55860cab07b8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55860cab0348 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab03c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab0718 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860cab0488 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab0508 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab0580 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab0628 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55860cada560 <col:69, line:557:5>
|     `-ReturnStmt 0x55860cada550 <line:556:9, col:46>
|       `-CallExpr 0x55860cada510 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada490 <col:21> 'const char *' lvalue ParmVar 0x55860cab0488 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cada4b0 <col:30> 'int' lvalue ParmVar 0x55860cab0508 'flags' 'int'
|         |-DeclRefExpr 0x55860cada4d0 <col:37> 'P' lvalue ParmVar 0x55860cab0580 'parser' 'P'
|         `-DeclRefExpr 0x55860cada4f0 <col:45> 'T' lvalue ParmVar 0x55860cab0628 'x' 'T &'
|-FunctionTemplateDecl 0x55860cab0ac8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55860cab0830 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860cab0a28 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860cab08e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab0958 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55860cada6a0 <col:56, line:571:5>
|     `-ReturnStmt 0x55860cada690 <line:570:9, col:48>
|       `-CallExpr 0x55860cada658 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada5f8 <col:30> 'const char *' lvalue ParmVar 0x55860cab08e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cada618 <col:39> 'int' 0
|         `-DeclRefExpr 0x55860cada638 <col:42> 'P' lvalue ParmVar 0x55860cab0958 'parser' 'P'
|-FunctionTemplateDecl 0x55860cab0e58 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55860cab0b30 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860cab0db8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55860cab0be0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab0c60 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab0cd8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55860cada870 <col:67, line:576:5>
|     |-CallExpr 0x55860cada7f8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cada6b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55860cada6f8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55860cada708 <col:39> 'const char *' lvalue ParmVar 0x55860cab0be0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860cada7b8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860cada768 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860cada728 <col:48> 'int' lvalue ParmVar 0x55860cab0c60 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860cada7a0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860cada780 <col:56> 'const int' lvalue Var 0x55860caa4530 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55860cada7d8 <col:68> 'P' lvalue ParmVar 0x55860cab0cd8 'parser' 'P'
|     `-ReturnStmt 0x55860cada860 <line:575:9, col:17>
|       `-UnaryOperator 0x55860cada848 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cada838 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860cab12a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55860cab0ec8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab0f48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab1208 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860cab1008 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab1080 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab1128 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55860cada9e0 <col:62, line:592:5>
|     `-ReturnStmt 0x55860cada9d0 <line:591:9, col:51>
|       `-CallExpr 0x55860cada990 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cada8a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cada910 <col:30> 'const char *' lvalue ParmVar 0x55860cab1008 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cada930 <col:39> 'int' 0
|         |-DeclRefExpr 0x55860cada950 <col:42> 'P' lvalue ParmVar 0x55860cab1080 'parser' 'P'
|         `-DeclRefExpr 0x55860cada970 <col:50> 'T' lvalue ParmVar 0x55860cab1128 'x' 'T &'
|-FunctionTemplateDecl 0x55860cab1788 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55860cab1318 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab1398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab16e8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860cab1458 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab14d8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab1550 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab15f8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55860cadabd8 <col:73, line:597:5>
|     |-CallExpr 0x55860cadab58 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cada9f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55860cadaa38 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55860cadaa48 <col:39> 'const char *' lvalue ParmVar 0x55860cab1458 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860cadaaf8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860cadaaa8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860cadaa68 <col:48> 'int' lvalue ParmVar 0x55860cab14d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860cadaae0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860cadaac0 <col:56> 'const int' lvalue Var 0x55860caa4530 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55860cadab18 <col:68> 'P' lvalue ParmVar 0x55860cab1550 'parser' 'P'
|     | `-DeclRefExpr 0x55860cadab38 <col:76> 'T' lvalue ParmVar 0x55860cab15f8 'x' 'T &'
|     `-ReturnStmt 0x55860cadabc8 <line:596:9, col:17>
|       `-UnaryOperator 0x55860cadabb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cadaba0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860cab1d38 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55860cab1800 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab1878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab1c98 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860cab1938 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab19b0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab1b70 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860cadad48 <col:65, line:614:5>
|     `-ReturnStmt 0x55860cadad38 <line:613:9, col:46>
|       `-CallExpr 0x55860cadacf8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cadac08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cadac78 <col:25> 'const char *' lvalue ParmVar 0x55860cab1938 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cadac98 <col:34> 'int' 0
|         |-DeclRefExpr 0x55860cadacb8 <col:37> 'P' lvalue ParmVar 0x55860cab19b0 'parser' 'P'
|         `-DeclRefExpr 0x55860cadacd8 <col:45> 'Vector<T>' lvalue ParmVar 0x55860cab1b70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55860cab2168 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55860cab1da8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860cab20c8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55860cab1e60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab1fb0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860cadaf60 <col:55, line:618:5>
|     `-ReturnStmt 0x55860cadaf50 <line:617:9, col:55>
|       `-CallExpr 0x55860cadaf10 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cadad70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cadade0 <col:25> 'const char *' lvalue ParmVar 0x55860cab1e60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860cadae00 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55860cadaed0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55860cadaef0 <col:54> 'Vector<T>' lvalue ParmVar 0x55860cab1fb0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55860cab2738 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55860cab21d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab2248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab2698 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860cab2308 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab2388 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab2400 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab2550 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860cadb158 <col:76, line:623:5>
|     |-CallExpr 0x55860cadb0d8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860cadaf78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55860cadafb8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55860cadafc8 <col:34> 'const char *' lvalue ParmVar 0x55860cab2308 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860cadb078 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860cadb028 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860cadafe8 <col:43> 'int' lvalue ParmVar 0x55860cab2388 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860cadb060 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860cadb040 <col:51> 'const int' lvalue Var 0x55860caa4530 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55860cadb098 <col:63> 'P' lvalue ParmVar 0x55860cab2400 'parser' 'P'
|     | `-DeclRefExpr 0x55860cadb0b8 <col:71> 'Vector<T>' lvalue ParmVar 0x55860cab2550 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55860cadb148 <line:622:9, col:17>
|       `-UnaryOperator 0x55860cadb130 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cadb120 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860cab2c78 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55860cab27b0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab2828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab2bd8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55860cab28e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab2968 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab2ab0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860cadb3c0 <col:66, line:627:5>
|     `-ReturnStmt 0x55860cadb3b0 <line:626:9, col:59>
|       `-CallExpr 0x55860cadb370 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860cadb188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860cadb1f8 <col:25> 'const char *' lvalue ParmVar 0x55860cab28e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860cadb218 <col:34> 'int' lvalue ParmVar 0x55860cab2968 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55860cadb330 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55860cadb350 <col:58> 'Vector<T>' lvalue ParmVar 0x55860cab2ab0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55860cab2d08 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55860cadb440 <col:25, line:633:5>
|   `-ReturnStmt 0x55860cadb430 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55860cadb418 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55860cadb3e8 <col:16> 'const bool' lvalue ->_status 0x55860cac01d8
|         `-CXXThisExpr 0x55860cadb3d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55860cab2e88 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55860cab2dc0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55860cadb528 <col:27, line:639:5>
|   |-BinaryOperator 0x55860cadb4d0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860cadb458 <col:9> 'bool' lvalue ParmVar 0x55860cab2dc0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860cadb4b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860cadb488 <col:13> 'bool' lvalue ->_status 0x55860cac01d8
|   |     `-CXXThisExpr 0x55860cadb478 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55860cadb518 <line:638:9, col:17>
|     `-UnaryOperator 0x55860cadb500 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cadb4f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860cab3008 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55860cab2f48 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55860cadb618 <col:39, line:644:5>
|   |-BinaryOperator 0x55860cadb5c0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860cadb548 <col:9> 'bool' lvalue ParmVar 0x55860cab2f48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860cadb5a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860cadb578 <col:13> 'const bool' lvalue ->_status 0x55860cac01d8
|   |     `-CXXThisExpr 0x55860cadb568 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55860cadb608 <line:643:9, col:17>
|     `-UnaryOperator 0x55860cadb5f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cadb5e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55860cab30d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55860cadb6c0 <col:30, line:651:5>
|   `-ReturnStmt 0x55860cadb6b0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55860cadb698 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55860cadb668 <col:16> 'bool' lvalue ->_read_status 0x55860ca9cce0
|         `-ImplicitCastExpr 0x55860cadb648 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55860cadb638 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55860cab3218 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55860cab3188 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55860cadb7c8 <col:32, line:658:5>
|   |-BinaryOperator 0x55860cadb770 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860cadb6d8 <col:9> 'bool' lvalue ParmVar 0x55860cab3188 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860cadb758 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860cadb728 <col:13> 'bool' lvalue ->_read_status 0x55860ca9cce0
|   |     `-ImplicitCastExpr 0x55860cadb708 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55860cadb6f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55860cadb7b8 <line:657:9, col:17>
|     `-UnaryOperator 0x55860cadb7a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cadb790 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860cab3368 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55860cab32d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55860cadb8d8 <col:44, line:663:5>
|   |-BinaryOperator 0x55860cadb880 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860cadb7e8 <col:9> 'bool' lvalue ParmVar 0x55860cab32d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860cadb868 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860cadb838 <col:13> 'bool' lvalue ->_read_status 0x55860ca9cce0
|   |     `-ImplicitCastExpr 0x55860cadb818 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55860cadb808 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55860cadb8c8 <line:662:9, col:17>
|     `-UnaryOperator 0x55860cadb8b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860cadb8a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55860cab3430 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55860cab34f8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55860cab35c0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55860cab3688 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55860cab3998 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55860cab3728 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860cab38f8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55860cab3808 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55860cadbc90 <col:19, line:706:5>
|     `-IfStmt 0x55860cadbc68 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55860cadb9d8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55860cadbb98 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55860cadbb68 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55860cadbb28 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55860cadba30 <col:42> '<bound member function type>' ->simple_slot 0x55860cad4e20
|       |     | `-CXXThisExpr 0x55860cadba20 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55860cadbac8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55860cadba80 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55860c82a7c8
|       |     | `-DeclRefExpr 0x55860cadba60 <col:55> 'T' lvalue ParmVar 0x55860cab3808 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55860cadbb08 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55860cadbc58 <line:705:13, col:34>
|         `-CallExpr 0x55860cadbc30 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55860cadbbb8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55860cadbc10 <col:33> 'T' lvalue ParmVar 0x55860cab3808 'x' 'T &'
|-FunctionTemplateDecl 0x55860cab3c68 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55860cab39f8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860cab3bc8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55860cab3ad8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55860cadc070 <col:31, line:717:5>
|     |-DeclStmt 0x55860cadbdd0 <line:713:9, col:23>
|     | `-VarDecl 0x55860cadbcb8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55860cadbda8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55860cadbd30 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55860cadbd88 <col:21> 'T' lvalue ParmVar 0x55860cab3ad8 'x' 'T &'
|     |-IfStmt 0x55860cadc020 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55860cadbec8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55860cadc000 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55860cadbfa0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55860cadbf30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|     |   | `-DeclRefExpr 0x55860cadbf10 <col:14> 'T *' lvalue Var 0x55860cadbcb8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55860cadbfe0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55860cadc058 <line:716:9, col:16>
|       `-DeclRefExpr 0x55860cadc038 <col:16> 'T *' lvalue Var 0x55860cadbcb8 's' 'T *'
|-FunctionTemplateDecl 0x55860cab4078 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55860cab3cc8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860cab3d48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860cab3fd8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55860cab3e28 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55860cab3ec8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55860cadc380 <col:37, line:726:5>
|     |-IfStmt 0x55860cadc310 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55860cadc330 <line:723:13, col:26>
|     | | `-VarDecl 0x55860cadc0d8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55860cadc1c8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55860cadc150 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55860cadc1a8 <col:25> 'T' lvalue ParmVar 0x55860cab3e28 'x' 'T &'
|     | |-DeclRefExpr 0x55860cadc1f0 <col:16> 'T *' lvalue Var 0x55860cadc0d8 's' 'T *'
|     | `-BinaryOperator 0x55860cadc2f0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55860cadc2a0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55860cadc230 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|     |   | `-DeclRefExpr 0x55860cadc210 <col:14> 'T *' lvalue Var 0x55860cadc0d8 's' 'T *'
|     |   `-DeclRefExpr 0x55860cadc2d0 <col:18> 'const V' lvalue ParmVar 0x55860cab3ec8 'value' 'const V &'
|     `-ReturnStmt 0x55860cadc370 <line:725:9, col:17>
|       `-UnaryOperator 0x55860cadc358 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860cadc348 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860cab4478 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55860cab40e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860cab43d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55860cab4190 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab4210 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab42b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55860cadd1a0 <col:65, line:737:5>
|     |-DeclStmt 0x55860cadc418 <line:732:9, col:26>
|     | `-VarDecl 0x55860cadc3b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860cadd168 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55860cadd188 <line:733:13, col:58>
|       | `-VarDecl 0x55860cadc440 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860cadc620 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860cadc5f0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860cadc5d8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860cadc5b8 <col:26, col:58> 'String' (CXXTemporary 0x55860cadc5b8)
|       |           `-CXXMemberCallExpr 0x55860cadc548 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860cadc4b8 <col:26> '<bound member function type>' ->find 0x55860cad4438
|       |             | `-CXXThisExpr 0x55860cadc4a8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860cadc580 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cadc4e8 <col:31> 'const char *' lvalue ParmVar 0x55860cab4190 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860cadc598 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cadc508 <col:40> 'int' lvalue ParmVar 0x55860cab4210 'flags' 'int'
|       |             `-DeclRefExpr 0x55860cadc528 <col:47> 'Args::Slot *' lvalue Var 0x55860cadc3b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860cadc6d8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860cadc6c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860cadc6a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860cadc670 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |       `-ImplicitCastExpr 0x55860cadc658 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860cadc638 <col:20> 'String' lvalue Var 0x55860cadc440 'str' 'String'
|       `-CompoundStmt 0x55860cadd148 <col:61, line:736:9>
|         |-DeclStmt 0x55860cadcb90 <line:734:13, col:76>
|         | `-VarDecl 0x55860cadc728 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55860cadcb60 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860cadcad0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860cadcb18 <col:60> 'T' lvalue ParmVar 0x55860cab42b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55860cadcb48 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860cadcb38 <col:71> 'Args *' this
|         `-CallExpr 0x55860cadd118 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55860cadcbb8 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|           | `-CXXThisExpr 0x55860cadcba8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860cadd0d8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55860cadcbe8 <col:23> 'T *' lvalue Var 0x55860cadc728 's' 'T *'
|           | `-CallExpr 0x55860cadd098 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860cadce70 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55860cadcf70 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55860cadcf90 <col:86> 'String' lvalue Var 0x55860cadc440 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860cadd040 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860cadcfd0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|           |   | `-DeclRefExpr 0x55860cadcfb0 <col:92> 'T *' lvalue Var 0x55860cadc728 's' 'T *'
|           |   `-UnaryOperator 0x55860cadd080 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860cadd070 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55860cadd0f8 <col:103> 'Args::Slot *' lvalue Var 0x55860cadc3b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cab49c8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55860cab44e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860cab4568 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860cab4928 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55860cab4628 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab46a8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab4748 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55860cab47e8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55860cade040 <col:88, line:745:5>
|     |-DeclStmt 0x55860cadd238 <line:741:9, col:26>
|     | `-VarDecl 0x55860cadd1d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860cadd458 <line:742:9, col:55>
|     | `-VarDecl 0x55860cadd260 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55860cadd440 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55860cadd410 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55860cadd3f8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55860cadd3d8 <col:22, col:54> 'String' (CXXTemporary 0x55860cadd3d8)
|     |           `-CXXMemberCallExpr 0x55860cadd368 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55860cadd2d8 <col:22> '<bound member function type>' ->find 0x55860cad4438
|     |             | `-CXXThisExpr 0x55860cadd2c8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55860cadd3a0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860cadd308 <col:27> 'const char *' lvalue ParmVar 0x55860cab4628 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55860cadd3b8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860cadd328 <col:36> 'int' lvalue ParmVar 0x55860cab46a8 'flags' 'int'
|     |             `-DeclRefExpr 0x55860cadd348 <col:43> 'Args::Slot *' lvalue Var 0x55860cadd1d0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55860cadd830 <line:743:9, col:72>
|     | `-VarDecl 0x55860cadd4a8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860cadd800 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860cadd770 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55860cadd7b8 <col:56> 'T' lvalue ParmVar 0x55860cab4748 'variable' 'T &'
|     |     `-UnaryOperator 0x55860cadd7e8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860cadd7d8 <col:67> 'Args *' this
|     `-CallExpr 0x55860cade010 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55860cadd858 <col:9> '<bound member function type>' ->postparse 0x55860cad4648
|       | `-CXXThisExpr 0x55860cadd848 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55860caddfd0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55860cadd888 <col:19> 'T *' lvalue Var 0x55860cadd4a8 's' 'T *'
|       | `-ParenExpr 0x55860caddfb0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55860caddf80 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55860caddf68 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55860caddf50 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55860caddf30 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55860caddf00 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |     |       `-ImplicitCastExpr 0x55860caddee8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55860cadd8a8 <col:25> 'String' lvalue Var 0x55860cadd260 'str' 'String'
|       |     |-CallExpr 0x55860caddd58 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55860caddb30 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55860caddc30 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55860caddc50 <col:89> 'String' lvalue Var 0x55860cadd260 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55860caddd00 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55860caddc90 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|       |     | | `-DeclRefExpr 0x55860caddc70 <col:95> 'T *' lvalue Var 0x55860cadd4a8 's' 'T *'
|       |     | `-UnaryOperator 0x55860caddd40 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55860caddd30 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55860caddec8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55860caddea8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55860cadde78 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55860cadde28 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55860cadddb8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|       |         | | `-DeclRefExpr 0x55860caddd98 <col:109> 'T *' lvalue Var 0x55860cadd4a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55860cadde58 <col:113> 'const V' lvalue ParmVar 0x55860cab47e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55860cadde98 <col:120> 'bool' true
|       `-DeclRefExpr 0x55860caddff0 <col:128> 'Args::Slot *' lvalue Var 0x55860cadd1d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cab4ef8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55860cab4a40 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cab4ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cab4e58 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860cab4b78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cab4bf8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860cab4c70 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55860cab4d18 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55860cadec38 <col:75, line:754:5>
|     |-DeclStmt 0x55860cade0e8 <line:749:9, col:26>
|     | `-VarDecl 0x55860cade080 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860cadec00 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55860cadec20 <line:750:13, col:58>
|       | `-VarDecl 0x55860cade110 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860cade2f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860cade2c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860cade2a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860cade288 <col:26, col:58> 'String' (CXXTemporary 0x55860cade288)
|       |           `-CXXMemberCallExpr 0x55860cade218 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860cade188 <col:26> '<bound member function type>' ->find 0x55860cad4438
|       |             | `-CXXThisExpr 0x55860cade178 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860cade250 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cade1b8 <col:31> 'const char *' lvalue ParmVar 0x55860cab4b78 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860cade268 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cade1d8 <col:40> 'int' lvalue ParmVar 0x55860cab4bf8 'flags' 'int'
|       |             `-DeclRefExpr 0x55860cade1f8 <col:47> 'Args::Slot *' lvalue Var 0x55860cade080 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860cade3a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860cade390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860cade370 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860cade340 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |       `-ImplicitCastExpr 0x55860cade328 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860cade308 <col:20> 'String' lvalue Var 0x55860cade110 'str' 'String'
|       `-CompoundStmt 0x55860cadebe0 <col:61, line:753:9>
|         |-DeclStmt 0x55860cade780 <line:751:13, col:63>
|         | `-VarDecl 0x55860cade3f8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55860cade750 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860cade6c0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860cade708 <col:47> 'T' lvalue ParmVar 0x55860cab4d18 'variable' 'T &'
|         |     `-UnaryOperator 0x55860cade738 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860cade728 <col:58> 'Args *' this
|         `-CallExpr 0x55860cadebb0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55860cade7a8 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|           | `-CXXThisExpr 0x55860cade798 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860cadeb70 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55860cade7d8 <col:23> 'T *' lvalue Var 0x55860cade3f8 's' 'T *'
|           | `-CallExpr 0x55860cadeb30 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860cade9c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55860cadea08 <col:56> 'P' lvalue ParmVar 0x55860cab4c70 'parser' 'P'
|           |   |-DeclRefExpr 0x55860cadea28 <col:64> 'String' lvalue Var 0x55860cade110 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860cadead8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860cadea68 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|           |   | `-DeclRefExpr 0x55860cadea48 <col:70> 'T *' lvalue Var 0x55860cade3f8 's' 'T *'
|           |   `-UnaryOperator 0x55860cadeb18 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860cadeb08 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55860cadeb90 <col:81> 'Args::Slot *' lvalue Var 0x55860cade080 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cabcbe8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55860cab4f70 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860cab4fe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55860cab5068 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860cabcb48 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55860cab5130 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabc840 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabc8b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55860cabc958 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55860cabc9f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55860cae1c88 <col:98, line:762:5>
|     |-DeclStmt 0x55860cadecd0 <line:758:9, col:26>
|     | `-VarDecl 0x55860cadec68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860cae11b8 <line:759:9, col:55>
|     | `-VarDecl 0x55860cae0fc0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55860cae11a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55860cae1170 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55860cae1158 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55860cae1138 <col:22, col:54> 'String' (CXXTemporary 0x55860cae1138)
|     |           `-CXXMemberCallExpr 0x55860cae10c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55860cae1038 <col:22> '<bound member function type>' ->find 0x55860cad4438
|     |             | `-CXXThisExpr 0x55860cae1028 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55860cae1100 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860cae1068 <col:27> 'const char *' lvalue ParmVar 0x55860cab5130 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55860cae1118 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860cae1088 <col:36> 'int' lvalue ParmVar 0x55860cabc840 'flags' 'int'
|     |             `-DeclRefExpr 0x55860cae10a8 <col:43> 'Args::Slot *' lvalue Var 0x55860cadec68 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55860cae15d0 <line:760:9, col:59>
|     | `-VarDecl 0x55860cae1208 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860cae15a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860cae1510 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55860cae1558 <col:43> 'T' lvalue ParmVar 0x55860cabc958 'variable' 'T &'
|     |     `-UnaryOperator 0x55860cae1588 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860cae1578 <col:54> 'Args *' this
|     `-CallExpr 0x55860cae1c58 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55860cae15f8 <col:9> '<bound member function type>' ->postparse 0x55860cad4648
|       | `-CXXThisExpr 0x55860cae15e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55860cae1c18 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55860cae1628 <col:19> 'T *' lvalue Var 0x55860cae1208 's' 'T *'
|       | `-ParenExpr 0x55860cae1bf8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55860cae1bc8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55860cae1bb0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55860cae1b98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55860cae1b78 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55860cae1b48 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |     |       `-ImplicitCastExpr 0x55860cae1b30 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55860cae1648 <col:25> 'String' lvalue Var 0x55860cae0fc0 'str' 'String'
|       |     |-CallExpr 0x55860cae19a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55860cae1830 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55860cae1878 <col:59> 'P' lvalue ParmVar 0x55860cabc8b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55860cae1898 <col:67> 'String' lvalue Var 0x55860cae0fc0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55860cae1948 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55860cae18d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|       |     | | `-DeclRefExpr 0x55860cae18b8 <col:73> 'T *' lvalue Var 0x55860cae1208 's' 'T *'
|       |     | `-UnaryOperator 0x55860cae1988 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55860cae1978 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55860cae1b10 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55860cae1af0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55860cae1ac0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55860cae1a70 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55860cae1a00 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|       |         | | `-DeclRefExpr 0x55860cae19e0 <col:87> 'T *' lvalue Var 0x55860cae1208 's' 'T *'
|       |         | `-DeclRefExpr 0x55860cae1aa0 <col:91> 'const V' lvalue ParmVar 0x55860cabc9f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55860cae1ae0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55860cae1c38 <col:106> 'Args::Slot *' lvalue Var 0x55860cadec68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cabd258 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55860cabcc68 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cabcce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860cabcd68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860cabd1b8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860cabce30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabceb0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabcf28 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55860cabcfc8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55860cabd068 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55860cae2c68 <col:60, line:773:5>
|     |-DeclStmt 0x55860cae1d30 <line:767:9, col:26>
|     | `-VarDecl 0x55860cae1cc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860cae2c30 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55860cae2c50 <line:768:13, col:58>
|       | `-VarDecl 0x55860cae1d58 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860cae1f38 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860cae1f08 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860cae1ef0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860cae1ed0 <col:26, col:58> 'String' (CXXTemporary 0x55860cae1ed0)
|       |           `-CXXMemberCallExpr 0x55860cae1e60 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860cae1dd0 <col:26> '<bound member function type>' ->find 0x55860cad4438
|       |             | `-CXXThisExpr 0x55860cae1dc0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860cae1e98 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cae1e00 <col:31> 'const char *' lvalue ParmVar 0x55860cabce30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860cae1eb0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cae1e20 <col:40> 'int' lvalue ParmVar 0x55860cabceb0 'flags' 'int'
|       |             `-DeclRefExpr 0x55860cae1e40 <col:47> 'Args::Slot *' lvalue Var 0x55860cae1cc8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860cae1ff0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860cae1fd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860cae1fb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860cae1f88 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |       `-ImplicitCastExpr 0x55860cae1f70 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860cae1f50 <col:20> 'String' lvalue Var 0x55860cae1d58 'str' 'String'
|       `-CompoundStmt 0x55860cae2c08 <col:61, line:772:9>
|         |-DeclStmt 0x55860cae2330 <line:769:13, col:66>
|         | `-VarDecl 0x55860cae2048 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55860cae2300 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860cae2270 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860cae22b8 <col:49> 'T1' lvalue ParmVar 0x55860cabcfc8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55860cae22e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860cae22d8 <col:61> 'Args *' this
|         |-DeclStmt 0x55860cae26a0 <line:770:13, col:66>
|         | `-VarDecl 0x55860cae23b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55860cae2670 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860cae25e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860cae2628 <col:49> 'T2' lvalue ParmVar 0x55860cabd068 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55860cae2658 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860cae2648 <col:61> 'Args *' this
|         `-CallExpr 0x55860cae2bd8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55860cae26c8 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|           | `-CXXThisExpr 0x55860cae26b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860cae2b98 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55860cae2738 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55860cae26f8 <col:23> 'T1 *' lvalue Var 0x55860cae2048 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55860cae2718 <col:29> 'T2 *' lvalue Var 0x55860cae23b8 's2' 'T2 *'
|           | `-CallExpr 0x55860cae2b50 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860cae2920 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55860cae2968 <col:63> 'P' lvalue ParmVar 0x55860cabcf28 'parser' 'P'
|           |   |-DeclRefExpr 0x55860cae2988 <col:71> 'String' lvalue Var 0x55860cae1d58 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860cae2a38 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860cae29c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|           |   | `-DeclRefExpr 0x55860cae29a8 <col:77> 'T1 *' lvalue Var 0x55860cae2048 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55860cae2af8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860cae2a88 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|           |   | `-DeclRefExpr 0x55860cae2a68 <col:82> 'T2 *' lvalue Var 0x55860cae23b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55860cae2b38 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860cae2b28 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55860cae2bb8 <col:94> 'Args::Slot *' lvalue Var 0x55860cae1cc8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cabd648 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55860cabd2d8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860cabd5a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55860cabd390 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabd410 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabd488 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55860cae3180 <col:67, line:780:5>
|     |-DeclStmt 0x55860cae2d00 <line:777:9, col:26>
|     | `-VarDecl 0x55860cae2c98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860cae3148 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55860cae3168 <line:778:13, col:58>
|       | `-VarDecl 0x55860cae2d28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860cae2f08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860cae2ed8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860cae2ec0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860cae2ea0 <col:26, col:58> 'String' (CXXTemporary 0x55860cae2ea0)
|       |           `-CXXMemberCallExpr 0x55860cae2e30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860cae2da0 <col:26> '<bound member function type>' ->find 0x55860cad4438
|       |             | `-CXXThisExpr 0x55860cae2d90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860cae2e68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cae2dd0 <col:31> 'const char *' lvalue ParmVar 0x55860cabd390 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860cae2e80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860cae2df0 <col:40> 'int' lvalue ParmVar 0x55860cabd410 'flags' 'int'
|       |             `-DeclRefExpr 0x55860cae2e10 <col:47> 'Args::Slot *' lvalue Var 0x55860cae2c98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860cae2fc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860cae2fa8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860cae2f88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860cae2f58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|       |       `-ImplicitCastExpr 0x55860cae2f40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860cae2f20 <col:20> 'String' lvalue Var 0x55860cae2d28 'str' 'String'
|       `-CallExpr 0x55860cae3118 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55860cae2fe8 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|         | `-CXXThisExpr 0x55860cae2fd8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55860cae30c8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55860cae3038 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55860cae3018 <col:23> 'P' lvalue ParmVar 0x55860cabd488 'parser' 'P'
|         | |-DeclRefExpr 0x55860cae3080 <col:36> 'String' lvalue Var 0x55860cae2d28 'str' 'String'
|         | `-UnaryOperator 0x55860cae30b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55860cae30a0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55860cae30f8 <col:49> 'Args::Slot *' lvalue Var 0x55860cae2c98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860cabd9e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55860cabd6b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860cabd948 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55860cabd770 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabd7f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabd868 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55860cae3af0 <col:71, line:792:5>
|     |-DeclStmt 0x55860cae3218 <line:784:9, col:26>
|     | `-VarDecl 0x55860cae31b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860cae32e8 <line:785:9, col:29>
|     | `-VarDecl 0x55860cae3248 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860cae32d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860cae32b0 <col:28> 'int' 1
|     |-WhileStmt 0x55860cae39a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55860cae39c0 <line:786:16, col:61>
|     | | `-VarDecl 0x55860cae3310 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860cae34f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860cae34c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860cae34a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860cae3488 <col:29, col:61> 'String' (CXXTemporary 0x55860cae3488)
|     | |           `-CXXMemberCallExpr 0x55860cae3418 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860cae3388 <col:29> '<bound member function type>' ->find 0x55860cad4438
|     | |             | `-CXXThisExpr 0x55860cae3378 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860cae3450 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae33b8 <col:34> 'const char *' lvalue ParmVar 0x55860cabd770 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860cae3468 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae33d8 <col:43> 'int' lvalue ParmVar 0x55860cabd7f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860cae33f8 <col:50> 'Args::Slot *' lvalue Var 0x55860cae31b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860cae35a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860cae3590 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860cae3570 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860cae3540 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|     | |       `-ImplicitCastExpr 0x55860cae3528 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860cae3508 <col:23> 'String' lvalue Var 0x55860cae3310 'str' 'String'
|     | `-CompoundStmt 0x55860cae3978 <col:64, line:790:9>
|     |   |-CallExpr 0x55860cae3700 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55860cae35d0 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|     |   | | `-CXXThisExpr 0x55860cae35c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55860cae36b0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55860cae3620 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55860cae3600 <col:23> 'P' lvalue ParmVar 0x55860cabd868 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55860cae3668 <col:36> 'String' lvalue Var 0x55860cae3310 'str' 'String'
|     |   | | `-UnaryOperator 0x55860cae3698 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55860cae3688 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55860cae36e0 <col:49> 'Args::Slot *' lvalue Var 0x55860cae31b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55860cae3898 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860cae3730 <col:13> 'int' lvalue Var 0x55860cae3248 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860cae3880 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860cae3860 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860cae37c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860cae37a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860cae3790 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860cae3750 <col:28> 'int' lvalue Var 0x55860cae3248 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860cae3770 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860cae3848 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860cae3818 <col:49> 'bool' lvalue ->_read_status 0x55860ca9cce0
|     |   |         `-ImplicitCastExpr 0x55860cae37f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860cae37e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860cae3948 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860cae38b8 <col:13> 'int' lvalue ParmVar 0x55860cabd7f0 'flags' 'int'
|     |     `-UnaryOperator 0x55860cae3930 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860cae3918 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860cae38f8 <col:23> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860cae3ad0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860cae3a08 <col:9> 'bool' lvalue ->_read_status 0x55860ca9cce0
|       | `-ImplicitCastExpr 0x55860cae39e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860cae39d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860cae3ab0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860cae3a90 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860cae3a78 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860cae3a38 <col:25> 'int' lvalue Var 0x55860cae3248 'read_status' 'int'
|           `-IntegerLiteral 0x55860cae3a58 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55860cabdec8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55860cabda58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cabdad8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cabde28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860cabdb98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabdc18 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabdc90 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55860cabdd38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55860cae4a80 <col:84, line:805:5>
|     |-DeclStmt 0x55860cae3b98 <line:796:9, col:26>
|     | `-VarDecl 0x55860cae3b30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860cae3c68 <line:797:9, col:29>
|     | `-VarDecl 0x55860cae3bc8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860cae3c50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860cae3c30 <col:28> 'int' 1
|     |-DeclStmt 0x55860cae3fa0 <line:798:9, col:71>
|     | `-VarDecl 0x55860cae3cb8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860cae3f70 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860cae3ee0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55860cae3f28 <col:55> 'T' lvalue ParmVar 0x55860cabdd38 'variable' 'T &'
|     |     `-UnaryOperator 0x55860cae3f58 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860cae3f48 <col:66> 'Args *' this
|     |-WhileStmt 0x55860cae4930 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55860cae4950 <line:799:16, col:61>
|     | | `-VarDecl 0x55860cae3fc8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860cae41a8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860cae4178 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860cae4160 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860cae4140 <col:29, col:61> 'String' (CXXTemporary 0x55860cae4140)
|     | |           `-CXXMemberCallExpr 0x55860cae40d0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860cae4040 <col:29> '<bound member function type>' ->find 0x55860cad4438
|     | |             | `-CXXThisExpr 0x55860cae4030 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860cae4108 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae4070 <col:34> 'const char *' lvalue ParmVar 0x55860cabdb98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860cae4120 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae4090 <col:43> 'int' lvalue ParmVar 0x55860cabdc18 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860cae40b0 <col:50> 'Args::Slot *' lvalue Var 0x55860cae3b30 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860cae4260 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860cae4248 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860cae4228 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860cae41f8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|     | |       `-ImplicitCastExpr 0x55860cae41e0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860cae41c0 <col:23> 'String' lvalue Var 0x55860cae3fc8 'str' 'String'
|     | `-CompoundStmt 0x55860cae4908 <col:64, line:803:9>
|     |   |-CallExpr 0x55860cae4690 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55860cae4288 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|     |   | | `-CXXThisExpr 0x55860cae4278 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55860cae4650 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55860cae42b8 <col:23> 'T *' lvalue Var 0x55860cae3cb8 's' 'T *'
|     |   | | `-CallExpr 0x55860cae4610 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55860cae44a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55860cae44e8 <col:56> 'P' lvalue ParmVar 0x55860cabdc90 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55860cae4508 <col:64> 'String' lvalue Var 0x55860cae3fc8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55860cae45b8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55860cae4548 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|     |   | |   | `-DeclRefExpr 0x55860cae4528 <col:70> 'T *' lvalue Var 0x55860cae3cb8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55860cae45f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55860cae45e8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55860cae4670 <col:81> 'Args::Slot *' lvalue Var 0x55860cae3b30 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55860cae4828 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860cae46c0 <col:13> 'int' lvalue Var 0x55860cae3bc8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860cae4810 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860cae47f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860cae4758 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860cae4738 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860cae4720 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860cae46e0 <col:28> 'int' lvalue Var 0x55860cae3bc8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860cae4700 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860cae47d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860cae47a8 <col:49> 'bool' lvalue ->_read_status 0x55860ca9cce0
|     |   |         `-ImplicitCastExpr 0x55860cae4788 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860cae4778 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860cae48d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860cae4848 <col:13> 'int' lvalue ParmVar 0x55860cabdc18 'flags' 'int'
|     |     `-UnaryOperator 0x55860cae48c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860cae48a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860cae4888 <col:23> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860cae4a60 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860cae4998 <col:9> 'bool' lvalue ->_read_status 0x55860ca9cce0
|       | `-ImplicitCastExpr 0x55860cae4978 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860cae4968 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860cae4a40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860cae4a20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860cae4a08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860cae49c8 <col:25> 'int' lvalue Var 0x55860cae3bc8 'read_status' 'int'
|           `-IntegerLiteral 0x55860cae49e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55860cabe4a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55860cabdf40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860cabdfb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860cabe408 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860cabe078 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860cabe0f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55860cabe170 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55860cabe2c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55860cae5888 <col:87, line:821:5>
|     |-DeclStmt 0x55860cae4b30 <line:809:9, col:26>
|     | `-VarDecl 0x55860cae4ac8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860cae4c00 <line:810:9, col:29>
|     | `-VarDecl 0x55860cae4b60 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860cae4be8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860cae4bc8 <col:28> 'int' 1
|     |-DeclStmt 0x55860cae4e48 <line:811:9, col:38>
|     | `-VarDecl 0x55860cae4d30 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55860cae4e20 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55860cae4da8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55860cae4e00 <col:29> 'Vector<T>' lvalue ParmVar 0x55860cabe2c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55860cae5738 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55860cae5758 <line:812:16, col:61>
|     | | `-VarDecl 0x55860cae4e70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860cae5050 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860cae5020 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860cae5008 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860cae4fe8 <col:29, col:61> 'String' (CXXTemporary 0x55860cae4fe8)
|     | |           `-CXXMemberCallExpr 0x55860cae4f78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860cae4ee8 <col:29> '<bound member function type>' ->find 0x55860cad4438
|     | |             | `-CXXThisExpr 0x55860cae4ed8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860cae4fb0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae4f18 <col:34> 'const char *' lvalue ParmVar 0x55860cabe078 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860cae4fc8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860cae4f38 <col:43> 'int' lvalue ParmVar 0x55860cabe0f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860cae4f58 <col:50> 'Args::Slot *' lvalue Var 0x55860cae4ac8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860cae5108 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860cae50f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860cae50d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860cae50a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860c7ec788
|     | |       `-ImplicitCastExpr 0x55860cae5088 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860cae5068 <col:23> 'String' lvalue Var 0x55860cae4e70 'str' 'String'
|     | `-CompoundStmt 0x55860cae5700 <col:64, line:819:9>
|     |   |-DeclStmt 0x55860cae51c8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55860cae5130 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55860cae51a8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55860cae5348 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55860cae51f0 <col:13> '<bound member function type>' ->postparse 0x55860cad4648
|     |   | | `-CXXThisExpr 0x55860cae51e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55860cae52f0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55860cae5240 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55860cae5220 <col:23> 'P' lvalue ParmVar 0x55860cabe170 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55860cae5288 <col:36> 'String' lvalue Var 0x55860cae4e70 'str' 'String'
|     |   | | |-DeclRefExpr 0x55860cae52a8 <col:41> 'T' lvalue Var 0x55860cae5130 'sx' 'T'
|     |   | | `-UnaryOperator 0x55860cae52d8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55860cae52c8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55860cae5328 <col:53> 'Args::Slot *' lvalue Var 0x55860cae4ac8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55860cae54a0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55860cae53d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55860cae53a8 <col:17> 'bool' lvalue ->_read_status 0x55860ca9cce0
|     |   | |   `-ImplicitCastExpr 0x55860cae5388 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55860cae5378 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55860cae5478 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55860cae5410 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55860cae53f0 <col:17> 'Vector<T> *' lvalue Var 0x55860cae4d30 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55860cae5458 <col:30> 'T' lvalue Var 0x55860cae5130 'sx' 'T'
|     |   |-BinaryOperator 0x55860cae5620 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860cae54b8 <col:13> 'int' lvalue Var 0x55860cae4b60 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860cae5608 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860cae55e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860cae5550 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860cae5530 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860cae5518 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860cae54d8 <col:28> 'int' lvalue Var 0x55860cae4b60 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860cae54f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860cae55d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860cae55a0 <col:49> 'bool' lvalue ->_read_status 0x55860ca9cce0
|     |   |         `-ImplicitCastExpr 0x55860cae5580 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860cae5570 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860cae56d0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860cae5640 <col:13> 'int' lvalue ParmVar 0x55860cabe0f8 'flags' 'int'
|     |     `-UnaryOperator 0x55860cae56b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860cae56a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860cae5680 <col:23> 'const int' lvalue Var 0x55860caa4248 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860cae5868 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860cae57a0 <col:9> 'bool' lvalue ->_read_status 0x55860ca9cce0
|       | `-ImplicitCastExpr 0x55860cae5780 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860cae5770 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860cae5848 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860cae5828 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860cae5810 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860cae57d0 <col:25> 'int' lvalue Var 0x55860cae4b60 'read_status' 'int'
|           `-IntegerLiteral 0x55860cae57f0 <col:40> 'int' 1
|-AccessSpecDecl 0x55860cabe520 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55860cabe548 prev 0x55860caa2548 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55860cabe640 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55860cabe730 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55860cae58c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55860cabe820 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55860cae58d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55860cabe920 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55860cabe9d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55860cabea78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55860cabea78
| | `-ParmVarDecl 0x55860cabeb88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55860cabf348 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55860cabf348
|   `-ParmVarDecl 0x55860cabf458 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55860cabebf8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55860cabed58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55860cabef50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55860cabee00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55860cabee78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55860cae5ab0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55860cabf208 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55860cae5920 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55860cae58e0 <col:20> 'void *' lvalue ParmVar 0x55860cabee00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55860cabf270 '_slot' 'char *'
| | | `-CXXNewExpr 0x55860cae59a8 <col:32, col:45> 'char *' array Function 0x55860c610408 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55860cae5990 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55860cae5960 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55860cabee78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55860cabf2d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55860cae5a70 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55860cae5a30 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55860cabee78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55860cae5b30 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55860cabf050 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55860cabe820 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55860cae5bb8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55860cae5b98 <line:840:13, col:22> 'void' array Function 0x55860c610768 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55860cae5b80 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55860cae5b50 <col:22> 'char *' lvalue ->_slot 0x55860cabf270
| |         `-CXXThisExpr 0x55860cae5b40 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55860cabf150 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55860cabe920 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55860cae5da8 <col:22, line:844:9>
| |   `-CallExpr 0x55860cae5d10 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55860cae5cf8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55860cae5cd8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55860c71c1e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55860cae5d48 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55860cae5c28 <col:20> 'void *' lvalue ->_ptr 0x55860cabf208
| |     |   `-CXXThisExpr 0x55860cae5c18 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55860cae5d78 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55860cae5d60 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55860cae5c68 <col:26> 'char *' lvalue ->_slot 0x55860cabf270
| |     |     `-CXXThisExpr 0x55860cae5c58 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55860cae5d90 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55860cae5ca8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55860cabf2d0
| |         `-CXXThisExpr 0x55860cae5c98 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55860cabf208 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55860cabf270 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55860cabf2d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55860cabf4c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55860cabf4c8
| | `-ParmVarDecl 0x55860cabf5d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55860cabf678 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55860cabf678
|   `-ParmVarDecl 0x55860cabf788 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55860cabf928 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55860cabf7f8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55860cabf898 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55860cabfbc0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55860cabfdb8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55860cabfc88 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55860cabff38 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55860cae5de0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55860cae5dc0 <col:20> 'T *' lvalue ParmVar 0x55860cabfc88 'ptr' 'T *'
|   | `-CompoundStmt 0x55860cae5e30 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55860cabfe88 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55860cabe920 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55860cae5fe0 <col:22, line:857:9>
|   |   `-CallExpr 0x55860cae5fb0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55860cae5e40 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55860c7d4918 0x55860c77ec48
|   |     |-CXXOperatorCallExpr 0x55860cae5f40 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55860cae5ed0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860c9e1ae8 0x55860c9e1708 0x55860c9e1338 0x55860c9e0f58 0x55860c9e0b78 0x55860c9e07a8
|   |     | `-MemberExpr 0x55860cae5ea0 <col:29> 'T *' lvalue ->_ptr 0x55860cabff38
|   |     |   `-CXXThisExpr 0x55860cae5e90 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55860cae5f80 <col:35> 'T' lvalue ->_slot 0x55860cabff98
|   |       `-CXXThisExpr 0x55860cae5f70 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55860cabff38 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55860cabff98 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55860cac0000 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55860cac0100 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55860cac0150 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860cac00e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55860cac00c0 <col:31> 'int' 48
|-FieldDecl 0x55860cac0178 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55860cac01d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55860cac0238 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55860cac0370 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55860cad3ce0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55860cad3d40 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55860cad3df0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55860cad4018 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55860cad3f20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55860cad4168 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55860cad40d8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55860cad4438 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55860cad4228 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55860cad42a8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55860cad4350 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55860cad4648 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55860cad4500 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55860cad4578 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55860cad4718 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55860cad4868 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55860cad47d0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55860cad4bf8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55860cad4928 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55860cad49a8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55860cad4a50 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55860cad4b08 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55860cad4e20 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55860cad4cd0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55860cad4d48 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55860cad5138 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55860cad4ed0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55860cad5098 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55860cad4fa8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c7dd640 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860c7dd758 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55860c7dd7e8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55860c7dd8b8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55860c7dd9a0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c7ddbb8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860c7dda60 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7ddd68 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55860c7ddc70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55860c7ddeb0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55860c7dde20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55860c7ddff8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860c7ddf68 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7de140 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860c7de0b0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7de208 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55860c7de350 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55860c7de2c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55860c7de418 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55860c7de560 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55860c7de4d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55860c7de6d8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55860c7de618 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7de820 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55860c7de790 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7de8e8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55860c7deaa8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860c7de998 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860c7dea10 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7decf8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860c7deb68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c7debe0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860c7deda8 <col:86> "" ""
|-CXXMethodDecl 0x55860c7df018 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55860c7dee88 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55860c7def00 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7df1c8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55860c7df0d8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55860c7df378 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55860c7df280 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55860c7df648 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55860c7df430 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55860c7df4a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860c7df520 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7df928 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55860c7df710 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55860c7df788 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c7df800 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860c7df9e0 <col:115> "" ""
|-AccessSpecDecl 0x55860c7dfa50 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55860c7dfa88 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c7dff90 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55860c7dff90
| `-ParmVarDecl 0x55860c7e0098 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55860c7e0138 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55860c7e0138
| `-ParmVarDecl 0x55860c7e0248 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55860c815878 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860ca088a0 <col:7>
|-CXXConstructorDecl 0x55860c815950 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55860c815950
| `-ParmVarDecl 0x55860c815a68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55860c815ad8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55860c815ad8
| `-ParmVarDecl 0x55860c815be8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55860ca0b2a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c9f7448 prev 0x55860c9ec650 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860c9f7540 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55860c9f7630 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55860c9f7758 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55860c9f78d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55860c9f7a58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55860c9f7bd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55860ca08a08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860ca09278 <col:11>
|-CXXDestructorDecl 0x55860ca08ae0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55860ca08c18 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55860ca08c18
| `-ParmVarDecl 0x55860ca08d28 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55860ca08dc8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860ca08dc8
| `-ParmVarDecl 0x55860ca08ed8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55860ca0bc98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860ca0bda8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55860ca0c028 <col:11>
|   `-ReturnStmt 0x55860ca0c018 <col:11>
|     `-UnaryOperator 0x55860ca0c000 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860ca0bff0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55860ca0be18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860ca0be18
  `-ParmVarDecl 0x55860ca0bf28 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c9f7c40 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860c9f7d58 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55860c9f7df8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55860c9f7e60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55860c9f7ec8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55860c9f7f30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55860c9f7f90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55860c9f8050 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55860c9f80b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55860c9f8110 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55860ca08918 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55860c9f7df8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55860ca09288 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55860ca092e0 <col:12>
|-CXXConstructorDecl 0x55860ca08f48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55860ca08f48
| `-ParmVarDecl 0x55860ca09058 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55860ca090f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55860ca090f8
| `-ParmVarDecl 0x55860ca09208 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55860ca0b380 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860c9e5d60 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860c9e5e78 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55860c9e5f08 <col:16, col:22> col:16 public
|-EnumDecl 0x55860c9e5f30 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55860c9e6030 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55860c9e6110 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9e6010 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55860c9e5ff0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55860c9e60c0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55860c9e6128 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c9e60a0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55860c9e6080 <col:22> 'int' 64
|-CXXMethodDecl 0x55860c9e6468 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55860c9e6150 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c9e61d0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55860c9e6248 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c9e62c0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e6528 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e6728 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55860c9e65a0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55860c9e6618 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e67d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e6938 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55860c9e6848 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e69e0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55860c9e6d40 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55860c9e6cd0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55860c9e6c70 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55860c9e6c30 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55860c4bd4e0 'void'
|       |-PointerType 0x55860c765ee0 'unsigned char *'
|       | `-BuiltinType 0x55860c4bd5e0 'unsigned char'
|       |-TypedefType 0x55860c5624b0 'size_t' sugar
|       | |-Typedef 0x55860c52dbe0 'size_t'
|       | `-BuiltinType 0x55860c4bd640 'unsigned long'
|       `-PointerType 0x55860c4bdce0 'void *'
|         `-BuiltinType 0x55860c4bd4e0 'void'
|-CXXMethodDecl 0x55860c9e71b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55860c9e6db0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55860c9e6e28 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c9e6ec0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55860c9e6f40 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55860ca018b0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55860ca01898 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55860ca01860 <col:58> 'int' 0
| |-ParmVarDecl 0x55860c9e6fc0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55860ca018d8 <col:76> 'int' 0
| |-ParmVarDecl 0x55860c9e7040 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55860ca018f8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55860c9e7288 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e7308 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55860c9e73c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55860c9e7468 <col:20>
| `-OptimizeNoneAttr 0x55860c9e74c0 <col:30>
|-CXXMethodDecl 0x55860c9e7538 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55860c9e75d8 <col:20>
| `-OptimizeNoneAttr 0x55860c9e7630 <col:30>
|-CXXMethodDecl 0x55860c9e76a8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55860c9e7748 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e77f8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55860c9e7898 <col:20>
| |-OptimizeNoneAttr 0x55860c9e78f0 <col:30>
| `-WarnUnusedResultAttr 0x55860c9e7918 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e7970 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55860c9e7a10 <col:20>
| `-OptimizeNoneAttr 0x55860c9e7a68 <col:30>
|-CXXMethodDecl 0x55860c9e7ab8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55860c9e7b58 <col:20>
| `-OptimizeNoneAttr 0x55860c9e7bb0 <col:30>
|-CXXMethodDecl 0x55860c9e7bf8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55860c9e7c98 <col:20>
| `-OptimizeNoneAttr 0x55860c9e7cf0 <col:30>
|-CXXMethodDecl 0x55860c9e7d38 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9e7df8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9e7ec0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860c9e7f88 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860c9e8048 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9e8168 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55860ca019c0 <col:54, line:99:5>
|   `-ReturnStmt 0x55860ca019b0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55860ca01998 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55860ca01968 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860c9f8448
|         `-CXXThisExpr 0x55860ca01958 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55860c9e8308 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55860c9e8218 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55860ca01a70 <col:67, line:103:5>
|   `-BinaryOperator 0x55860ca01a50 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55860ca019e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860c9f8448
|     | `-CXXThisExpr 0x55860ca019d8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55860ca01a38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca01a18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55860c9e8218 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55860c9e8400 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55860ca01af0 <col:33, line:107:5>
|   `-ReturnStmt 0x55860ca01ae0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55860ca01ac8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55860ca01a98 <col:16> 'void *' lvalue ->_destructor_argument 0x55860c9f84b0
|         `-CXXThisExpr 0x55860ca01a88 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55860c9e84c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55860ca02120 <col:25, line:113:5>
|   |-ParenExpr 0x55860ca01e68 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55860ca01e38 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca01ba8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55860ca01b80 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55860ca01b48 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55860ca01b18 <col:24> '<bound member function type>' ->shared 0x55860c9e7538
|   |   |       `-ImplicitCastExpr 0x55860ca01b68 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55860ca01b08 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55860ca01c08 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca01be8 <col:42> 'int' 0
|   |   `-CallExpr 0x55860ca01d98 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55860ca01d80 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca01d60 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca01dd8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca01c78 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55860ca01df0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca01ca0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca01e08 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca01cd8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55860ca01e20 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca01d48 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca01d30 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca01cf8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55860ca02068 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55860ca01e98 <col:2> 'unsigned char *' lvalue ->_head 0x55860c9f8250
|   | | `-CXXThisExpr 0x55860ca01e88 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55860ca02050 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55860ca02030 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55860ca01ed8 <col:10> 'unsigned char *' lvalue ->_data 0x55860c9f82b8
|   |     | `-CXXThisExpr 0x55860ca01ec8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55860ca02018 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55860ca01ff8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55860ca01f18 <col:18> 'unsigned char *' lvalue ->_tail 0x55860c9f8320
|   |         | `-CXXThisExpr 0x55860ca01f08 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55860ca01fe0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55860ca01fc0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55860ca01f58 <col:26> 'unsigned char *' lvalue ->_end 0x55860c9f8388
|   |             | `-CXXThisExpr 0x55860ca01f48 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55860ca01fa8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55860ca01f88 <col:33> 'int' 0
|   `-BinaryOperator 0x55860ca02100 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55860ca02098 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860c9f8448
|     | `-CXXThisExpr 0x55860ca02088 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55860ca020e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55860ca020c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55860c9e8600 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860c9e8570 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9e86a8 <col:20>
| |-OptimizeNoneAttr 0x55860c9e8700 <col:30>
| `-WarnUnusedResultAttr 0x55860c9e8728 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e87f8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860c9e8768 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9e88a0 <col:20>
| |-OptimizeNoneAttr 0x55860c9e88f8 <col:30>
| `-WarnUnusedResultAttr 0x55860c9e8920 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e8a58 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55860c9e8960 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e8b00 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e8c00 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55860c9e8b70 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9e8ca8 <col:20>
| `-OptimizeNoneAttr 0x55860c9e8d00 <col:30>
|-CXXMethodDecl 0x55860c9e8dc8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860c9e8d38 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e8e70 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e8f70 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55860c9e8ee0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860c9e9018 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e9118 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55860c9e9088 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9e91c0 <col:20>
| `-OptimizeNoneAttr 0x55860c9e9218 <col:30>
|-CXXMethodDecl 0x55860c9e93a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55860c9e9258 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55860c9e92d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55860ca01918 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55860c9e9458 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55860c9e9658 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860c9e94d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55860c9e9548 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9e9868 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860c9e9718 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860c9e9790 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9e9a78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55860c9e9928 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55860c9e99a8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55860ca01928 <col:39> 'int' 0
|-CXXMethodDecl 0x55860c9e9b48 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55860c9e9c10 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860c9e9cd8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860c9e9d98 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9e9e60 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55860c9e9fa8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55860c9e9f18 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55860c9ea178 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860c9ea068 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55860c9ea0e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9ea248 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55860c9ea308 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55860c9ea3a8 <col:20>
| `-OptimizeNoneAttr 0x55860c9ea400 <col:30>
|-CXXMethodDecl 0x55860c9ea450 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55860c9ea4f0 <col:20>
| `-OptimizeNoneAttr 0x55860c9ea548 <col:30>
|-CXXMethodDecl 0x55860c9ea598 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860c9ea658 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9ea720 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55860c9ea7c0 <col:20>
| `-OptimizeNoneAttr 0x55860c9ea818 <col:30>
|-CXXMethodDecl 0x55860c9ea968 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860c9ea858 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55860c9ea8d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9eaab8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55860c9eaa28 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9eab90 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55860c9eac50 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55860c9eacf0 <col:20>
| `-OptimizeNoneAttr 0x55860c9ead48 <col:30>
|-CXXMethodDecl 0x55860c9ead98 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55860c9eae38 <col:20>
| `-OptimizeNoneAttr 0x55860c9eae90 <col:30>
|-CXXMethodDecl 0x55860c9eaee0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860c9eafa8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55860c9eb048 <col:20>
| `-OptimizeNoneAttr 0x55860c9eb0a0 <col:30>
|-CXXMethodDecl 0x55860c9eb0e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55860c9eb208 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55860c9eb378 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55860c9eb2b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55860c9eb468 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55860c9eb508 <col:20>
| `-OptimizeNoneAttr 0x55860c9eb560 <col:30>
|-CXXMethodDecl 0x55860c9eb5b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860c9eb670 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860c9eb8a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55860c9eb720 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55860c9eb798 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9eb958 <col:20>
| `-OptimizeNoneAttr 0x55860c9eb9b0 <col:30>
|-CXXMethodDecl 0x55860c9eba58 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55860c9ebaf8 <col:20>
| `-OptimizeNoneAttr 0x55860c9ebb50 <col:30>
|-CXXMethodDecl 0x55860c9ebba0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55860c9ebc40 <col:20>
| `-OptimizeNoneAttr 0x55860c9ebc98 <col:30>
|-CXXMethodDecl 0x55860c9ebce0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55860c9ebd80 <col:20>
| `-OptimizeNoneAttr 0x55860c9ebdd8 <col:30>
|-CXXMethodDecl 0x55860c9ebed8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55860c9ebe10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55860c9ebf80 <col:20>
| `-OptimizeNoneAttr 0x55860c9ebfd8 <col:30>
|-CXXMethodDecl 0x55860c9ec198 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55860c9ec010 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55860c9ec088 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9ec248 <col:20>
| `-OptimizeNoneAttr 0x55860c9ec2a0 <col:30>
|-CXXMethodDecl 0x55860c9ec348 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55860c9ec468 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55860c9ec588 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55860c9ec628 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55860c9ec650 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55860c9ec778 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55860c9ec818 <col:20>
| `-OptimizeNoneAttr 0x55860c9ec870 <col:30>
|-CXXMethodDecl 0x55860c9ec918 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55860c9ec9b8 <col:20>
| `-OptimizeNoneAttr 0x55860c9eca10 <col:30>
|-AccessSpecDecl 0x55860c9eca38 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55860c9eca60 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55860c9ecb60 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55860c9ecbb0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c9ecb40 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55860c9ecb20 <col:14> 'int' 48
|-CXXMethodDecl 0x55860c9ecc18 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55860c9eccb8 <col:20>
| `-OptimizeNoneAttr 0x55860c9ecd10 <col:30>
|-CXXMethodDecl 0x55860c9ecd88 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55860c9ece28 <col:20>
| `-OptimizeNoneAttr 0x55860c9ece80 <col:30>
|-CXXMethodDecl 0x55860c9ecf48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55860c9eceb8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55860c9ed0e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55860c9ed288 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55860c9ed198 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55860c9ed330 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55860c9ed430 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed7e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed410 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55860c9ed3f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55860c9ed4c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed7f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed4a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55860c9ed480 <col:14> 'int' 1
| |-EnumConstantDecl 0x55860c9ed550 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed810 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed530 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55860c9ed510 <col:14> 'int' 2
| |-EnumConstantDecl 0x55860c9ed5e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed828 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed5c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55860c9ed5a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55860c9ed670 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed840 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed650 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55860c9ed630 <col:13> 'int' 4
| |-EnumConstantDecl 0x55860c9ed700 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860c9ed858 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ed6e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55860c9ed6c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55860c9ed790 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55860c9ed870 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c9ed770 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55860c9ed750 <col:14> 'int' 6
|-CXXMethodDecl 0x55860c9ed8d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55860c9ed978 <col:20>
| `-OptimizeNoneAttr 0x55860c9ed9d0 <col:30>
|-CXXMethodDecl 0x55860c9edac8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55860c9eda08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55860c9edb70 <col:20>
| `-OptimizeNoneAttr 0x55860c9edbc8 <col:30>
|-CXXMethodDecl 0x55860c9edc38 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55860c9edd60 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55860c9eded8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55860c9ede10 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55860c9edfa0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55860c9ee068 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55860c9ee1a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55860c9ee118 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55860c9ee250 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55860c9ee350 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860c9ee550 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ee330 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55860c9ee310 <col:23> 'int' 0
| |-EnumConstantDecl 0x55860c9ee3e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860c9ee568 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ee3c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55860c9ee3a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55860c9ee470 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860c9ee580 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9ee450 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55860c9ee430 <col:24> 'int' 0
| `-EnumConstantDecl 0x55860c9ee500 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55860c9ee598 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c9ee4e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55860c9ee4c0 <col:47> 'int' 16
|-CXXMethodDecl 0x55860c9ee5f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55860c9ee768 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55860c9ee6a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55860c9ee810 <col:20>
| `-OptimizeNoneAttr 0x55860c9ee868 <col:30>
|-CXXMethodDecl 0x55860c9ee8b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55860ca02240 <col:18, col:36>
|   `-ReturnStmt 0x55860ca02230 <col:20, col:33>
|     `-ImplicitCastExpr 0x55860ca02218 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55860ca021f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55860ca021c8 <col:27> '<bound member function type>' ->xanno 0x55860c9ec918
|           `-CXXThisExpr 0x55860ca021b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55860c9ee9b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55860ca02350 <col:30, col:48>
|   `-ReturnStmt 0x55860ca02340 <col:32, col:45>
|     `-ImplicitCastExpr 0x55860ca02328 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55860ca02308 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55860ca022d8 <col:39> '<bound member function type>' ->xanno 0x55860c9ec778
|           `-CXXThisExpr 0x55860ca022c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55860c9eea98 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55860ca024e8 <col:24, col:50>
|   `-ReturnStmt 0x55860ca024d8 <col:26, col:47>
|     `-UnaryOperator 0x55860ca024c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860ca024a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860ca02488 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860ca02438 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55860c9f7758
|         |   `-CXXMemberCallExpr 0x55860ca02418 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55860ca023e8 <col:34> '<bound member function type>' ->xanno 0x55860c9ec918
|         |       `-CXXThisExpr 0x55860ca023d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55860ca02468 <col:46> 'int' 0
|-CXXMethodDecl 0x55860c9eeba0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55860ca026b8 <col:36, col:62>
|   `-ReturnStmt 0x55860ca026a8 <col:38, col:59>
|     `-UnaryOperator 0x55860ca02690 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860ca02670 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860ca02658 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860ca025d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55860c9f7758
|         |   `-CXXMemberCallExpr 0x55860ca025b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860ca02580 <col:46> '<bound member function type>' ->xanno 0x55860c9ec778
|         |       `-CXXThisExpr 0x55860ca02570 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55860ca02600 <col:58> 'int' 0
|-CXXMethodDecl 0x55860c9eecb8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55860ca02850 <col:26, col:53>
|   `-ReturnStmt 0x55860ca02840 <col:28, col:50>
|     `-UnaryOperator 0x55860ca02828 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860ca02808 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55860ca027f0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860ca027a0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55860c9f7a58
|         |   `-CXXMemberCallExpr 0x55860ca02780 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55860ca02750 <col:36> '<bound member function type>' ->xanno 0x55860c9ec918
|         |       `-CXXThisExpr 0x55860ca02740 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55860ca027d0 <col:49> 'int' 0
|-CXXMethodDecl 0x55860c9eedd8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55860ca02a28 <col:38, col:65>
|   `-ReturnStmt 0x55860ca02a18 <col:40, col:62>
|     `-UnaryOperator 0x55860ca02a00 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860ca029e0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55860ca029c8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860ca02938 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55860c9f7a58
|         |   `-CXXMemberCallExpr 0x55860ca02918 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860ca028e8 <col:48> '<bound member function type>' ->xanno 0x55860c9ec778
|         |       `-CXXThisExpr 0x55860ca028d8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55860ca02968 <col:61> 'int' 0
|-CXXMethodDecl 0x55860c9eef88 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55860c9eee90 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55860ca030f8 <col:34, line:463:5>
|   |-ParenExpr 0x55860ca02f40 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55860ca02f10 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca02b78 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca02b48 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca02a98 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca02a80 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca02a40 <col:23> 'int' lvalue ParmVar 0x55860c9eee90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca02a60 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca02b28 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca02af8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca02ab8 <col:33> 'int' lvalue ParmVar 0x55860c9eee90 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55860ca02b10 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55860ca02ad8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55860ca02bd8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca02bb8 <col:56> 'int' 0
|   |   `-CallExpr 0x55860ca02e70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55860ca02e58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca02e38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca02eb0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca02cc8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55860ca02ec8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca02cf8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca02ee0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca02d30 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55860ca02ef8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca02e20 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca02e08 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca02dc8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55860ca030e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55860ca030d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55860ca030b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860ca03080 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860ca03030 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55860c9f7758
|         |   `-CXXMemberCallExpr 0x55860ca03010 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860ca02fe0 <col:9> '<bound member function type>' ->xanno 0x55860c9ec778
|         |       `-CXXThisExpr 0x55860ca02fd0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55860ca03098 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55860ca03060 <col:21> 'int' lvalue ParmVar 0x55860c9eee90 'i' 'int'
|-CXXMethodDecl 0x55860c9ef1d8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55860c9ef048 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55860c9ef0c0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55860ca03788 <col:40, line:472:5>
|   |-ParenExpr 0x55860ca035a0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55860ca03570 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca03250 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca03220 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca03170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca03158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca03118 <col:23> 'int' lvalue ParmVar 0x55860c9ef048 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca03138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca03200 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca031d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca03190 <col:33> 'int' lvalue ParmVar 0x55860c9ef048 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55860ca031e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55860ca031b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55860ca032b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca03290 <col:56> 'int' 0
|   |   `-CallExpr 0x55860ca034d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55860ca034b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca03498 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca03510 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca03320 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55860ca03528 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca03350 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca03540 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca03388 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55860ca03558 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca03480 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca03468 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca03428 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55860ca03768 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55860ca03710 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55860ca036e0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55860ca03690 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55860c9f7758
|     | |   `-CXXMemberCallExpr 0x55860ca03670 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55860ca03640 <col:2> '<bound member function type>' ->xanno 0x55860c9ec918
|     | |       `-CXXThisExpr 0x55860ca03630 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55860ca036f8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55860ca036c0 <col:14> 'int' lvalue ParmVar 0x55860c9ef048 'i' 'int'
|     `-ImplicitCastExpr 0x55860ca03750 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca03730 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55860c9ef0c0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55860c9ef398 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55860c9ef2a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860ca03f08 <col:36, line:485:5>
|   |-ParenExpr 0x55860ca03c70 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca03c40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca03920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca038f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca03800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca037e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca037a8 <col:23> 'int' lvalue ParmVar 0x55860c9ef2a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca037c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca038d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca038b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca03820 <col:33> 'int' lvalue ParmVar 0x55860c9ef2a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca03898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca03880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca03840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca03860 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860ca03980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca03960 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca03ba0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca03b88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca03b68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca03be0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca039f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860ca03bf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca03a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca03c10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca03a60 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55860ca03c28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca03b50 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca03b38 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca03af8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55860ca03ef8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55860ca03ee0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55860ca03ec8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca03e98 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55860ca03e38 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca03e08 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca03d80 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca03d60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca03d30 <col:61> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca03d20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca03e20 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca03db0 <col:74> 'int' lvalue ParmVar 0x55860c9ef2a0 'i' 'int'
|-CXXMethodDecl 0x55860c9ef5e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55860c9ef458 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860c9ef4d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55860ca04658 <col:42, line:500:5>
|   |-ParenExpr 0x55860ca043f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca043c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca040a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca04070 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca03f80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca03f68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca03f28 <col:23> 'int' lvalue ParmVar 0x55860c9ef458 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca03f48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca04050 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca04038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca03fa0 <col:33> 'int' lvalue ParmVar 0x55860c9ef458 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca04018 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca04000 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca03fc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca03fe0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860ca04100 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca040e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca04320 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca04308 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca042e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca04360 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca04170 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860ca04378 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca041a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca04390 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca041e0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55860ca043a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca042d0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca042b8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca04278 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55860ca04638 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55860ca045e8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860ca045b8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55860ca04560 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860ca04530 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860ca044e0 <col:48, col:57> 'char [48]' lvalue ->c 0x55860c9f7630
|     |     |   `-CXXMemberCallExpr 0x55860ca044c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860ca04490 <col:48> '<bound member function type>' ->xanno 0x55860c9ec918
|     |     |       `-CXXThisExpr 0x55860ca04480 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860ca04548 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860ca04510 <col:61> 'int' lvalue ParmVar 0x55860c9ef458 'i' 'int'
|     `-ImplicitCastExpr 0x55860ca04620 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca04600 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55860c9ef4d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55860c9ef7a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55860c9ef6b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55860ca04db8 <col:35, line:513:5>
|   |-ParenExpr 0x55860ca04ac8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca04a98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca047f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca047c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca046d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca046b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca04678 <col:23> 'int' lvalue ParmVar 0x55860c9ef6b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca04698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca047a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca04788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca046f0 <col:33> 'int' lvalue ParmVar 0x55860c9ef6b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca04768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca04750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca04710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca04730 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860ca04850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca04830 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca049f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca049e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca049c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca04a38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca048c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860ca04a50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca048f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca04a68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca04930 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55860ca04a80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca049a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca04990 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca04950 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55860ca04da8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55860ca04d90 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55860ca04d78 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca04d48 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55860ca04cc0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca04c90 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca04c40 <col:60, col:69> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca04c20 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca04bf0 <col:60> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca04be0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca04ca8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca04c70 <col:73> 'int' lvalue ParmVar 0x55860c9ef6b0 'i' 'int'
|-CXXMethodDecl 0x55860c9ef9f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55860c9ef868 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860c9ef8e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55860ca054d8 <col:41, line:528:5>
|   |-ParenExpr 0x55860ca05260 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca05230 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca04f50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca04f20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca04e30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca04e18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca04dd8 <col:23> 'int' lvalue ParmVar 0x55860c9ef868 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca04df8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca04f00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca04ee8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca04e50 <col:33> 'int' lvalue ParmVar 0x55860c9ef868 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca04ec8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca04eb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca04e70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca04e90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860ca04fb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca04f90 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca05190 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca05178 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca05158 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca051d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05020 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860ca051e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05058 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca05200 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca05090 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55860ca05218 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca05140 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca05128 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca050e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55860ca054b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55860ca05468 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860ca05438 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55860ca053e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860ca053a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860ca05350 <col:47, col:56> 'char [48]' lvalue ->c 0x55860c9f7630
|     |     |   `-CXXMemberCallExpr 0x55860ca05330 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860ca05300 <col:47> '<bound member function type>' ->xanno 0x55860c9ec918
|     |     |       `-CXXThisExpr 0x55860ca052f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860ca053b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860ca05380 <col:60> 'int' lvalue ParmVar 0x55860c9ef868 'i' 'int'
|     `-ImplicitCastExpr 0x55860ca054a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca05480 <col:65> 'int16_t':'short' lvalue ParmVar 0x55860c9ef8e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55860c9efbb8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55860c9efac0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860ca05ba8 <col:36, line:541:5>
|   |-ParenExpr 0x55860ca05948 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca05918 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca05670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca05640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca05550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca05538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca054f8 <col:23> 'int' lvalue ParmVar 0x55860c9efac0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca05518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca05620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca05608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca05570 <col:33> 'int' lvalue ParmVar 0x55860c9efac0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca055e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca055d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca05590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca055b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860ca056d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca056b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca05878 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca05860 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca05840 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca058b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860ca058d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca058e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca057b0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55860ca05900 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca05828 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca05810 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca057d0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55860ca05b98 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55860ca05b80 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55860ca05b68 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca05b38 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55860ca05ae0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca05ab0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca05a60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca05a40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca05a10 <col:61> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca05a00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca05ac8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca05a90 <col:74> 'int' lvalue ParmVar 0x55860c9efac0 'i' 'int'
|-CXXMethodDecl 0x55860c9efd88 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55860c9efc78 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55860c9efcf0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860c9efe38 <col:20>
| `-OptimizeNoneAttr 0x55860c9efe90 <col:30>
|-CXXMethodDecl 0x55860c9effc8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55860c9efed0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55860ca06278 <col:35, line:562:5>
|   |-ParenExpr 0x55860ca06018 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca05fe8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca05d40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca05d10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca05c20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca05c08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca05bc8 <col:23> 'int' lvalue ParmVar 0x55860c9efed0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca05be8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca05cf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca05cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca05c40 <col:33> 'int' lvalue ParmVar 0x55860c9efed0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca05cb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca05ca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca05c60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca05c80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860ca05da0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca05d80 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca05f48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca05f30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca05f10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca05f88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05e10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860ca05fa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca05e48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca05fb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca05e80 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55860ca05fd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca05ef8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca05ee0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca05ea0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55860ca06268 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55860ca06250 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55860ca06238 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca06208 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55860ca061b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca06180 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca06130 <col:60, col:69> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca06110 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca060e0 <col:60> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca060d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca06198 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca06160 <col:73> 'int' lvalue ParmVar 0x55860c9efed0 'i' 'int'
|-CXXMethodDecl 0x55860c9f01d8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55860c9f0088 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860c9f0100 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55860ca06958 <col:41, line:577:5>
|   |-ParenExpr 0x55860ca066e8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca066b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca06410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca063e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca062f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca062d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca06298 <col:23> 'int' lvalue ParmVar 0x55860c9f0088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca062b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca063c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca063a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca06310 <col:33> 'int' lvalue ParmVar 0x55860c9f0088 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca06388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca06370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca06330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca06350 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860ca06470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca06450 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca06618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca06600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca065e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca06658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca064e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860ca06670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca06518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca06688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca06550 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55860ca066a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca065c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca065b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca06570 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55860ca06938 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55860ca068e8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860ca068b8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55860ca06858 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860ca06828 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860ca067d8 <col:47, col:56> 'char [48]' lvalue ->c 0x55860c9f7630
|     |     |   `-CXXMemberCallExpr 0x55860ca067b8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860ca06788 <col:47> '<bound member function type>' ->xanno 0x55860c9ec918
|     |     |       `-CXXThisExpr 0x55860ca06778 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860ca06840 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860ca06808 <col:60> 'int' lvalue ParmVar 0x55860c9f0088 'i' 'int'
|     `-ImplicitCastExpr 0x55860ca06920 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca06900 <col:65> 'int32_t':'int' lvalue ParmVar 0x55860c9f0100 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55860c9f0398 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55860c9f02a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860ca07088 <col:36, line:591:5>
|   |-ParenExpr 0x55860ca06dc8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca06d98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca06af0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca06ac0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca069d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca069b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca06978 <col:23> 'int' lvalue ParmVar 0x55860c9f02a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca06998 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca06aa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca06a88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca069f0 <col:33> 'int' lvalue ParmVar 0x55860c9f02a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca06a68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca06a50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca06a10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca06a30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55860ca06b50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca06b30 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca06cf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca06ce0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca06cc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca06d38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca06bc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55860ca06d50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca06bf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca06d68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca06c30 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55860ca06d80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca06ca8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca06c90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca06c50 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55860ca07078 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55860ca07060 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55860ca07048 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca07018 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55860ca06f90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca06f60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca06f10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca06ef0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca06ec0 <col:61> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca06eb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca06f78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca06f40 <col:74> 'int' lvalue ParmVar 0x55860c9f02a0 'i' 'int'
|-CXXMethodDecl 0x55860c9f05e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55860c9f0458 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860c9f04d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55860ca07768 <col:42, line:606:5>
|   |-ParenExpr 0x55860ca074f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860ca074c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca07220 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca071f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca07100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca070e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca070a8 <col:23> 'int' lvalue ParmVar 0x55860c9f0458 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca070c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca071d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860ca071b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca07120 <col:33> 'int' lvalue ParmVar 0x55860c9f0458 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca07198 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca07180 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca07140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860ca07160 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55860ca07280 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca07260 <col:60> 'int' 0
|   |   `-CallExpr 0x55860ca07428 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860ca07410 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca073f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca07468 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca072f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55860ca07480 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca07328 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca07498 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca07360 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55860ca074b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca073d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca073c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca07380 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55860ca07748 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55860ca076f8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860ca076c8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55860ca07668 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860ca07638 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860ca075e8 <col:48, col:57> 'char [48]' lvalue ->c 0x55860c9f7630
|     |     |   `-CXXMemberCallExpr 0x55860ca075c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860ca07598 <col:48> '<bound member function type>' ->xanno 0x55860c9ec918
|     |     |       `-CXXThisExpr 0x55860ca07588 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860ca07650 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860ca07618 <col:61> 'int' lvalue ParmVar 0x55860c9f0458 'i' 'int'
|     `-ImplicitCastExpr 0x55860ca07730 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55860ca07710 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55860c9f04d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55860c9f0780 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55860c9f06b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55860ca07fd8 <col:33, line:620:5>
|   |-ParenExpr 0x55860ca07d50 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55860ca07d20 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca07970 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca07940 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca077e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca077c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca07788 <col:23> 'int' lvalue ParmVar 0x55860c9f06b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca077a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca07920 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55860ca07908 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca07800 <col:33> 'int' lvalue ParmVar 0x55860c9f06b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca078e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca078d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca07820 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55860ca078a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55860ca07890 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55860ca07858 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55860ca079d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca079b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55860ca07c80 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55860ca07c68 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca07c48 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca07cc0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca07ab8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55860ca07cd8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca07b00 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca07cf0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca07b38 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55860ca07d08 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca07c30 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca07c18 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca07bd8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55860ca07fc8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55860ca07fb0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55860ca07f98 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860ca07f68 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55860ca07ee0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860ca07eb0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860ca07e60 <col:67, col:76> 'char const[48]' lvalue ->c 0x55860c9f7630
|             |   `-CXXMemberCallExpr 0x55860ca07e40 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860ca07e10 <col:67> '<bound member function type>' ->xanno 0x55860c9ec778
|             |       `-CXXThisExpr 0x55860ca07e00 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860ca07ec8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860ca07e90 <col:80> 'int' lvalue ParmVar 0x55860c9f06b0 'i' 'int'
|-CXXMethodDecl 0x55860c9f0998 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55860c9f0840 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860c9f08c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55860ca08800 <col:45, line:635:5>
|   |-ParenExpr 0x55860ca08548 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55860ca08518 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55860ca081e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860ca081b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860ca08050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860ca08038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860ca07ff8 <col:23> 'int' lvalue ParmVar 0x55860c9f0840 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860ca08018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860ca08190 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55860ca08178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860ca08070 <col:33> 'int' lvalue ParmVar 0x55860c9f0840 'i' 'int'
|   |   |     `-BinaryOperator 0x55860ca08158 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860ca08140 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860ca08090 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860c9ecb60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55860ca08118 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55860ca08100 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55860ca080c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55860ca08240 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860ca08220 <col:79> 'int' 0
|   |   `-CallExpr 0x55860ca08478 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55860ca08460 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860ca08440 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860c559210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860ca084b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca082b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55860ca084d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860ca082f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860ca084e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860ca08330 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55860ca08500 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860ca08428 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860ca08410 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860ca083c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55860ca087e0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55860ca08748 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860ca08718 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55860ca086b8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860ca08688 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860ca08638 <col:54, col:63> 'char [48]' lvalue ->c 0x55860c9f7630
|     |     |   `-CXXMemberCallExpr 0x55860ca08618 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860ca085e8 <col:54> '<bound member function type>' ->xanno 0x55860c9ec918
|     |     |       `-CXXThisExpr 0x55860ca085d8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860ca086a0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860ca08668 <col:67> 'int' lvalue ParmVar 0x55860c9f0840 'i' 'int'
|     `-CXXConstCastExpr 0x55860ca087b0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55860ca08798 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55860ca08760 <col:91> 'const void *' lvalue ParmVar 0x55860c9f08c0 'x' 'const void *'
|-CXXMethodDecl 0x55860c9f0a68 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55860ca08888 <col:34, line:640:5>
|   `-ReturnStmt 0x55860ca08878 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55860ca08860 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55860ca08830 <col:16> 'Packet *' lvalue ->_data_packet 0x55860c9f81e8
|         `-CXXThisExpr 0x55860ca08820 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55860c9f0ba8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55860c9f0b18 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860ca01948 <col:46> 'bool' true
|-CXXMethodDecl 0x55860c9f0d28 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55860c9f0c60 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55860c9f0dd0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55860c9f1580 <line:660:22> "" ""
| |-EnumConstantDecl 0x55860c9f0ed0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f15f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f0eb0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55860c9f0e90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55860c9e6030 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55860c9f0f60 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1608 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f0f40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55860c9f0f20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55860c9e60c0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55860c9f0ff0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1620 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f0fd0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55860c9f0fb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55860c9f1080 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1638 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f1060 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55860c9f1040 <col:19> 'int' 16
| |-EnumConstantDecl 0x55860c9f1110 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1650 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f10f0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55860c9f10d0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55860c9f11a0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1668 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f1180 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55860c9f1160 <col:19> 'int' 32
| |-EnumConstantDecl 0x55860c9f1230 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1680 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f1210 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55860c9f11f0 <col:19> 'int' EnumConstant 0x55860c9f1080 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55860c9f12c0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f1698 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f12a0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55860c9f1280 <col:19> 'int' EnumConstant 0x55860c9f11a0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55860c9f1390 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f16b0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f1370 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55860c9f1350 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55860c9f1310 <col:23> 'int' EnumConstant 0x55860c9f12c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55860c9f1330 <col:40> 'int' 2
| |-EnumConstantDecl 0x55860c9f1460 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860c9f16c8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860c9f1440 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55860c9f1420 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55860c9f13e0 <col:23> 'int' EnumConstant 0x55860c9f12c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55860c9f1400 <col:40> 'int' 4
| `-EnumConstantDecl 0x55860c9f1530 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55860c9f16e0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860c9f1510 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55860c9f14f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55860c9f14b0 <col:23> 'int' EnumConstant 0x55860c9f12c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55860c9f14d0 <col:40> 'int' 8
|-CXXMethodDecl 0x55860c9f1720 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55860c9f17c0 <col:68> "" ""
|-CXXMethodDecl 0x55860c9f1858 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55860c9f18f8 <col:45> "" ""
|-CXXMethodDecl 0x55860c9f1990 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55860c9f1a30 <col:57> "" ""
|-CXXMethodDecl 0x55860c9f1ac8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55860c9f1b68 <col:45> "" ""
|-CXXMethodDecl 0x55860c9f1c00 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55860c9f1ca0 <col:57> "" ""
|-CXXMethodDecl 0x55860c9f1d30 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55860c9f1dd0 <col:51> "" ""
|-CXXMethodDecl 0x55860c9f1e60 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55860c9f1f00 <col:63> "" ""
|-CXXMethodDecl 0x55860c9f1f90 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55860c9f2030 <col:53> "" ""
|-CXXMethodDecl 0x55860c9f20c0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55860c9f2160 <col:65> "" ""
|-CXXMethodDecl 0x55860c9f2278 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55860c9f21e8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55860c9f2320 <col:61> "" ""
|-CXXMethodDecl 0x55860c9f24b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55860c9f23a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55860c9f2420 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55860c9f2568 <col:67> "" ""
|-CXXMethodDecl 0x55860c9f2680 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55860c9f25f0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860c9f2728 <col:63> "" ""
|-CXXMethodDecl 0x55860c9f28c0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55860c9f27b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860c9f2828 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55860c9f2970 <col:69> "" ""
|-CXXMethodDecl 0x55860c9f2a88 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55860c9f29f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860c9f2b30 <col:63> "" ""
|-CXXMethodDecl 0x55860c9f5208 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55860c9f50f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860c9f5170 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860c9f52b8 <col:69> "" ""
|-CXXMethodDecl 0x55860c9f53d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55860c9f5340 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55860c9f5478 <col:62> "" ""
|-CXXMethodDecl 0x55860c9f5610 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55860c9f5500 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860c9f5578 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55860c9f56c0 <col:68> "" ""
|-CXXMethodDecl 0x55860c9f57d8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55860c9f5748 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860c9f5880 <col:63> "" ""
|-CXXMethodDecl 0x55860c9f5a18 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55860c9f5908 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860c9f5980 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55860c9f5ac8 <col:69> "" ""
|-CXXMethodDecl 0x55860c9f5b58 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55860c9f5bf8 <col:64> "" ""
|-CXXMethodDecl 0x55860c9f5c88 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55860c9f5d28 <col:52> "" ""
|-CXXMethodDecl 0x55860c9f5db8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55860c9f5e58 <col:67> "" ""
|-CXXMethodDecl 0x55860c9f5ee8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55860c9f5f88 <col:55> "" ""
|-CXXMethodDecl 0x55860c9f60a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55860c9f6010 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860c9f6148 <col:58> "" ""
|-CXXMethodDecl 0x55860c9f62e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55860c9f61d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860c9f6248 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55860c9f6390 <col:62> "" ""
|-CXXMethodDecl 0x55860c9f64a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55860c9f6418 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860c9f6550 <col:58> "" ""
|-CXXMethodDecl 0x55860c9f66e8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55860c9f65d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860c9f6650 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55860c9f6798 <col:62> "" ""
|-CXXMethodDecl 0x55860c9f68b0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55860c9f6820 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55860c9f6958 <col:60> "" ""
|-CXXMethodDecl 0x55860c9f6af0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55860c9f69e0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55860c9f6a58 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55860c9f6ba0 <col:64> "" ""
|-CXXMethodDecl 0x55860c9f6cb8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55860c9f6c28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860c9f6d60 <col:58> "" ""
|-CXXMethodDecl 0x55860c9f6ef8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55860c9f6de8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860c9f6e60 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55860c9f6fa8 <col:62> "" ""
|-CXXMethodDecl 0x55860c9f70c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55860c9f7030 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55860c9f7168 <col:59> "" ""
|-CXXMethodDecl 0x55860c9f7300 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55860c9f71f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860c9f7268 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860c9f73b0 <col:63> "" ""
|-AccessSpecDecl 0x55860c9f7420 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55860c9f7448 prev 0x55860c9ec650 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860c9f7540 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55860c9f7630 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55860c9f7758 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55860c9f78d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55860c9f7a58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55860c9f7bd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55860ca08a08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55860ca09278 <col:11>
| |-CXXDestructorDecl 0x55860ca08ae0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55860ca08c18 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55860ca08c18
| | `-ParmVarDecl 0x55860ca08d28 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55860ca08dc8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860ca08dc8
| | `-ParmVarDecl 0x55860ca08ed8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55860ca0bc98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860ca0bda8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55860ca0c028 <col:11>
| |   `-ReturnStmt 0x55860ca0c018 <col:11>
| |     `-UnaryOperator 0x55860ca0c000 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55860ca0bff0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55860ca0be18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860ca0be18
|   `-ParmVarDecl 0x55860ca0bf28 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55860c9f7c40 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860c9f7d58 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55860c9f7df8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55860c9f7e60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55860c9f7ec8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55860c9f7f30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55860c9f7f90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55860c9f8050 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55860c9f80b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55860c9f8110 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55860ca08918 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55860c9f7df8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55860ca09288 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55860ca092e0 <col:12>
| |-CXXConstructorDecl 0x55860ca08f48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55860ca08f48
| | `-ParmVarDecl 0x55860ca09058 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55860ca090f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55860ca090f8
| | `-ParmVarDecl 0x55860ca09208 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55860ca0b380 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55860c9f8188 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55860c9f81e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55860c9f8250 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55860c9f82b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55860c9f8320 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55860c9f8388 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55860c9f83e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55860c9f8448 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55860c9f84b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55860c9f8538 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55860c9f8188 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55860ca088b0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55860c9f83e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55860ca092f0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55860ca09350 <col:21, line:755:5>
|-CXXConstructorDecl 0x55860c9f86d8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55860c9f8618 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55860c9f87d0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55860c9f89b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55860c9f88c0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55860c9f8c88 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55860c9f8a70 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860c9f8ae8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860c9f8b60 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860c9f8ea8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55860c9f8d58 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55860c9f8dd0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55860ca01488 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55860c9f8f68 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55860c9f8fe0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55860c9f9058 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55860ca015e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55860ca01550 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ca01728 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55860ca01698 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55860ca01820 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ca093f0 prev 0x55860c9e5cb0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55860ca09528 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55860ca095b8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55860ca09660 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55860ca09700 <col:20>
| `-OptimizeNoneAttr 0x55860ca09758 <col:30>
|-CXXMethodDecl 0x55860ca097a8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55860ca09848 <col:20>
| `-OptimizeNoneAttr 0x55860ca098a0 <col:30>
|-CXXMethodDecl 0x55860ca098f0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55860ca099b8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55860ca09a80 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55860ca09b98 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55860ca09c60 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55860ca09d00 <col:20>
| `-OptimizeNoneAttr 0x55860ca09d58 <col:30>
|-CXXMethodDecl 0x55860ca09dc8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55860ca09e68 <col:20>
| `-OptimizeNoneAttr 0x55860ca09ec0 <col:30>
|-CXXMethodDecl 0x55860ca09f68 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55860ca0a008 <col:20>
| `-OptimizeNoneAttr 0x55860ca0a060 <col:30>
|-CXXMethodDecl 0x55860ca0a0b0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55860ca0a1c8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55860ca0a2e8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55860ca0a408 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55860ca0a4d0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55860ca0a570 <col:62> "" ""
|-AccessSpecDecl 0x55860ca0a5e0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55860ca0a640 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55860ca0b238 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55860ca0b460 <col:29, col:31>
|-CXXMethodDecl 0x55860ca0a708 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55860ca0a848 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55860ca0a7b8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55860ca0a940 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55860ca0b470 <col:23, col:25>
|-CXXMethodDecl 0x55860ca0aaf8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55860ca0aa30 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55860ca0adc8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55860ca0abb0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860ca0ac28 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860ca0aca0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ca0af58 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55860ca0ae90 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55860ca0b050 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55860ca0b0b8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55860ca0b0b8
  `-ParmVarDecl 0x55860ca0b1c8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860caf02c0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860caf03d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55860caf0468 <col:16, col:22> col:16 public
|-EnumDecl 0x55860caf0490 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55860caf0590 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55860caf07e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860caf0570 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55860caf0550 <col:21> 'int' 0
| |-EnumConstantDecl 0x55860caf0620 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55860caf07f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860caf0600 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55860caf05e0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55860caf06b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55860caf0810 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860caf0690 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55860caf0670 <col:24> 'int' 34
| |-EnumConstantDecl 0x55860caf0740 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55860caf0828 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860caf0720 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55860caf0700 <col:25> 'int' 95
| `-EnumConstantDecl 0x55860caf0790 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55860caf21a0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860caf25d8 <col:7>
|-CXXConstructorDecl 0x55860caf22a8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55860caf22a8
| `-ParmVarDecl 0x55860caf23b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55860caf2458 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55860caf2568 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55860cb51580 <col:7>
`-CXXDestructorDecl 0x55860caf46f8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860caf0858 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55860caf09b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55860caf0a48 <col:32, col:38> col:32 public
|-TypedefDecl 0x55860caf0a80 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55860c612760 'uint32_t' sugar
|   |-Typedef 0x55860c5264c8 'uint32_t'
|   `-TypedefType 0x55860c4ff5a0 '__uint32_t' sugar
|     |-Typedef 0x55860c4ff198 '__uint32_t'
|     `-BuiltinType 0x55860c4bd620 'unsigned int'
|-CXXConstructorDecl 0x55860caf0bc8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55860caf0af0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55860caf20a8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55860caf25e8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55860caf1960 'base' 'int'
| | `-ImplicitCastExpr 0x55860caf2148 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55860caf2108 <col:16> 'int' lvalue ParmVar 0x55860caf0af0 'b' 'int'
| `-CompoundStmt 0x55860caf2658 <col:19, line:1046:5>
|-CXXMethodDecl 0x55860caf10c0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55860caf0c90 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55860caf0d10 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55860caf0d88 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55860caf0e08 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55860caf0ec8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55860caf0f48 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55860caf1518 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55860caf1190 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55860caf1478 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55860caf1238 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55860caf12d8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55860caf1350 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55860caf20c8 <col:82> 'const ArgContext' lvalue Var 0x55860cae6008 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55860caf35a8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55860caf27e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55860caf2678 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55860caf27a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55860caf2a08 <line:1055:9, col:91>
| |   | `-VarDecl 0x55860caf2818 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55860caf29e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55860caf29c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55860caf2970 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55860caf2950 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55860caf28f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55860caf28a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55860caf28d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55860caf2938 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55860caf2918 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55860caf29a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55860caf2b88 <line:1056:9, col:27>
| |   | `-VarDecl 0x55860caf2b20 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55860caf2fd0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55860caf2f00 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55860caf2e80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55860c9dc968 0x55860c825d28 0x55860c825a00 0x55860c8161d0 0x55860c815e80 0x55860c815770 0x55860c7e80e0 0x55860c7755b0
| |   | | |-CallExpr 0x55860caf2dc0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55860caf2bb0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55860caf2c60 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55860caf2c30 <col:19, col:23> '<bound member function type>' .begin 0x55860c8053d8
| |   | | | |   `-DeclRefExpr 0x55860caf2c10 <col:19> 'const String' lvalue ParmVar 0x55860caf1238 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55860caf2cd0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55860caf2ca0 <col:32, col:36> '<bound member function type>' .end 0x55860c8055f0
| |   | | | |   `-DeclRefExpr 0x55860caf2c80 <col:32> 'const String' lvalue ParmVar 0x55860caf1238 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55860caf2cf0 <col:43> 'const bool' lvalue Var 0x55860caf2678 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55860caf2d58 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55860caf2d38 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55860caf2d80 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55860caf2b20 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55860caf2da0 <col:73> 'const int' lvalue Var 0x55860caf2818 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55860caf2e60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55860caf2e30 <col:16, col:20> '<bound member function type>' .end 0x55860c8055f0
| |   | |     `-DeclRefExpr 0x55860caf2e10 <col:16> 'const String' lvalue ParmVar 0x55860caf1238 'str' 'const String &'
| |   | `-BinaryOperator 0x55860caf2fb0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55860caf2f48 <col:13> 'int' lvalue ->status 0x55860caf19c8
| |   |   | `-CXXThisExpr 0x55860caf2f38 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55860caf2f98 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55860caf2f78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf0620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55860caf3220 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55860caf3108 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55860caf30f0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55860caf30d8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55860caf2ff8 <col:13> 'int' lvalue ->status 0x55860caf19c8
| |   | | |     `-CXXThisExpr 0x55860caf2fe8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55860caf30b8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55860caf3088 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55860caf3038 <col:23> 'int' lvalue ->status 0x55860caf19c8
| |   | |   |   `-CXXThisExpr 0x55860caf3028 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55860caf30a0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55860caf3068 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55860caf3200 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55860caf31a0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55860caf3148 <col:13, col:18> '<bound member function type>' .error 0x55860ca9c340
| |   |   | | `-DeclRefExpr 0x55860caf3128 <col:13> 'const ArgContext' lvalue ParmVar 0x55860caf1350 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55860caf31c8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55860caf3178 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55860caf31f0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55860caf31e0 <col:20> 'bool' false
| |   |-DeclStmt 0x55860caf33f8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55860caf33a0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55860caf3330 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55860caf3558 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55860caf3410 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55860c7a9578
| |   | |-DeclRefExpr 0x55860caf3458 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55860caf2b20 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55860caf3528 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55860caf34a0 <col:64> 'V' lvalue ParmVar 0x55860caf12d8 'result' 'V &'
| |   `-ReturnStmt 0x55860caf3598 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55860caf3588 <col:16> 'bool' true
| `-CXXMethodDecl 0x55860cb54d08 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55860cb54ae0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55860cb54bb8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55860cb54c20 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55860cb5e110 <col:94, line:1067:5>
|     |-DeclStmt 0x55860cb55518 <line:1054:9, col:64>
|     | `-VarDecl 0x55860cb55338 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55860cb554a8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55860cb55478 <col:36, col:55> 'const bool' lvalue Var 0x55860c7994e8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55860cb556f8 <line:1055:9, col:91>
|     | `-VarDecl 0x55860cb55530 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55860cb55678 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55860cb55660 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55860cb55640 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55860cb55620 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55860cb55600 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55860cb555c8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55860cb555a8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55860caf28d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55860cb555e8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55860caf2918 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55860caf29a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55860cb55890 <line:1056:9, col:27>
|     | `-VarDecl 0x55860cb55828 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55860cb5d390 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55860cb5d338 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55860cb5d1f0 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55860cb5d1c0 <col:13> '<bound member function type>' ->parse 0x55860caf10c0
|     | | | | `-CXXThisExpr 0x55860cb5d1b0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55860cb5d050 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55860cb5d020 <col:19, col:23> '<bound member function type>' .begin 0x55860c8053d8
|     | | | |   `-DeclRefExpr 0x55860cb5d000 <col:19> 'const String' lvalue ParmVar 0x55860cb54ae0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55860cb5d0c0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55860cb5d090 <col:32, col:36> '<bound member function type>' .end 0x55860c8055f0
|     | | | |   `-DeclRefExpr 0x55860cb5d070 <col:32> 'const String' lvalue ParmVar 0x55860cb54ae0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55860cb5d260 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55860cb5d240 <col:43> 'const bool' lvalue Var 0x55860cb55338 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55860cb5d148 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55860cb5d130 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55860cb5d110 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55860cb5d278 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55860cb5d170 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55860cb55828 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55860cb5d2b0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55860cb5d290 <col:73> 'const int' lvalue Var 0x55860cb55530 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55860cb5d318 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55860cb5d2e8 <col:16, col:20> '<bound member function type>' .end 0x55860c8055f0
|     | |     `-DeclRefExpr 0x55860cb5d2c8 <col:16> 'const String' lvalue ParmVar 0x55860cb54ae0 'str' 'const String &'
|     | `-BinaryOperator 0x55860cb5d370 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55860caf2f48 <col:13> 'int' lvalue ->status 0x55860caf19c8
|     |   | `-CXXThisExpr 0x55860caf2f38 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55860cb5d358 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55860caf2f78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf0620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55860cb5d508 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55860cb5d428 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55860cb5d410 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55860cb5d3f8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55860caf2ff8 <col:13> 'int' lvalue ->status 0x55860caf19c8
|     | | |     `-CXXThisExpr 0x55860caf2fe8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55860cb5d3d8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55860cb5d3a8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55860caf3038 <col:23> 'int' lvalue ->status 0x55860caf19c8
|     | |   |   `-CXXThisExpr 0x55860caf3028 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55860cb5d3c0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55860caf3068 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55860cb5d4e8 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55860cb5d498 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55860cb5d468 <col:13, col:18> '<bound member function type>' .error 0x55860ca9c340
|     |   | | `-DeclRefExpr 0x55860cb5d448 <col:13> 'const ArgContext' lvalue ParmVar 0x55860cb54c20 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55860cb5d4c0 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55860caf3178 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55860cb5d4d8 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55860caf31e0 <col:20> 'bool' false
|     |-DeclStmt 0x55860cb5da48 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55860cb5d9f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55860cb5d9a0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55860cb5d980 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55860cb5d910 'type'
|     |       `-ElaboratedType 0x55860cb5d8c0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55860cb5d8a0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55860c799640 'unsigned_type'
|     |           `-BuiltinType 0x55860c4bd620 'unsigned int'
|     |-CallExpr 0x55860cb5e0a0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55860cb5e088 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55860cb5e008 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55860cb5dee8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55860c7a9578 'extract_integer')
|     | |-ImplicitCastExpr 0x55860cb5e0e8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55860cb5e0d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55860cb5daa8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55860cb55828 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55860cb5db78 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55860cb5db28 <col:64> 'int':'int' lvalue ParmVar 0x55860cb54bb8 'result' 'int &'
|     `-ReturnStmt 0x55860cb5e100 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55860caf3588 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55860caf18d8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55860caf1588 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55860caf1838 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55860caf1638 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55860caf16d8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55860caf1750 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55860caf20e8 <col:71> 'const ArgContext' lvalue Var 0x55860cae6008 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55860caf3d18 <col:83, line:1083:5>
| |   |-DeclStmt 0x55860caf3670 <line:1071:9, col:12>
| |   | `-VarDecl 0x55860caf3608 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55860caf3cf0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55860caf3900 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55860caf3788 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55860caf3750 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55860caf3698 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55860caf36f0 <col:31> 'const String' lvalue ParmVar 0x55860caf1638 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55860caf3710 <col:36> 'V' lvalue Var 0x55860caf3608 'x' 'V'
| |     | |   `-DeclRefExpr 0x55860caf3730 <col:39> 'const ArgContext' lvalue ParmVar 0x55860caf1750 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55860caf38e0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55860caf38c0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55860caf38a8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55860caf3890 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55860caf37b0 <col:17> 'int' lvalue ->status 0x55860caf19c8
| |     |     |     `-CXXThisExpr 0x55860caf37a0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55860caf3870 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55860caf3840 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55860caf37f0 <col:27> 'int' lvalue ->status 0x55860caf19c8
| |     |       |   `-CXXThisExpr 0x55860caf37e0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55860caf3858 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55860caf3820 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55860caf3930 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55860caf3920 <col:20> 'bool' false
| |     `-IfStmt 0x55860caf3cc8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55860caf39d0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55860caf39a0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55860caf3950 <col:18> 'int' lvalue ->status 0x55860caf19c8
| |       | |   `-CXXThisExpr 0x55860caf3940 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55860caf39b8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55860caf3980 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55860caf3c08 <col:42, line:1079:9>
| |       | |-CallExpr 0x55860caf3bb0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55860caf3a00 <line:1076:13> '<bound member function type>' ->range_error 0x55860caf1fd8
| |       | | | `-CXXThisExpr 0x55860caf39f0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55860caf3a30 <col:25> 'const ArgContext' lvalue ParmVar 0x55860caf1750 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55860caf3b10 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55860caf3b88 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55860caf3b68 <col:43> 'V' lvalue Var 0x55860caf3608 'x' 'V'
| |       | `-ReturnStmt 0x55860caf3bf8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55860caf3be8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55860caf3ca8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55860caf3c68 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55860caf3c28 <col:13> 'V' lvalue ParmVar 0x55860caf16d8 'result' 'V &'
| |         | `-DeclRefExpr 0x55860caf3c48 <col:22> 'V' lvalue Var 0x55860caf3608 'x' 'V'
| |         `-ReturnStmt 0x55860caf3c98 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55860caf3c88 <col:20> 'bool' true
| `-CXXMethodDecl 0x55860cb546c8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55860cb544a0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55860cb54578 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55860cb545e0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55860cb55318 <col:83, line:1083:5>
|     |-DeclStmt 0x55860cb54950 <line:1071:9, col:12>
|     | `-VarDecl 0x55860cb548e8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55860cb552f0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55860cb54f80 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55860cb54ea8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55860cb54e70 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55860cb54e28 <col:14> '<bound member function type>' ->parse_saturating 0x55860cb54d08
|       | |   | `-CXXThisExpr 0x55860cb54e18 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55860cb549c0 <col:31> 'const String' lvalue ParmVar 0x55860cb544a0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55860cb549e0 <col:36> 'int':'int' lvalue Var 0x55860cb548e8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55860cb54a00 <col:39> 'const ArgContext' lvalue ParmVar 0x55860cb545e0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55860cb54f60 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55860cb54f40 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55860cb54f28 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55860cb54f10 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55860caf37b0 <col:17> 'int' lvalue ->status 0x55860caf19c8
|       |     |     `-CXXThisExpr 0x55860caf37a0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55860cb54ef0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55860cb54ec0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55860caf37f0 <col:27> 'int' lvalue ->status 0x55860caf19c8
|       |       |   `-CXXThisExpr 0x55860caf37e0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55860cb54ed8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55860caf3820 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55860cb54fa0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55860caf3920 <col:20> 'bool' false
|       `-IfStmt 0x55860cb552c8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55860cb54fe0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55860cb54fb0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55860caf3950 <col:18> 'int' lvalue ->status 0x55860caf19c8
|         | |   `-CXXThisExpr 0x55860caf3940 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55860cb54fc8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55860caf3980 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55860caf06b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55860cb55200 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55860cb55170 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55860caf3a00 <line:1076:13> '<bound member function type>' ->range_error 0x55860caf1fd8
|         | | | `-CXXThisExpr 0x55860caf39f0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55860cb55000 <col:25> 'const ArgContext' lvalue ParmVar 0x55860cb545e0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55860cb551d8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55860cb551a8 <col:31, col:50> 'const bool' lvalue Var 0x55860c7994e8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55860cb55148 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55860cb55130 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55860cb55118 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55860cb550f8 <col:43> 'int':'int' lvalue Var 0x55860cb548e8 'x' 'int':'int'
|         | `-ReturnStmt 0x55860cb551f0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55860caf3be8 <col:20> 'bool' false
|         `-CompoundStmt 0x55860cb552a8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55860cb55278 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55860cb55220 <col:13> 'int':'int' lvalue ParmVar 0x55860cb54578 'result' 'int &'
|           | `-ImplicitCastExpr 0x55860cb55260 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55860cb55240 <col:22> 'int':'int' lvalue Var 0x55860cb548e8 'x' 'int':'int'
|           `-ReturnStmt 0x55860cb55298 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55860caf3c88 <col:20> 'bool' true
|-FieldDecl 0x55860caf1960 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55860caf19c8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55860caf1a18 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55860caf1cd0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55860caf1a58 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55860caf1ad8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55860caf1b50 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55860caf1bd0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55860caf1fd8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55860caf1da0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55860caf1e18 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55860caf1eb0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55860caf4578 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55860caf4578
| `-ParmVarDecl 0x55860caf4688 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55860caf4808 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55860caf4918 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55860cb51590 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55860cb51560 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55860cb51530 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55860cb51500 <col:7> 'IntArg' lvalue ParmVar 0x55860caf4918 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55860caf1960 'base' 'int'
| | `-ImplicitCastExpr 0x55860cb51688 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55860cb51658 <col:7> 'int' xvalue .base 0x55860caf1960
| |     `-CXXStaticCastExpr 0x55860cb51628 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55860cb515f8 <col:7> 'IntArg' lvalue ParmVar 0x55860caf4918 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55860caf19c8 'status' 'int'
| | `-ImplicitCastExpr 0x55860cb51758 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55860cb51728 <col:7> 'int' xvalue .status 0x55860caf19c8
| |     `-CXXStaticCastExpr 0x55860cb516f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55860cb516c8 <col:7> 'IntArg' lvalue ParmVar 0x55860caf4918 '' 'IntArg &&'
| `-CompoundStmt 0x55860cb517b0 <col:7>
`-CXXDestructorDecl 0x55860cb506f0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860caf8e40 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55860caf9098 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55860cb50618 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55860cb50b90 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55860cb50b70 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55860cb50c00 <col:19>
|-CXXConstructorDecl 0x55860cb507f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55860cb507f8
| `-ParmVarDecl 0x55860cb50908 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55860cb509a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55860cb50ab8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55860cb517c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55860cb514e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55860cb514b0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55860cb51480 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55860cb50ab8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55860cb51830 <col:19>
`-CXXDestructorDecl 0x55860cb50c40 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
